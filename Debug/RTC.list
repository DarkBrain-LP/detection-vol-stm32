
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002930  08002930  00003930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002994  08002994  00004060  2**0
                  CONTENTS
  4 .ARM          00000008  08002994  08002994  00003994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800299c  0800299c  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800299c  0800299c  0000399c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029a0  080029a0  000039a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080029a4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004060  2**0
                  CONTENTS
 10 .bss          00000174  20000060  20000060  00004060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001d4  200001d4  00004060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006357  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015e8  00000000  00000000  0000a3e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000530  00000000  00000000  0000b9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003c3  00000000  00000000  0000bf00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021433  00000000  00000000  0000c2c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000073d1  00000000  00000000  0002d6f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9d39  00000000  00000000  00034ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fe800  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000017d8  00000000  00000000  000fe844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  0010001c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002918 	.word	0x08002918

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08002918 	.word	0x08002918

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000562:	b091      	sub	sp, #68	@ 0x44
 8000564:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fd53 	bl	8001010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 fb19 	bl	8000ba0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  TimeTypeDef time = {0};  // HAL_RTC_DST_Add1Hour(&hrtc)
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2100      	movs	r1, #0
 8000574:	460a      	mov	r2, r1
 8000576:	801a      	strh	r2, [r3, #0]
 8000578:	460a      	mov	r2, r1
 800057a:	709a      	strb	r2, [r3, #2]
  DateTypeDef date = {0};
 800057c:	f107 031c 	add.w	r3, r7, #28
 8000580:	2100      	movs	r1, #0
 8000582:	460a      	mov	r2, r1
 8000584:	801a      	strh	r2, [r3, #0]
 8000586:	460a      	mov	r2, r1
 8000588:	709a      	strb	r2, [r3, #2]
  char time_string[20];
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 fb75 	bl	8000c78 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  init_rtc();
 800058e:	f000 f883 	bl	8000698 <init_rtc>
  init_usart();
 8000592:	f000 fc71 	bl	8000e78 <init_usart>
  /* USER CODE END 2 */

  uint8_t data = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  int input_nb = 6;
 800059c:	2306      	movs	r3, #6
 800059e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t time_tab[6] = {0};
 80005a0:	2300      	movs	r3, #0
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	2300      	movs	r3, #0
 80005a6:	80bb      	strh	r3, [r7, #4]

  for(int i = 0; i < input_nb; i++){
 80005a8:	2300      	movs	r3, #0
 80005aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80005ac:	e016      	b.n	80005dc <main+0x7c>
	  while(!(USART2->SR & USART_SR_RXNE)){};
 80005ae:	bf00      	nop
 80005b0:	4b34      	ldr	r3, [pc, #208]	@ (8000684 <main+0x124>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f003 0320 	and.w	r3, r3, #32
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0f9      	beq.n	80005b0 <main+0x50>
	  data = USART2->DR;
 80005bc:	4b31      	ldr	r3, [pc, #196]	@ (8000684 <main+0x124>)
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	  time_tab[i] = data; // Convert ASCII value to numerical value
 80005c4:	463a      	mov	r2, r7
 80005c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005c8:	4413      	add	r3, r2
 80005ca:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80005ce:	701a      	strb	r2, [r3, #0]
	  USART2->DR = 'A';
 80005d0:	4b2c      	ldr	r3, [pc, #176]	@ (8000684 <main+0x124>)
 80005d2:	2241      	movs	r2, #65	@ 0x41
 80005d4:	605a      	str	r2, [r3, #4]
  for(int i = 0; i < input_nb; i++){
 80005d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005d8:	3301      	adds	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80005dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80005de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005e0:	429a      	cmp	r2, r3
 80005e2:	dbe4      	blt.n	80005ae <main+0x4e>
  }

  date.Year = time_tab[0];
 80005e4:	783b      	ldrb	r3, [r7, #0]
 80005e6:	773b      	strb	r3, [r7, #28]
  date.Month = time_tab[1];
 80005e8:	787b      	ldrb	r3, [r7, #1]
 80005ea:	777b      	strb	r3, [r7, #29]
  date.Date = time_tab[2];
 80005ec:	78bb      	ldrb	r3, [r7, #2]
 80005ee:	77bb      	strb	r3, [r7, #30]

  time.Hours = time_tab[3];
 80005f0:	78fb      	ldrb	r3, [r7, #3]
 80005f2:	f887 3020 	strb.w	r3, [r7, #32]
  time.Minutes = time_tab[4];
 80005f6:	793b      	ldrb	r3, [r7, #4]
 80005f8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  time.Seconds = time_tab[5];
 80005fc:	797b      	ldrb	r3, [r7, #5]
 80005fe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  // init rtc with input date
  init_rtc_datetime(date, time);
 8000602:	6a39      	ldr	r1, [r7, #32]
 8000604:	69f8      	ldr	r0, [r7, #28]
 8000606:	f000 f8d9 	bl	80007bc <init_rtc_datetime>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  btn_poussoir_state = HAL_GPIO_ReadPin(portA, GPIO_PIN_0);
 800060a:	4b1f      	ldr	r3, [pc, #124]	@ (8000688 <main+0x128>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2101      	movs	r1, #1
 8000610:	4618      	mov	r0, r3
 8000612:	f001 f841 	bl	8001698 <HAL_GPIO_ReadPin>
 8000616:	4603      	mov	r3, r0
 8000618:	461a      	mov	r2, r3
 800061a:	4b1c      	ldr	r3, [pc, #112]	@ (800068c <main+0x12c>)
 800061c:	701a      	strb	r2, [r3, #0]
	  if(interupt == 1)
 800061e:	4b1c      	ldr	r3, [pc, #112]	@ (8000690 <main+0x130>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d1f1      	bne.n	800060a <main+0xaa>
	  {
		  get_time(&time);
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fa62 	bl	8000af4 <get_time>
		  get_date(&date);
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fa0d 	bl	8000a54 <get_date>
		  sprintf(time_string, "%02d-%02d-%04d %02d:%02d:%02d\r\n", date.Date, date.Month, 2000 + date.Year, time.Hours, time.Minutes, time.Seconds);
 800063a:	7fbb      	ldrb	r3, [r7, #30]
 800063c:	461d      	mov	r5, r3
 800063e:	7f7b      	ldrb	r3, [r7, #29]
 8000640:	461e      	mov	r6, r3
 8000642:	7f3b      	ldrb	r3, [r7, #28]
 8000644:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000648:	f897 2020 	ldrb.w	r2, [r7, #32]
 800064c:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8000650:	f897 0022 	ldrb.w	r0, [r7, #34]	@ 0x22
 8000654:	4604      	mov	r4, r0
 8000656:	f107 0008 	add.w	r0, r7, #8
 800065a:	9403      	str	r4, [sp, #12]
 800065c:	9102      	str	r1, [sp, #8]
 800065e:	9201      	str	r2, [sp, #4]
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	4633      	mov	r3, r6
 8000664:	462a      	mov	r2, r5
 8000666:	490b      	ldr	r1, [pc, #44]	@ (8000694 <main+0x134>)
 8000668:	f001 fcb6 	bl	8001fd8 <siprintf>
		  serial_puts(&time_string);
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fc7d 	bl	8000f70 <serial_puts>
		  newLine();
 8000676:	f000 fc97 	bl	8000fa8 <newLine>
		  interupt = 0;
 800067a:	4b05      	ldr	r3, [pc, #20]	@ (8000690 <main+0x130>)
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
	  btn_poussoir_state = HAL_GPIO_ReadPin(portA, GPIO_PIN_0);
 8000680:	e7c3      	b.n	800060a <main+0xaa>
 8000682:	bf00      	nop
 8000684:	40004400 	.word	0x40004400
 8000688:	20000000 	.word	0x20000000
 800068c:	2000007c 	.word	0x2000007c
 8000690:	20000080 	.word	0x20000080
 8000694:	08002930 	.word	0x08002930

08000698 <init_rtc>:
  * @retval None
  */

/* USER CODE BEGIN 4 */
static void init_rtc(void)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
	uint8_t asynch_factor = 0x7F; // 0111.1111
 800069e:	237f      	movs	r3, #127	@ 0x7f
 80006a0:	71fb      	strb	r3, [r7, #7]
	uint8_t synch_factor = 0xFF; // 1111.1111 255
 80006a2:	23ff      	movs	r3, #255	@ 0xff
 80006a4:	71bb      	strb	r3, [r7, #6]
	// Low Speed Clock config
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80006a6:	4b40      	ldr	r3, [pc, #256]	@ (80007a8 <init_rtc+0x110>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006aa:	4a3f      	ldr	r2, [pc, #252]	@ (80007a8 <init_rtc+0x110>)
 80006ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b0:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_DBP;
 80006b2:	4b3e      	ldr	r3, [pc, #248]	@ (80007ac <init_rtc+0x114>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a3d      	ldr	r2, [pc, #244]	@ (80007ac <init_rtc+0x114>)
 80006b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006bc:	6013      	str	r3, [r2, #0]
	RCC->CSR |= RCC_CSR_LSION;
 80006be:	4b3a      	ldr	r3, [pc, #232]	@ (80007a8 <init_rtc+0x110>)
 80006c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80006c2:	4a39      	ldr	r2, [pc, #228]	@ (80007a8 <init_rtc+0x110>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6753      	str	r3, [r2, #116]	@ 0x74
	while(!(RCC->CSR & RCC_CSR_LSIRDY)){};
 80006ca:	bf00      	nop
 80006cc:	4b36      	ldr	r3, [pc, #216]	@ (80007a8 <init_rtc+0x110>)
 80006ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80006d0:	f003 0302 	and.w	r3, r3, #2
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0f9      	beq.n	80006cc <init_rtc+0x34>
	RCC->BDCR |= 0x8200;
 80006d8:	4b33      	ldr	r3, [pc, #204]	@ (80007a8 <init_rtc+0x110>)
 80006da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80006dc:	4a32      	ldr	r2, [pc, #200]	@ (80007a8 <init_rtc+0x110>)
 80006de:	f443 4302 	orr.w	r3, r3, #33280	@ 0x8200
 80006e2:	6713      	str	r3, [r2, #112]	@ 0x70

	// enable RTC write
	RTC->WPR = 0xCA;
 80006e4:	4b32      	ldr	r3, [pc, #200]	@ (80007b0 <init_rtc+0x118>)
 80006e6:	22ca      	movs	r2, #202	@ 0xca
 80006e8:	625a      	str	r2, [r3, #36]	@ 0x24
	RTC->WPR = 0x53;
 80006ea:	4b31      	ldr	r3, [pc, #196]	@ (80007b0 <init_rtc+0x118>)
 80006ec:	2253      	movs	r2, #83	@ 0x53
 80006ee:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable init mode
	RTC->ISR |= (1<<ISR_IN_BIT);
 80006f0:	4b2f      	ldr	r3, [pc, #188]	@ (80007b0 <init_rtc+0x118>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	4a2e      	ldr	r2, [pc, #184]	@ (80007b0 <init_rtc+0x118>)
 80006f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006fa:	60d3      	str	r3, [r2, #12]
	while(!( RTC->ISR & (1<<ISR_INITF_BIT) )){};
 80006fc:	bf00      	nop
 80006fe:	4b2c      	ldr	r3, [pc, #176]	@ (80007b0 <init_rtc+0x118>)
 8000700:	68db      	ldr	r3, [r3, #12]
 8000702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000706:	2b00      	cmp	r3, #0
 8000708:	d0f9      	beq.n	80006fe <init_rtc+0x66>


	// program first the asynchronous prescaler factor in RTC_PRER register
	RTC->PRER &= ~(RTC_PRER_ASYNC_MASK<<RTC_PRER_ASYNC_LSB);
 800070a:	4b29      	ldr	r3, [pc, #164]	@ (80007b0 <init_rtc+0x118>)
 800070c:	691b      	ldr	r3, [r3, #16]
 800070e:	4a28      	ldr	r2, [pc, #160]	@ (80007b0 <init_rtc+0x118>)
 8000710:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8000714:	6113      	str	r3, [r2, #16]
	RTC->PRER |= asynch_factor<<RTC_PRER_ASYNC_LSB;
 8000716:	4b26      	ldr	r3, [pc, #152]	@ (80007b0 <init_rtc+0x118>)
 8000718:	691a      	ldr	r2, [r3, #16]
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	041b      	lsls	r3, r3, #16
 800071e:	4924      	ldr	r1, [pc, #144]	@ (80007b0 <init_rtc+0x118>)
 8000720:	4313      	orrs	r3, r2
 8000722:	610b      	str	r3, [r1, #16]

	//  program the synchronous prescaler factor
	RTC->PRER &= ~RTC_PRER_SYNC_MASK;
 8000724:	4b22      	ldr	r3, [pc, #136]	@ (80007b0 <init_rtc+0x118>)
 8000726:	691b      	ldr	r3, [r3, #16]
 8000728:	4a21      	ldr	r2, [pc, #132]	@ (80007b0 <init_rtc+0x118>)
 800072a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800072e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000732:	6113      	str	r3, [r2, #16]
	RTC->PRER |= synch_factor;
 8000734:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <init_rtc+0x118>)
 8000736:	691a      	ldr	r2, [r3, #16]
 8000738:	79bb      	ldrb	r3, [r7, #6]
 800073a:	491d      	ldr	r1, [pc, #116]	@ (80007b0 <init_rtc+0x118>)
 800073c:	4313      	orrs	r3, r2
 800073e:	610b      	str	r3, [r1, #16]

	// default time


	RTC->TR &= 0xFF808080;
 8000740:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <init_rtc+0x118>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a1a      	ldr	r2, [pc, #104]	@ (80007b0 <init_rtc+0x118>)
 8000746:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
 800074a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800074e:	6013      	str	r3, [r2, #0]
	RTC->TR |=(0x16<<16) | (0x27<<8) | (0x00<<8);
 8000750:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <init_rtc+0x118>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a16      	ldr	r2, [pc, #88]	@ (80007b0 <init_rtc+0x118>)
 8000756:	f443 13b1 	orr.w	r3, r3, #1449984	@ 0x162000
 800075a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800075e:	6013      	str	r3, [r2, #0]

	// default date

	RTC->DR &= 0xFF0020C0;
 8000760:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <init_rtc+0x118>)
 8000762:	685a      	ldr	r2, [r3, #4]
 8000764:	4912      	ldr	r1, [pc, #72]	@ (80007b0 <init_rtc+0x118>)
 8000766:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <init_rtc+0x11c>)
 8000768:	4013      	ands	r3, r2
 800076a:	604b      	str	r3, [r1, #4]
	RTC->DR |= (0x24<<16) | (4<<8) | (0x2);
 800076c:	4b10      	ldr	r3, [pc, #64]	@ (80007b0 <init_rtc+0x118>)
 800076e:	685a      	ldr	r2, [r3, #4]
 8000770:	490f      	ldr	r1, [pc, #60]	@ (80007b0 <init_rtc+0x118>)
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <init_rtc+0x120>)
 8000774:	4313      	orrs	r3, r2
 8000776:	604b      	str	r3, [r1, #4]

	// disable init mode
	RTC->CR |= RTC_CR_BYPSHAD;
 8000778:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <init_rtc+0x118>)
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	4a0c      	ldr	r2, [pc, #48]	@ (80007b0 <init_rtc+0x118>)
 800077e:	f043 0320 	orr.w	r3, r3, #32
 8000782:	6093      	str	r3, [r2, #8]
	RTC->ISR &= ~RTC_ISR_INIT;
 8000784:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <init_rtc+0x118>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	4a09      	ldr	r2, [pc, #36]	@ (80007b0 <init_rtc+0x118>)
 800078a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800078e:	60d3      	str	r3, [r2, #12]
	PWR->CR &= ~PWR_CR_DBP;
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <init_rtc+0x114>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a05      	ldr	r2, [pc, #20]	@ (80007ac <init_rtc+0x114>)
 8000796:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800079a:	6013      	str	r3, [r2, #0]

}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000
 80007b0:	40002800 	.word	0x40002800
 80007b4:	ff0020c0 	.word	0xff0020c0
 80007b8:	00240402 	.word	0x00240402

080007bc <init_rtc_datetime>:

static void init_rtc_datetime(DateTypeDef date, TimeTypeDef time)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
	uint8_t asynch_factor = 0x7F; // 0111.1111
 80007c6:	237f      	movs	r3, #127	@ 0x7f
 80007c8:	73fb      	strb	r3, [r7, #15]
	uint8_t synch_factor = 0xFF; // 1111.1111 255
 80007ca:	23ff      	movs	r3, #255	@ 0xff
 80007cc:	73bb      	strb	r3, [r7, #14]
	// Low Speed Clock config
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80007ce:	4b9c      	ldr	r3, [pc, #624]	@ (8000a40 <init_rtc_datetime+0x284>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d2:	4a9b      	ldr	r2, [pc, #620]	@ (8000a40 <init_rtc_datetime+0x284>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d8:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_DBP;
 80007da:	4b9a      	ldr	r3, [pc, #616]	@ (8000a44 <init_rtc_datetime+0x288>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a99      	ldr	r2, [pc, #612]	@ (8000a44 <init_rtc_datetime+0x288>)
 80007e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007e4:	6013      	str	r3, [r2, #0]
	RCC->CSR |= RCC_CSR_LSION;
 80007e6:	4b96      	ldr	r3, [pc, #600]	@ (8000a40 <init_rtc_datetime+0x284>)
 80007e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80007ea:	4a95      	ldr	r2, [pc, #596]	@ (8000a40 <init_rtc_datetime+0x284>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6753      	str	r3, [r2, #116]	@ 0x74
	while(!(RCC->CSR & RCC_CSR_LSIRDY)){};
 80007f2:	bf00      	nop
 80007f4:	4b92      	ldr	r3, [pc, #584]	@ (8000a40 <init_rtc_datetime+0x284>)
 80007f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80007f8:	f003 0302 	and.w	r3, r3, #2
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d0f9      	beq.n	80007f4 <init_rtc_datetime+0x38>
	RCC->BDCR |= 0x8200;
 8000800:	4b8f      	ldr	r3, [pc, #572]	@ (8000a40 <init_rtc_datetime+0x284>)
 8000802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000804:	4a8e      	ldr	r2, [pc, #568]	@ (8000a40 <init_rtc_datetime+0x284>)
 8000806:	f443 4302 	orr.w	r3, r3, #33280	@ 0x8200
 800080a:	6713      	str	r3, [r2, #112]	@ 0x70

	// enable RTC write
	RTC->WPR = 0xCA;
 800080c:	4b8e      	ldr	r3, [pc, #568]	@ (8000a48 <init_rtc_datetime+0x28c>)
 800080e:	22ca      	movs	r2, #202	@ 0xca
 8000810:	625a      	str	r2, [r3, #36]	@ 0x24
	RTC->WPR = 0x53;
 8000812:	4b8d      	ldr	r3, [pc, #564]	@ (8000a48 <init_rtc_datetime+0x28c>)
 8000814:	2253      	movs	r2, #83	@ 0x53
 8000816:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable init mode
	RTC->ISR |= (1<<ISR_IN_BIT);
 8000818:	4b8b      	ldr	r3, [pc, #556]	@ (8000a48 <init_rtc_datetime+0x28c>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	4a8a      	ldr	r2, [pc, #552]	@ (8000a48 <init_rtc_datetime+0x28c>)
 800081e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000822:	60d3      	str	r3, [r2, #12]
	while(!( RTC->ISR & (1<<ISR_INITF_BIT) )){};
 8000824:	bf00      	nop
 8000826:	4b88      	ldr	r3, [pc, #544]	@ (8000a48 <init_rtc_datetime+0x28c>)
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800082e:	2b00      	cmp	r3, #0
 8000830:	d0f9      	beq.n	8000826 <init_rtc_datetime+0x6a>


	// program first the asynchronous prescaler factor in RTC_PRER register
	RTC->PRER &= ~(RTC_PRER_ASYNC_MASK<<RTC_PRER_ASYNC_LSB);
 8000832:	4b85      	ldr	r3, [pc, #532]	@ (8000a48 <init_rtc_datetime+0x28c>)
 8000834:	691b      	ldr	r3, [r3, #16]
 8000836:	4a84      	ldr	r2, [pc, #528]	@ (8000a48 <init_rtc_datetime+0x28c>)
 8000838:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 800083c:	6113      	str	r3, [r2, #16]
	RTC->PRER |= asynch_factor<<RTC_PRER_ASYNC_LSB;
 800083e:	4b82      	ldr	r3, [pc, #520]	@ (8000a48 <init_rtc_datetime+0x28c>)
 8000840:	691a      	ldr	r2, [r3, #16]
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	041b      	lsls	r3, r3, #16
 8000846:	4980      	ldr	r1, [pc, #512]	@ (8000a48 <init_rtc_datetime+0x28c>)
 8000848:	4313      	orrs	r3, r2
 800084a:	610b      	str	r3, [r1, #16]

	//  program the synchronous prescaler factor
	RTC->PRER &= ~RTC_PRER_SYNC_MASK;
 800084c:	4b7e      	ldr	r3, [pc, #504]	@ (8000a48 <init_rtc_datetime+0x28c>)
 800084e:	691b      	ldr	r3, [r3, #16]
 8000850:	4a7d      	ldr	r2, [pc, #500]	@ (8000a48 <init_rtc_datetime+0x28c>)
 8000852:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000856:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800085a:	6113      	str	r3, [r2, #16]
	RTC->PRER |= synch_factor;
 800085c:	4b7a      	ldr	r3, [pc, #488]	@ (8000a48 <init_rtc_datetime+0x28c>)
 800085e:	691a      	ldr	r2, [r3, #16]
 8000860:	7bbb      	ldrb	r3, [r7, #14]
 8000862:	4979      	ldr	r1, [pc, #484]	@ (8000a48 <init_rtc_datetime+0x28c>)
 8000864:	4313      	orrs	r3, r2
 8000866:	610b      	str	r3, [r1, #16]

	// default time
	uint8_t hour = (((time.Hours / 10) & 0x3) << 4) | ((time.Hours % 10) & 0xF);
 8000868:	783b      	ldrb	r3, [r7, #0]
 800086a:	4a78      	ldr	r2, [pc, #480]	@ (8000a4c <init_rtc_datetime+0x290>)
 800086c:	fba2 2303 	umull	r2, r3, r2, r3
 8000870:	08db      	lsrs	r3, r3, #3
 8000872:	b2db      	uxtb	r3, r3
 8000874:	011b      	lsls	r3, r3, #4
 8000876:	b25b      	sxtb	r3, r3
 8000878:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800087c:	b258      	sxtb	r0, r3
 800087e:	783a      	ldrb	r2, [r7, #0]
 8000880:	4b72      	ldr	r3, [pc, #456]	@ (8000a4c <init_rtc_datetime+0x290>)
 8000882:	fba3 1302 	umull	r1, r3, r3, r2
 8000886:	08d9      	lsrs	r1, r3, #3
 8000888:	460b      	mov	r3, r1
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	440b      	add	r3, r1
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	b2db      	uxtb	r3, r3
 8000894:	b25b      	sxtb	r3, r3
 8000896:	f003 030f 	and.w	r3, r3, #15
 800089a:	b25b      	sxtb	r3, r3
 800089c:	4303      	orrs	r3, r0
 800089e:	b25b      	sxtb	r3, r3
 80008a0:	737b      	strb	r3, [r7, #13]
	uint8_t minutes = (((time.Minutes / 10) & 0x7) << 4) | ((time.Minutes % 10) & 0xF);
 80008a2:	787b      	ldrb	r3, [r7, #1]
 80008a4:	4a69      	ldr	r2, [pc, #420]	@ (8000a4c <init_rtc_datetime+0x290>)
 80008a6:	fba2 2303 	umull	r2, r3, r2, r3
 80008aa:	08db      	lsrs	r3, r3, #3
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	011b      	lsls	r3, r3, #4
 80008b0:	b25b      	sxtb	r3, r3
 80008b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80008b6:	b258      	sxtb	r0, r3
 80008b8:	787a      	ldrb	r2, [r7, #1]
 80008ba:	4b64      	ldr	r3, [pc, #400]	@ (8000a4c <init_rtc_datetime+0x290>)
 80008bc:	fba3 1302 	umull	r1, r3, r3, r2
 80008c0:	08d9      	lsrs	r1, r3, #3
 80008c2:	460b      	mov	r3, r1
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	440b      	add	r3, r1
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	b25b      	sxtb	r3, r3
 80008d0:	f003 030f 	and.w	r3, r3, #15
 80008d4:	b25b      	sxtb	r3, r3
 80008d6:	4303      	orrs	r3, r0
 80008d8:	b25b      	sxtb	r3, r3
 80008da:	733b      	strb	r3, [r7, #12]
	uint8_t seconds = (((time.Seconds / 10) & 0x7) << 4) | ((time.Seconds % 10) & 0xF);
 80008dc:	78bb      	ldrb	r3, [r7, #2]
 80008de:	4a5b      	ldr	r2, [pc, #364]	@ (8000a4c <init_rtc_datetime+0x290>)
 80008e0:	fba2 2303 	umull	r2, r3, r2, r3
 80008e4:	08db      	lsrs	r3, r3, #3
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	011b      	lsls	r3, r3, #4
 80008ea:	b25b      	sxtb	r3, r3
 80008ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80008f0:	b258      	sxtb	r0, r3
 80008f2:	78ba      	ldrb	r2, [r7, #2]
 80008f4:	4b55      	ldr	r3, [pc, #340]	@ (8000a4c <init_rtc_datetime+0x290>)
 80008f6:	fba3 1302 	umull	r1, r3, r3, r2
 80008fa:	08d9      	lsrs	r1, r3, #3
 80008fc:	460b      	mov	r3, r1
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	440b      	add	r3, r1
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	b2db      	uxtb	r3, r3
 8000908:	b25b      	sxtb	r3, r3
 800090a:	f003 030f 	and.w	r3, r3, #15
 800090e:	b25b      	sxtb	r3, r3
 8000910:	4303      	orrs	r3, r0
 8000912:	b25b      	sxtb	r3, r3
 8000914:	72fb      	strb	r3, [r7, #11]

	RTC->TR &= 0xFF808080;
 8000916:	4b4c      	ldr	r3, [pc, #304]	@ (8000a48 <init_rtc_datetime+0x28c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a4b      	ldr	r2, [pc, #300]	@ (8000a48 <init_rtc_datetime+0x28c>)
 800091c:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
 8000920:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8000924:	6013      	str	r3, [r2, #0]
	RTC->TR |=(hour<<16) | (minutes<<8) | seconds;
 8000926:	4b48      	ldr	r3, [pc, #288]	@ (8000a48 <init_rtc_datetime+0x28c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	7b7a      	ldrb	r2, [r7, #13]
 800092c:	0411      	lsls	r1, r2, #16
 800092e:	7b3a      	ldrb	r2, [r7, #12]
 8000930:	0212      	lsls	r2, r2, #8
 8000932:	4311      	orrs	r1, r2
 8000934:	7afa      	ldrb	r2, [r7, #11]
 8000936:	430a      	orrs	r2, r1
 8000938:	4611      	mov	r1, r2
 800093a:	4a43      	ldr	r2, [pc, #268]	@ (8000a48 <init_rtc_datetime+0x28c>)
 800093c:	430b      	orrs	r3, r1
 800093e:	6013      	str	r3, [r2, #0]

	// default date
	uint8_t year = (((date.Year / 10) & 0xF) << 4) | ((date.Year % 10) & 0xF);
 8000940:	793b      	ldrb	r3, [r7, #4]
 8000942:	4a42      	ldr	r2, [pc, #264]	@ (8000a4c <init_rtc_datetime+0x290>)
 8000944:	fba2 2303 	umull	r2, r3, r2, r3
 8000948:	08db      	lsrs	r3, r3, #3
 800094a:	b2db      	uxtb	r3, r3
 800094c:	011b      	lsls	r3, r3, #4
 800094e:	b258      	sxtb	r0, r3
 8000950:	793a      	ldrb	r2, [r7, #4]
 8000952:	4b3e      	ldr	r3, [pc, #248]	@ (8000a4c <init_rtc_datetime+0x290>)
 8000954:	fba3 1302 	umull	r1, r3, r3, r2
 8000958:	08d9      	lsrs	r1, r3, #3
 800095a:	460b      	mov	r3, r1
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	440b      	add	r3, r1
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	b2db      	uxtb	r3, r3
 8000966:	b25b      	sxtb	r3, r3
 8000968:	f003 030f 	and.w	r3, r3, #15
 800096c:	b25b      	sxtb	r3, r3
 800096e:	4303      	orrs	r3, r0
 8000970:	b25b      	sxtb	r3, r3
 8000972:	72bb      	strb	r3, [r7, #10]
	uint8_t month = (((date.Month / 10) & 0x1) << 4) | ((date.Month % 10) & 0xF);
 8000974:	797b      	ldrb	r3, [r7, #5]
 8000976:	4a35      	ldr	r2, [pc, #212]	@ (8000a4c <init_rtc_datetime+0x290>)
 8000978:	fba2 2303 	umull	r2, r3, r2, r3
 800097c:	08db      	lsrs	r3, r3, #3
 800097e:	b2db      	uxtb	r3, r3
 8000980:	011b      	lsls	r3, r3, #4
 8000982:	b25b      	sxtb	r3, r3
 8000984:	f003 0310 	and.w	r3, r3, #16
 8000988:	b258      	sxtb	r0, r3
 800098a:	797a      	ldrb	r2, [r7, #5]
 800098c:	4b2f      	ldr	r3, [pc, #188]	@ (8000a4c <init_rtc_datetime+0x290>)
 800098e:	fba3 1302 	umull	r1, r3, r3, r2
 8000992:	08d9      	lsrs	r1, r3, #3
 8000994:	460b      	mov	r3, r1
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	440b      	add	r3, r1
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	b25b      	sxtb	r3, r3
 80009a2:	f003 030f 	and.w	r3, r3, #15
 80009a6:	b25b      	sxtb	r3, r3
 80009a8:	4303      	orrs	r3, r0
 80009aa:	b25b      	sxtb	r3, r3
 80009ac:	727b      	strb	r3, [r7, #9]
	uint8_t day = (((date.Date / 10) & 0x3) << 4) | ((date.Date % 10) & 0xF);
 80009ae:	79bb      	ldrb	r3, [r7, #6]
 80009b0:	4a26      	ldr	r2, [pc, #152]	@ (8000a4c <init_rtc_datetime+0x290>)
 80009b2:	fba2 2303 	umull	r2, r3, r2, r3
 80009b6:	08db      	lsrs	r3, r3, #3
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	011b      	lsls	r3, r3, #4
 80009bc:	b25b      	sxtb	r3, r3
 80009be:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80009c2:	b258      	sxtb	r0, r3
 80009c4:	79ba      	ldrb	r2, [r7, #6]
 80009c6:	4b21      	ldr	r3, [pc, #132]	@ (8000a4c <init_rtc_datetime+0x290>)
 80009c8:	fba3 1302 	umull	r1, r3, r3, r2
 80009cc:	08d9      	lsrs	r1, r3, #3
 80009ce:	460b      	mov	r3, r1
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	440b      	add	r3, r1
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	b25b      	sxtb	r3, r3
 80009dc:	f003 030f 	and.w	r3, r3, #15
 80009e0:	b25b      	sxtb	r3, r3
 80009e2:	4303      	orrs	r3, r0
 80009e4:	b25b      	sxtb	r3, r3
 80009e6:	723b      	strb	r3, [r7, #8]

	RTC->DR &= 0xFF0020C0;
 80009e8:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <init_rtc_datetime+0x28c>)
 80009ea:	685a      	ldr	r2, [r3, #4]
 80009ec:	4916      	ldr	r1, [pc, #88]	@ (8000a48 <init_rtc_datetime+0x28c>)
 80009ee:	4b18      	ldr	r3, [pc, #96]	@ (8000a50 <init_rtc_datetime+0x294>)
 80009f0:	4013      	ands	r3, r2
 80009f2:	604b      	str	r3, [r1, #4]
	RTC->DR |= (year<<16) | (month<<8) | (day);
 80009f4:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <init_rtc_datetime+0x28c>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	7aba      	ldrb	r2, [r7, #10]
 80009fa:	0411      	lsls	r1, r2, #16
 80009fc:	7a7a      	ldrb	r2, [r7, #9]
 80009fe:	0212      	lsls	r2, r2, #8
 8000a00:	4311      	orrs	r1, r2
 8000a02:	7a3a      	ldrb	r2, [r7, #8]
 8000a04:	430a      	orrs	r2, r1
 8000a06:	4611      	mov	r1, r2
 8000a08:	4a0f      	ldr	r2, [pc, #60]	@ (8000a48 <init_rtc_datetime+0x28c>)
 8000a0a:	430b      	orrs	r3, r1
 8000a0c:	6053      	str	r3, [r2, #4]

	// disable init mode
	RTC->CR |= RTC_CR_BYPSHAD;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <init_rtc_datetime+0x28c>)
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	4a0d      	ldr	r2, [pc, #52]	@ (8000a48 <init_rtc_datetime+0x28c>)
 8000a14:	f043 0320 	orr.w	r3, r3, #32
 8000a18:	6093      	str	r3, [r2, #8]
	RTC->ISR &= ~RTC_ISR_INIT;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a48 <init_rtc_datetime+0x28c>)
 8000a1c:	68db      	ldr	r3, [r3, #12]
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a48 <init_rtc_datetime+0x28c>)
 8000a20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000a24:	60d3      	str	r3, [r2, #12]
	PWR->CR &= ~PWR_CR_DBP;
 8000a26:	4b07      	ldr	r3, [pc, #28]	@ (8000a44 <init_rtc_datetime+0x288>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a06      	ldr	r2, [pc, #24]	@ (8000a44 <init_rtc_datetime+0x288>)
 8000a2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000a30:	6013      	str	r3, [r2, #0]

}
 8000a32:	bf00      	nop
 8000a34:	3714      	adds	r7, #20
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40007000 	.word	0x40007000
 8000a48:	40002800 	.word	0x40002800
 8000a4c:	cccccccd 	.word	0xcccccccd
 8000a50:	ff0020c0 	.word	0xff0020c0

08000a54 <get_date>:



void get_date(DateTypeDef *date){
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

	date->Year = (((RTC->DR >> 20)&0xF)*10) + ((RTC->DR >> 16)&0xF);
 8000a5c:	4b24      	ldr	r3, [pc, #144]	@ (8000af0 <get_date+0x9c>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	0d1b      	lsrs	r3, r3, #20
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	f003 030f 	and.w	r3, r3, #15
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	0092      	lsls	r2, r2, #2
 8000a6e:	4413      	add	r3, r2
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	4b1e      	ldr	r3, [pc, #120]	@ (8000af0 <get_date+0x9c>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	0c1b      	lsrs	r3, r3, #16
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	f003 030f 	and.w	r3, r3, #15
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	4413      	add	r3, r2
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	701a      	strb	r2, [r3, #0]
	date->Month = (10*((RTC->DR >> 12)&1)) + ((RTC->DR >> 8)&0xF);
 8000a8a:	4b19      	ldr	r3, [pc, #100]	@ (8000af0 <get_date+0x9c>)
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	0b1b      	lsrs	r3, r3, #12
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	461a      	mov	r2, r3
 8000a9a:	0092      	lsls	r2, r2, #2
 8000a9c:	4413      	add	r3, r2
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4b13      	ldr	r3, [pc, #76]	@ (8000af0 <get_date+0x9c>)
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	0a1b      	lsrs	r3, r3, #8
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	f003 030f 	and.w	r3, r3, #15
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	4413      	add	r3, r2
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	705a      	strb	r2, [r3, #1]
	date->Date = (10*((RTC->DR >> 4)&3)) + (RTC->DR & 0xF);
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <get_date+0x9c>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	091b      	lsrs	r3, r3, #4
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	f003 0303 	and.w	r3, r3, #3
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	0092      	lsls	r2, r2, #2
 8000aca:	4413      	add	r3, r2
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b07      	ldr	r3, [pc, #28]	@ (8000af0 <get_date+0x9c>)
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	f003 030f 	and.w	r3, r3, #15
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	4413      	add	r3, r2
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	709a      	strb	r2, [r3, #2]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	40002800 	.word	0x40002800

08000af4 <get_time>:

void get_time(TimeTypeDef *time){
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	time->Seconds = (RTC->TR & 0xF) + 10*((RTC->TR >> 4)&7);
 8000afc:	4b24      	ldr	r3, [pc, #144]	@ (8000b90 <get_time+0x9c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	4b21      	ldr	r3, [pc, #132]	@ (8000b90 <get_time+0x9c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	091b      	lsrs	r3, r3, #4
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	f003 0307 	and.w	r3, r3, #7
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	4619      	mov	r1, r3
 8000b18:	0089      	lsls	r1, r1, #2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	4413      	add	r3, r2
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	709a      	strb	r2, [r3, #2]
	time->Minutes = ((RTC->TR >> 8)&0xF) + 10*((RTC->TR >> 12)&7);
 8000b28:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <get_time+0x9c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	f003 030f 	and.w	r3, r3, #15
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <get_time+0x9c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	0b1b      	lsrs	r3, r3, #12
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	4619      	mov	r1, r3
 8000b46:	0089      	lsls	r1, r1, #2
 8000b48:	440b      	add	r3, r1
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	4413      	add	r3, r2
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	705a      	strb	r2, [r3, #1]
	time->Hours = ((RTC->TR >> 16)&0xF) + 10*(((RTC->TR >> 20)&3));
 8000b56:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <get_time+0x9c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	0c1b      	lsrs	r3, r3, #16
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <get_time+0x9c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	0d1b      	lsrs	r3, r3, #20
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	f003 0303 	and.w	r3, r3, #3
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	4619      	mov	r1, r3
 8000b74:	0089      	lsls	r1, r1, #2
 8000b76:	440b      	add	r3, r1
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	4413      	add	r3, r2
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	701a      	strb	r2, [r3, #0]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	40002800 	.word	0x40002800

08000b94 <Error_Handler>:
	serial_puts(time_result);
	newLine();
}

void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <Error_Handler+0x8>

08000ba0 <SystemClock_Config>:
  }
  /* USER CODE END Error_Handler_Debug */
}

void SystemClock_Config(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b094      	sub	sp, #80	@ 0x50
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	f107 0320 	add.w	r3, r7, #32
 8000baa:	2230      	movs	r2, #48	@ 0x30
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f001 fa32 	bl	8002018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	4b29      	ldr	r3, [pc, #164]	@ (8000c70 <SystemClock_Config+0xd0>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bcc:	4a28      	ldr	r2, [pc, #160]	@ (8000c70 <SystemClock_Config+0xd0>)
 8000bce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd4:	4b26      	ldr	r3, [pc, #152]	@ (8000c70 <SystemClock_Config+0xd0>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be0:	2300      	movs	r3, #0
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	4b23      	ldr	r3, [pc, #140]	@ (8000c74 <SystemClock_Config+0xd4>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a22      	ldr	r2, [pc, #136]	@ (8000c74 <SystemClock_Config+0xd4>)
 8000bea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	4b20      	ldr	r3, [pc, #128]	@ (8000c74 <SystemClock_Config+0xd4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000bfc:	2309      	movs	r3, #9
 8000bfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c06:	2301      	movs	r3, #1
 8000c08:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c14:	2308      	movs	r3, #8
 8000c16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c18:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c1c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c22:	2307      	movs	r3, #7
 8000c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 fd70 	bl	8001710 <HAL_RCC_OscConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c36:	f7ff ffad 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3a:	230f      	movs	r3, #15
 8000c3c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c46:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	2105      	movs	r1, #5
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 ffd1 	bl	8001c00 <HAL_RCC_ClockConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000c64:	f7ff ff96 	bl	8000b94 <Error_Handler>
  }
}
 8000c68:	bf00      	nop
 8000c6a:	3750      	adds	r7, #80	@ 0x50
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40007000 	.word	0x40007000

08000c78 <MX_GPIO_Init>:


void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	4b20      	ldr	r3, [pc, #128]	@ (8000d14 <MX_GPIO_Init+0x9c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	4a1f      	ldr	r2, [pc, #124]	@ (8000d14 <MX_GPIO_Init+0x9c>)
 8000c98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d14 <MX_GPIO_Init+0x9c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <MX_GPIO_Init+0x9c>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a18      	ldr	r2, [pc, #96]	@ (8000d14 <MX_GPIO_Init+0x9c>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <MX_GPIO_Init+0x9c>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	603b      	str	r3, [r7, #0]
 8000cca:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <MX_GPIO_Init+0x9c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4a11      	ldr	r2, [pc, #68]	@ (8000d14 <MX_GPIO_Init+0x9c>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d14 <MX_GPIO_Init+0x9c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4808      	ldr	r0, [pc, #32]	@ (8000d18 <MX_GPIO_Init+0xa0>)
 8000cf8:	f000 fb32 	bl	8001360 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	2006      	movs	r0, #6
 8000d02:	f000 faf6 	bl	80012f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d06:	2006      	movs	r0, #6
 8000d08:	f000 fb0f 	bl	800132a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d0c:	bf00      	nop
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020000 	.word	0x40020000

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <HAL_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d68 <HAL_MspInit+0x4c>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d32:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b09      	ldr	r3, [pc, #36]	@ (8000d68 <HAL_MspInit+0x4c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d46:	4a08      	ldr	r2, [pc, #32]	@ (8000d68 <HAL_MspInit+0x4c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d4e:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d5a:	2007      	movs	r0, #7
 8000d5c:	f000 fabe 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <NMI_Handler+0x4>

08000d74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <HardFault_Handler+0x4>

08000d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <MemManage_Handler+0x4>

08000d84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <BusFault_Handler+0x4>

08000d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <UsageFault_Handler+0x4>

08000d94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc2:	f000 f977 	bl	80010b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	interupt ++;
 8000dd0:	4b04      	ldr	r3, [pc, #16]	@ (8000de4 <EXTI0_IRQHandler+0x18>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	4a03      	ldr	r2, [pc, #12]	@ (8000de4 <EXTI0_IRQHandler+0x18>)
 8000dd8:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f000 fc74 	bl	80016c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000080 	.word	0x20000080

08000de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df0:	4a14      	ldr	r2, [pc, #80]	@ (8000e44 <_sbrk+0x5c>)
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <_sbrk+0x60>)
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dfc:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e04:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <_sbrk+0x64>)
 8000e06:	4a12      	ldr	r2, [pc, #72]	@ (8000e50 <_sbrk+0x68>)
 8000e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0a:	4b10      	ldr	r3, [pc, #64]	@ (8000e4c <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d207      	bcs.n	8000e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e18:	f001 f906 	bl	8002028 <__errno>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	220c      	movs	r2, #12
 8000e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
 8000e26:	e009      	b.n	8000e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e28:	4b08      	ldr	r3, [pc, #32]	@ (8000e4c <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e2e:	4b07      	ldr	r3, [pc, #28]	@ (8000e4c <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	4a05      	ldr	r2, [pc, #20]	@ (8000e4c <_sbrk+0x64>)
 8000e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20020000 	.word	0x20020000
 8000e48:	00000400 	.word	0x00000400
 8000e4c:	20000084 	.word	0x20000084
 8000e50:	200001d8 	.word	0x200001d8

08000e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <SystemInit+0x20>)
 8000e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e5e:	4a05      	ldr	r2, [pc, #20]	@ (8000e74 <SystemInit+0x20>)
 8000e60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <init_usart>:
#include "stm32f4xx_hal.h"
#include "usart2.h"


// USART2 Initialization
void init_usart(void){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0

	//Initialize PA2 as USART2_TX and PA3 as USART2_RX
	//Activate A port
	SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIOAEN);
 8000e7c:	4b29      	ldr	r3, [pc, #164]	@ (8000f24 <init_usart+0xac>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e80:	4a28      	ldr	r2, [pc, #160]	@ (8000f24 <init_usart+0xac>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6313      	str	r3, [r2, #48]	@ 0x30
    /* Setup PA2 and PA3 as Alternate Function */
	//MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER2, 0b01);
	//MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER3, 0b01);
	GPIOA->MODER |= 0x000000A0;
 8000e88:	4b27      	ldr	r3, [pc, #156]	@ (8000f28 <init_usart+0xb0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a26      	ldr	r2, [pc, #152]	@ (8000f28 <init_usart+0xb0>)
 8000e8e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000e92:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= 0xFFFFFFAF;
 8000e94:	4b24      	ldr	r3, [pc, #144]	@ (8000f28 <init_usart+0xb0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a23      	ldr	r2, [pc, #140]	@ (8000f28 <init_usart+0xb0>)
 8000e9a:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8000e9e:	6013      	str	r3, [r2, #0]
	/* Setup Alternate function as USART2 */
	GPIOA->AFR[0] &= 0xFFFF77FF;
 8000ea0:	4b21      	ldr	r3, [pc, #132]	@ (8000f28 <init_usart+0xb0>)
 8000ea2:	6a1b      	ldr	r3, [r3, #32]
 8000ea4:	4a20      	ldr	r2, [pc, #128]	@ (8000f28 <init_usart+0xb0>)
 8000ea6:	f423 4308 	bic.w	r3, r3, #34816	@ 0x8800
 8000eaa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 0x00007700;
 8000eac:	4b1e      	ldr	r3, [pc, #120]	@ (8000f28 <init_usart+0xb0>)
 8000eae:	6a1b      	ldr	r3, [r3, #32]
 8000eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f28 <init_usart+0xb0>)
 8000eb2:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000eb6:	6213      	str	r3, [r2, #32]
	/* Push pull output */
	GPIOA->OTYPER &= 0xFFFFFFF3;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f28 <init_usart+0xb0>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	4a1a      	ldr	r2, [pc, #104]	@ (8000f28 <init_usart+0xb0>)
 8000ebe:	f023 030c 	bic.w	r3, r3, #12
 8000ec2:	6053      	str	r3, [r2, #4]
	/* Pull up resistor on */
	GPIOA->PUPDR &= 0xFFFFFF5F;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	@ (8000f28 <init_usart+0xb0>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	4a17      	ldr	r2, [pc, #92]	@ (8000f28 <init_usart+0xb0>)
 8000eca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8000ece:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 0x00000050;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <init_usart+0xb0>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	4a14      	ldr	r2, [pc, #80]	@ (8000f28 <init_usart+0xb0>)
 8000ed6:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000eda:	60d3      	str	r3, [r2, #12]
	/* Output speed set to VeryHigh */
	GPIOA->OSPEEDR |= 0x000000F0;
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <init_usart+0xb0>)
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	4a11      	ldr	r2, [pc, #68]	@ (8000f28 <init_usart+0xb0>)
 8000ee2:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8000ee6:	6093      	str	r3, [r2, #8]


	//Activate USART2 Clock
	SET_BIT(RCC->APB1ENR,RCC_APB1ENR_USART2EN);
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <init_usart+0xac>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eec:	4a0d      	ldr	r2, [pc, #52]	@ (8000f24 <init_usart+0xac>)
 8000eee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef2:	6413      	str	r3, [r2, #64]	@ 0x40
	//Enable USART, no TE no RE yet, Oversampling = 8, 8bit mode, no parity
	//Enable Tx and Rx
	USART2->CR1 = 0x0000800C;
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <init_usart+0xb4>)
 8000ef6:	f248 020c 	movw	r2, #32780	@ 0x800c
 8000efa:	60da      	str	r2, [r3, #12]
	// No LIN mode, No clock output (synchronous mode)
	USART2->CR2 = 0x00000000;
 8000efc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <init_usart+0xb4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
	// No control mode, 3 sample point,
	USART2->CR3 = 0x00000000;
 8000f02:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <init_usart+0xb4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	615a      	str	r2, [r3, #20]
	// 19200bauds -> USARTDIV = 273.4375 -> Mantissa = 273d=0x111 , Fraction = 0.4375*16 = 7d = 0x7
	USART2->BRR = 0x00001117;
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <init_usart+0xb4>)
 8000f0a:	f241 1217 	movw	r2, #4375	@ 0x1117
 8000f0e:	609a      	str	r2, [r3, #8]
	//Enable UART
	USART2->CR1 = 0x0000A00C;
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <init_usart+0xb4>)
 8000f12:	f24a 020c 	movw	r2, #40972	@ 0xa00c
 8000f16:	60da      	str	r2, [r3, #12]
	//SET_BIT(USART2->CR1, USART_CR1_UE );

	HAL_Delay(1);
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f000 f8eb 	bl	80010f4 <HAL_Delay>
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020000 	.word	0x40020000
 8000f2c:	40004400 	.word	0x40004400

08000f30 <serial_putc>:
	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
	NVIC_EnableIRQ(USART2_IRQn);
}

void serial_putc(char c)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	//Load data to register
	USART2->DR = c;
 8000f3a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f6c <serial_putc+0x3c>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	6053      	str	r3, [r2, #4]
	while(!(USART2->SR & 0x00000080));
 8000f40:	bf00      	nop
 8000f42:	4b0a      	ldr	r3, [pc, #40]	@ (8000f6c <serial_putc+0x3c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0f9      	beq.n	8000f42 <serial_putc+0x12>
	while(!(USART2->SR & 0x00000040));
 8000f4e:	bf00      	nop
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <serial_putc+0x3c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0f9      	beq.n	8000f50 <serial_putc+0x20>
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40004400 	.word	0x40004400

08000f70 <serial_puts>:

void serial_puts( char *msg)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	int cnt = 0;;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 8000f7c:	e009      	b.n	8000f92 <serial_puts+0x22>
		serial_putc(msg[cnt]);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	4413      	add	r3, r2
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ffd2 	bl	8000f30 <serial_putc>
		cnt++;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	4413      	add	r3, r2
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1ef      	bne.n	8000f7e <serial_puts+0xe>
	}
}
 8000f9e:	bf00      	nop
 8000fa0:	bf00      	nop
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <newLine>:

void newLine()
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	serial_putc(10); // nouvelle ligne
 8000fac:	200a      	movs	r0, #10
 8000fae:	f7ff ffbf 	bl	8000f30 <serial_putc>
	serial_putc(13); // retour chariot
 8000fb2:	200d      	movs	r0, #13
 8000fb4:	f7ff ffbc 	bl	8000f30 <serial_putc>
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ff4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fc0:	f7ff ff48 	bl	8000e54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc4:	480c      	ldr	r0, [pc, #48]	@ (8000ff8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fc6:	490d      	ldr	r1, [pc, #52]	@ (8000ffc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001000 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	@ (8001008 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fea:	f001 f823 	bl	8002034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fee:	f7ff fab7 	bl	8000560 <main>
  bx  lr    
 8000ff2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ff4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001000:	080029a4 	.word	0x080029a4
  ldr r2, =_sbss
 8001004:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001008:	200001d4 	.word	0x200001d4

0800100c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC_IRQHandler>
	...

08001010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001014:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0d      	ldr	r2, [pc, #52]	@ (8001050 <HAL_Init+0x40>)
 800101a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800101e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001020:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <HAL_Init+0x40>)
 8001026:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800102a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800102c:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a07      	ldr	r2, [pc, #28]	@ (8001050 <HAL_Init+0x40>)
 8001032:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001036:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001038:	2003      	movs	r0, #3
 800103a:	f000 f94f 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103e:	2000      	movs	r0, #0
 8001040:	f000 f808 	bl	8001054 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001044:	f7ff fe6a 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023c00 	.word	0x40023c00

08001054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800105c:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <HAL_InitTick+0x54>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <HAL_InitTick+0x58>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800106a:	fbb3 f3f1 	udiv	r3, r3, r1
 800106e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f967 	bl	8001346 <HAL_SYSTICK_Config>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e00e      	b.n	80010a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b0f      	cmp	r3, #15
 8001086:	d80a      	bhi.n	800109e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001088:	2200      	movs	r2, #0
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	f04f 30ff 	mov.w	r0, #4294967295
 8001090:	f000 f92f 	bl	80012f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001094:	4a06      	ldr	r2, [pc, #24]	@ (80010b0 <HAL_InitTick+0x5c>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	e000      	b.n	80010a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000004 	.word	0x20000004
 80010ac:	2000000c 	.word	0x2000000c
 80010b0:	20000008 	.word	0x20000008

080010b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <HAL_IncTick+0x20>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <HAL_IncTick+0x24>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a04      	ldr	r2, [pc, #16]	@ (80010d8 <HAL_IncTick+0x24>)
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	2000000c 	.word	0x2000000c
 80010d8:	20000088 	.word	0x20000088

080010dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b03      	ldr	r3, [pc, #12]	@ (80010f0 <HAL_GetTick+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000088 	.word	0x20000088

080010f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff ffee 	bl	80010dc <HAL_GetTick>
 8001100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800110c:	d005      	beq.n	800111a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110e:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <HAL_Delay+0x44>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4413      	add	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800111a:	bf00      	nop
 800111c:	f7ff ffde 	bl	80010dc <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	429a      	cmp	r2, r3
 800112a:	d8f7      	bhi.n	800111c <HAL_Delay+0x28>
  {
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000000c 	.word	0x2000000c

0800113c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800114c:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001158:	4013      	ands	r3, r2
 800115a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001164:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001168:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800116c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116e:	4a04      	ldr	r2, [pc, #16]	@ (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	60d3      	str	r3, [r2, #12]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001188:	4b04      	ldr	r3, [pc, #16]	@ (800119c <__NVIC_GetPriorityGrouping+0x18>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	f003 0307 	and.w	r3, r3, #7
}
 8001192:	4618      	mov	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db0b      	blt.n	80011ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	f003 021f 	and.w	r2, r3, #31
 80011b8:	4907      	ldr	r1, [pc, #28]	@ (80011d8 <__NVIC_EnableIRQ+0x38>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	095b      	lsrs	r3, r3, #5
 80011c0:	2001      	movs	r0, #1
 80011c2:	fa00 f202 	lsl.w	r2, r0, r2
 80011c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000e100 	.word	0xe000e100

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	@ (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	@ (800122c <__NVIC_SetPriority+0x50>)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	@ 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	@ 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012a8:	d301      	bcc.n	80012ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00f      	b.n	80012ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ae:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <SysTick_Config+0x40>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b6:	210f      	movs	r1, #15
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	f7ff ff8e 	bl	80011dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	@ (80012d8 <SysTick_Config+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <SysTick_Config+0x40>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff29 	bl	800113c <__NVIC_SetPriorityGrouping>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001304:	f7ff ff3e 	bl	8001184 <__NVIC_GetPriorityGrouping>
 8001308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	6978      	ldr	r0, [r7, #20]
 8001310:	f7ff ff8e 	bl	8001230 <NVIC_EncodePriority>
 8001314:	4602      	mov	r2, r0
 8001316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff5d 	bl	80011dc <__NVIC_SetPriority>
}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff31 	bl	80011a0 <__NVIC_EnableIRQ>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff ffa2 	bl	8001298 <SysTick_Config>
 8001354:	4603      	mov	r3, r0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001360:	b480      	push	{r7}
 8001362:	b089      	sub	sp, #36	@ 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
 800137a:	e16b      	b.n	8001654 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800137c:	2201      	movs	r2, #1
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	429a      	cmp	r2, r3
 8001396:	f040 815a 	bne.w	800164e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d005      	beq.n	80013b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d130      	bne.n	8001414 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	2203      	movs	r2, #3
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e8:	2201      	movs	r2, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	f003 0201 	and.w	r2, r3, #1
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b03      	cmp	r3, #3
 800141e:	d017      	beq.n	8001450 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	2203      	movs	r2, #3
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d123      	bne.n	80014a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	08da      	lsrs	r2, r3, #3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3208      	adds	r2, #8
 8001464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	220f      	movs	r2, #15
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	691a      	ldr	r2, [r3, #16]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	08da      	lsrs	r2, r3, #3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3208      	adds	r2, #8
 800149e:	69b9      	ldr	r1, [r7, #24]
 80014a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0203 	and.w	r2, r3, #3
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 80b4 	beq.w	800164e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b60      	ldr	r3, [pc, #384]	@ (800166c <HAL_GPIO_Init+0x30c>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ee:	4a5f      	ldr	r2, [pc, #380]	@ (800166c <HAL_GPIO_Init+0x30c>)
 80014f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014f6:	4b5d      	ldr	r3, [pc, #372]	@ (800166c <HAL_GPIO_Init+0x30c>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001502:	4a5b      	ldr	r2, [pc, #364]	@ (8001670 <HAL_GPIO_Init+0x310>)
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	089b      	lsrs	r3, r3, #2
 8001508:	3302      	adds	r3, #2
 800150a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	220f      	movs	r2, #15
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a52      	ldr	r2, [pc, #328]	@ (8001674 <HAL_GPIO_Init+0x314>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d02b      	beq.n	8001586 <HAL_GPIO_Init+0x226>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a51      	ldr	r2, [pc, #324]	@ (8001678 <HAL_GPIO_Init+0x318>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d025      	beq.n	8001582 <HAL_GPIO_Init+0x222>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a50      	ldr	r2, [pc, #320]	@ (800167c <HAL_GPIO_Init+0x31c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d01f      	beq.n	800157e <HAL_GPIO_Init+0x21e>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4f      	ldr	r2, [pc, #316]	@ (8001680 <HAL_GPIO_Init+0x320>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d019      	beq.n	800157a <HAL_GPIO_Init+0x21a>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4e      	ldr	r2, [pc, #312]	@ (8001684 <HAL_GPIO_Init+0x324>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d013      	beq.n	8001576 <HAL_GPIO_Init+0x216>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4d      	ldr	r2, [pc, #308]	@ (8001688 <HAL_GPIO_Init+0x328>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d00d      	beq.n	8001572 <HAL_GPIO_Init+0x212>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4c      	ldr	r2, [pc, #304]	@ (800168c <HAL_GPIO_Init+0x32c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d007      	beq.n	800156e <HAL_GPIO_Init+0x20e>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4b      	ldr	r2, [pc, #300]	@ (8001690 <HAL_GPIO_Init+0x330>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d101      	bne.n	800156a <HAL_GPIO_Init+0x20a>
 8001566:	2307      	movs	r3, #7
 8001568:	e00e      	b.n	8001588 <HAL_GPIO_Init+0x228>
 800156a:	2308      	movs	r3, #8
 800156c:	e00c      	b.n	8001588 <HAL_GPIO_Init+0x228>
 800156e:	2306      	movs	r3, #6
 8001570:	e00a      	b.n	8001588 <HAL_GPIO_Init+0x228>
 8001572:	2305      	movs	r3, #5
 8001574:	e008      	b.n	8001588 <HAL_GPIO_Init+0x228>
 8001576:	2304      	movs	r3, #4
 8001578:	e006      	b.n	8001588 <HAL_GPIO_Init+0x228>
 800157a:	2303      	movs	r3, #3
 800157c:	e004      	b.n	8001588 <HAL_GPIO_Init+0x228>
 800157e:	2302      	movs	r3, #2
 8001580:	e002      	b.n	8001588 <HAL_GPIO_Init+0x228>
 8001582:	2301      	movs	r3, #1
 8001584:	e000      	b.n	8001588 <HAL_GPIO_Init+0x228>
 8001586:	2300      	movs	r3, #0
 8001588:	69fa      	ldr	r2, [r7, #28]
 800158a:	f002 0203 	and.w	r2, r2, #3
 800158e:	0092      	lsls	r2, r2, #2
 8001590:	4093      	lsls	r3, r2
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001598:	4935      	ldr	r1, [pc, #212]	@ (8001670 <HAL_GPIO_Init+0x310>)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	089b      	lsrs	r3, r3, #2
 800159e:	3302      	adds	r3, #2
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001694 <HAL_GPIO_Init+0x334>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ca:	4a32      	ldr	r2, [pc, #200]	@ (8001694 <HAL_GPIO_Init+0x334>)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015d0:	4b30      	ldr	r3, [pc, #192]	@ (8001694 <HAL_GPIO_Init+0x334>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015f4:	4a27      	ldr	r2, [pc, #156]	@ (8001694 <HAL_GPIO_Init+0x334>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015fa:	4b26      	ldr	r3, [pc, #152]	@ (8001694 <HAL_GPIO_Init+0x334>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800161e:	4a1d      	ldr	r2, [pc, #116]	@ (8001694 <HAL_GPIO_Init+0x334>)
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001624:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <HAL_GPIO_Init+0x334>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001648:	4a12      	ldr	r2, [pc, #72]	@ (8001694 <HAL_GPIO_Init+0x334>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3301      	adds	r3, #1
 8001652:	61fb      	str	r3, [r7, #28]
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	2b0f      	cmp	r3, #15
 8001658:	f67f ae90 	bls.w	800137c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	3724      	adds	r7, #36	@ 0x24
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	40013800 	.word	0x40013800
 8001674:	40020000 	.word	0x40020000
 8001678:	40020400 	.word	0x40020400
 800167c:	40020800 	.word	0x40020800
 8001680:	40020c00 	.word	0x40020c00
 8001684:	40021000 	.word	0x40021000
 8001688:	40021400 	.word	0x40021400
 800168c:	40021800 	.word	0x40021800
 8001690:	40021c00 	.word	0x40021c00
 8001694:	40013c00 	.word	0x40013c00

08001698 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691a      	ldr	r2, [r3, #16]
 80016a8:	887b      	ldrh	r3, [r7, #2]
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d002      	beq.n	80016b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016b0:	2301      	movs	r3, #1
 80016b2:	73fb      	strb	r3, [r7, #15]
 80016b4:	e001      	b.n	80016ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016b6:	2300      	movs	r3, #0
 80016b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80016d2:	4b08      	ldr	r3, [pc, #32]	@ (80016f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016d4:	695a      	ldr	r2, [r3, #20]
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	4013      	ands	r3, r2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d006      	beq.n	80016ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016de:	4a05      	ldr	r2, [pc, #20]	@ (80016f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016e0:	88fb      	ldrh	r3, [r7, #6]
 80016e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 f806 	bl	80016f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40013c00 	.word	0x40013c00

080016f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e267      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d075      	beq.n	800181a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800172e:	4b88      	ldr	r3, [pc, #544]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	2b04      	cmp	r3, #4
 8001738:	d00c      	beq.n	8001754 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800173a:	4b85      	ldr	r3, [pc, #532]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001742:	2b08      	cmp	r3, #8
 8001744:	d112      	bne.n	800176c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001746:	4b82      	ldr	r3, [pc, #520]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800174e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001752:	d10b      	bne.n	800176c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001754:	4b7e      	ldr	r3, [pc, #504]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d05b      	beq.n	8001818 <HAL_RCC_OscConfig+0x108>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d157      	bne.n	8001818 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e242      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001774:	d106      	bne.n	8001784 <HAL_RCC_OscConfig+0x74>
 8001776:	4b76      	ldr	r3, [pc, #472]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a75      	ldr	r2, [pc, #468]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 800177c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	e01d      	b.n	80017c0 <HAL_RCC_OscConfig+0xb0>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800178c:	d10c      	bne.n	80017a8 <HAL_RCC_OscConfig+0x98>
 800178e:	4b70      	ldr	r3, [pc, #448]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a6f      	ldr	r2, [pc, #444]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 8001794:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	4b6d      	ldr	r3, [pc, #436]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a6c      	ldr	r2, [pc, #432]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 80017a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e00b      	b.n	80017c0 <HAL_RCC_OscConfig+0xb0>
 80017a8:	4b69      	ldr	r3, [pc, #420]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a68      	ldr	r2, [pc, #416]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 80017ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b66      	ldr	r3, [pc, #408]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a65      	ldr	r2, [pc, #404]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 80017ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d013      	beq.n	80017f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff fc88 	bl	80010dc <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d0:	f7ff fc84 	bl	80010dc <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	@ 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e207      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0xc0>
 80017ee:	e014      	b.n	800181a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff fc74 	bl	80010dc <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff fc70 	bl	80010dc <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	@ 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e1f3      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180a:	4b51      	ldr	r3, [pc, #324]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0xe8>
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d063      	beq.n	80018ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001826:	4b4a      	ldr	r3, [pc, #296]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00b      	beq.n	800184a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001832:	4b47      	ldr	r3, [pc, #284]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800183a:	2b08      	cmp	r3, #8
 800183c:	d11c      	bne.n	8001878 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800183e:	4b44      	ldr	r3, [pc, #272]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d116      	bne.n	8001878 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184a:	4b41      	ldr	r3, [pc, #260]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <HAL_RCC_OscConfig+0x152>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d001      	beq.n	8001862 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e1c7      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001862:	4b3b      	ldr	r3, [pc, #236]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4937      	ldr	r1, [pc, #220]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001876:	e03a      	b.n	80018ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d020      	beq.n	80018c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001880:	4b34      	ldr	r3, [pc, #208]	@ (8001954 <HAL_RCC_OscConfig+0x244>)
 8001882:	2201      	movs	r2, #1
 8001884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001886:	f7ff fc29 	bl	80010dc <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800188e:	f7ff fc25 	bl	80010dc <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e1a8      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f0      	beq.n	800188e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ac:	4b28      	ldr	r3, [pc, #160]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4925      	ldr	r1, [pc, #148]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]
 80018c0:	e015      	b.n	80018ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018c2:	4b24      	ldr	r3, [pc, #144]	@ (8001954 <HAL_RCC_OscConfig+0x244>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7ff fc08 	bl	80010dc <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018d0:	f7ff fc04 	bl	80010dc <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e187      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d036      	beq.n	8001968 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d016      	beq.n	8001930 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001902:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <HAL_RCC_OscConfig+0x248>)
 8001904:	2201      	movs	r2, #1
 8001906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001908:	f7ff fbe8 	bl	80010dc <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001910:	f7ff fbe4 	bl	80010dc <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e167      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001922:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 8001924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0x200>
 800192e:	e01b      	b.n	8001968 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001930:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <HAL_RCC_OscConfig+0x248>)
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001936:	f7ff fbd1 	bl	80010dc <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800193c:	e00e      	b.n	800195c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800193e:	f7ff fbcd 	bl	80010dc <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d907      	bls.n	800195c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e150      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
 8001950:	40023800 	.word	0x40023800
 8001954:	42470000 	.word	0x42470000
 8001958:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195c:	4b88      	ldr	r3, [pc, #544]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 800195e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1ea      	bne.n	800193e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 8097 	beq.w	8001aa4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001976:	2300      	movs	r3, #0
 8001978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800197a:	4b81      	ldr	r3, [pc, #516]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10f      	bne.n	80019a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	4b7d      	ldr	r3, [pc, #500]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	4a7c      	ldr	r2, [pc, #496]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001994:	6413      	str	r3, [r2, #64]	@ 0x40
 8001996:	4b7a      	ldr	r3, [pc, #488]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a2:	2301      	movs	r3, #1
 80019a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a6:	4b77      	ldr	r3, [pc, #476]	@ (8001b84 <HAL_RCC_OscConfig+0x474>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d118      	bne.n	80019e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b2:	4b74      	ldr	r3, [pc, #464]	@ (8001b84 <HAL_RCC_OscConfig+0x474>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a73      	ldr	r2, [pc, #460]	@ (8001b84 <HAL_RCC_OscConfig+0x474>)
 80019b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019be:	f7ff fb8d 	bl	80010dc <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c6:	f7ff fb89 	bl	80010dc <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e10c      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001b84 <HAL_RCC_OscConfig+0x474>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d106      	bne.n	80019fa <HAL_RCC_OscConfig+0x2ea>
 80019ec:	4b64      	ldr	r3, [pc, #400]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 80019ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019f0:	4a63      	ldr	r2, [pc, #396]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80019f8:	e01c      	b.n	8001a34 <HAL_RCC_OscConfig+0x324>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b05      	cmp	r3, #5
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x30c>
 8001a02:	4b5f      	ldr	r3, [pc, #380]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a06:	4a5e      	ldr	r2, [pc, #376]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001a08:	f043 0304 	orr.w	r3, r3, #4
 8001a0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a0e:	4b5c      	ldr	r3, [pc, #368]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a12:	4a5b      	ldr	r2, [pc, #364]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a1a:	e00b      	b.n	8001a34 <HAL_RCC_OscConfig+0x324>
 8001a1c:	4b58      	ldr	r3, [pc, #352]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a20:	4a57      	ldr	r2, [pc, #348]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001a22:	f023 0301 	bic.w	r3, r3, #1
 8001a26:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a28:	4b55      	ldr	r3, [pc, #340]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a2c:	4a54      	ldr	r2, [pc, #336]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001a2e:	f023 0304 	bic.w	r3, r3, #4
 8001a32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d015      	beq.n	8001a68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3c:	f7ff fb4e 	bl	80010dc <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a42:	e00a      	b.n	8001a5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a44:	f7ff fb4a 	bl	80010dc <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e0cb      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a5a:	4b49      	ldr	r3, [pc, #292]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0ee      	beq.n	8001a44 <HAL_RCC_OscConfig+0x334>
 8001a66:	e014      	b.n	8001a92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a68:	f7ff fb38 	bl	80010dc <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a6e:	e00a      	b.n	8001a86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a70:	f7ff fb34 	bl	80010dc <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e0b5      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a86:	4b3e      	ldr	r3, [pc, #248]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1ee      	bne.n	8001a70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a92:	7dfb      	ldrb	r3, [r7, #23]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d105      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a98:	4b39      	ldr	r3, [pc, #228]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9c:	4a38      	ldr	r2, [pc, #224]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001a9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aa2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 80a1 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aae:	4b34      	ldr	r3, [pc, #208]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d05c      	beq.n	8001b74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d141      	bne.n	8001b46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac2:	4b31      	ldr	r3, [pc, #196]	@ (8001b88 <HAL_RCC_OscConfig+0x478>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fb08 	bl	80010dc <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad0:	f7ff fb04 	bl	80010dc <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e087      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae2:	4b27      	ldr	r3, [pc, #156]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69da      	ldr	r2, [r3, #28]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afc:	019b      	lsls	r3, r3, #6
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b04:	085b      	lsrs	r3, r3, #1
 8001b06:	3b01      	subs	r3, #1
 8001b08:	041b      	lsls	r3, r3, #16
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b10:	061b      	lsls	r3, r3, #24
 8001b12:	491b      	ldr	r1, [pc, #108]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b18:	4b1b      	ldr	r3, [pc, #108]	@ (8001b88 <HAL_RCC_OscConfig+0x478>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1e:	f7ff fadd 	bl	80010dc <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b26:	f7ff fad9 	bl	80010dc <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e05c      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b38:	4b11      	ldr	r3, [pc, #68]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0x416>
 8001b44:	e054      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b46:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <HAL_RCC_OscConfig+0x478>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fac6 	bl	80010dc <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b54:	f7ff fac2 	bl	80010dc <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e045      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b66:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x444>
 8001b72:	e03d      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d107      	bne.n	8001b8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e038      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40007000 	.word	0x40007000
 8001b88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bfc <HAL_RCC_OscConfig+0x4ec>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d028      	beq.n	8001bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d121      	bne.n	8001bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d11a      	bne.n	8001bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d111      	bne.n	8001bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd2:	085b      	lsrs	r3, r3, #1
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d107      	bne.n	8001bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800

08001c00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0cc      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c14:	4b68      	ldr	r3, [pc, #416]	@ (8001db8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d90c      	bls.n	8001c3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c22:	4b65      	ldr	r3, [pc, #404]	@ (8001db8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2a:	4b63      	ldr	r3, [pc, #396]	@ (8001db8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0b8      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d020      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d005      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c54:	4b59      	ldr	r3, [pc, #356]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	4a58      	ldr	r2, [pc, #352]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c6c:	4b53      	ldr	r3, [pc, #332]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	4a52      	ldr	r2, [pc, #328]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c78:	4b50      	ldr	r3, [pc, #320]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	494d      	ldr	r1, [pc, #308]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d044      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d107      	bne.n	8001cae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	4b47      	ldr	r3, [pc, #284]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d119      	bne.n	8001cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e07f      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d003      	beq.n	8001cbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cbe:	4b3f      	ldr	r3, [pc, #252]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e06f      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cce:	4b3b      	ldr	r3, [pc, #236]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e067      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cde:	4b37      	ldr	r3, [pc, #220]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f023 0203 	bic.w	r2, r3, #3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4934      	ldr	r1, [pc, #208]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cf0:	f7ff f9f4 	bl	80010dc <HAL_GetTick>
 8001cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf8:	f7ff f9f0 	bl	80010dc <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e04f      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 020c 	and.w	r2, r3, #12
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d1eb      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d20:	4b25      	ldr	r3, [pc, #148]	@ (8001db8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d20c      	bcs.n	8001d48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2e:	4b22      	ldr	r3, [pc, #136]	@ (8001db8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b20      	ldr	r3, [pc, #128]	@ (8001db8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e032      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d54:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	4916      	ldr	r1, [pc, #88]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d009      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d72:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	490e      	ldr	r1, [pc, #56]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d86:	f000 f821 	bl	8001dcc <HAL_RCC_GetSysClockFreq>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	490a      	ldr	r1, [pc, #40]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	5ccb      	ldrb	r3, [r1, r3]
 8001d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9e:	4a09      	ldr	r2, [pc, #36]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001da2:	4b09      	ldr	r3, [pc, #36]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff f954 	bl	8001054 <HAL_InitTick>

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40023c00 	.word	0x40023c00
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	08002950 	.word	0x08002950
 8001dc4:	20000004 	.word	0x20000004
 8001dc8:	20000008 	.word	0x20000008

08001dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dd0:	b094      	sub	sp, #80	@ 0x50
 8001dd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001dd8:	2300      	movs	r3, #0
 8001dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ddc:	2300      	movs	r3, #0
 8001dde:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001de4:	4b79      	ldr	r3, [pc, #484]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 030c 	and.w	r3, r3, #12
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d00d      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0x40>
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	f200 80e1 	bhi.w	8001fb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x34>
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d003      	beq.n	8001e06 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dfe:	e0db      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e00:	4b73      	ldr	r3, [pc, #460]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e02:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001e04:	e0db      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e06:	4b73      	ldr	r3, [pc, #460]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e0a:	e0d8      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e0c:	4b6f      	ldr	r3, [pc, #444]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e14:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e16:	4b6d      	ldr	r3, [pc, #436]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d063      	beq.n	8001eea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e22:	4b6a      	ldr	r3, [pc, #424]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	099b      	lsrs	r3, r3, #6
 8001e28:	2200      	movs	r2, #0
 8001e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e34:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e36:	2300      	movs	r3, #0
 8001e38:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e3e:	4622      	mov	r2, r4
 8001e40:	462b      	mov	r3, r5
 8001e42:	f04f 0000 	mov.w	r0, #0
 8001e46:	f04f 0100 	mov.w	r1, #0
 8001e4a:	0159      	lsls	r1, r3, #5
 8001e4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e50:	0150      	lsls	r0, r2, #5
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4621      	mov	r1, r4
 8001e58:	1a51      	subs	r1, r2, r1
 8001e5a:	6139      	str	r1, [r7, #16]
 8001e5c:	4629      	mov	r1, r5
 8001e5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	f04f 0300 	mov.w	r3, #0
 8001e6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e70:	4659      	mov	r1, fp
 8001e72:	018b      	lsls	r3, r1, #6
 8001e74:	4651      	mov	r1, sl
 8001e76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e7a:	4651      	mov	r1, sl
 8001e7c:	018a      	lsls	r2, r1, #6
 8001e7e:	4651      	mov	r1, sl
 8001e80:	ebb2 0801 	subs.w	r8, r2, r1
 8001e84:	4659      	mov	r1, fp
 8001e86:	eb63 0901 	sbc.w	r9, r3, r1
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	f04f 0300 	mov.w	r3, #0
 8001e92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e9e:	4690      	mov	r8, r2
 8001ea0:	4699      	mov	r9, r3
 8001ea2:	4623      	mov	r3, r4
 8001ea4:	eb18 0303 	adds.w	r3, r8, r3
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	462b      	mov	r3, r5
 8001eac:	eb49 0303 	adc.w	r3, r9, r3
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ebe:	4629      	mov	r1, r5
 8001ec0:	024b      	lsls	r3, r1, #9
 8001ec2:	4621      	mov	r1, r4
 8001ec4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ec8:	4621      	mov	r1, r4
 8001eca:	024a      	lsls	r2, r1, #9
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4619      	mov	r1, r3
 8001ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ed6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ed8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001edc:	f7fe f9c8 	bl	8000270 <__aeabi_uldivmod>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ee8:	e058      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eea:	4b38      	ldr	r3, [pc, #224]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	099b      	lsrs	r3, r3, #6
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001efa:	623b      	str	r3, [r7, #32]
 8001efc:	2300      	movs	r3, #0
 8001efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f04:	4642      	mov	r2, r8
 8001f06:	464b      	mov	r3, r9
 8001f08:	f04f 0000 	mov.w	r0, #0
 8001f0c:	f04f 0100 	mov.w	r1, #0
 8001f10:	0159      	lsls	r1, r3, #5
 8001f12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f16:	0150      	lsls	r0, r2, #5
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4641      	mov	r1, r8
 8001f1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f22:	4649      	mov	r1, r9
 8001f24:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f3c:	ebb2 040a 	subs.w	r4, r2, sl
 8001f40:	eb63 050b 	sbc.w	r5, r3, fp
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	00eb      	lsls	r3, r5, #3
 8001f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f52:	00e2      	lsls	r2, r4, #3
 8001f54:	4614      	mov	r4, r2
 8001f56:	461d      	mov	r5, r3
 8001f58:	4643      	mov	r3, r8
 8001f5a:	18e3      	adds	r3, r4, r3
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	464b      	mov	r3, r9
 8001f60:	eb45 0303 	adc.w	r3, r5, r3
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f72:	4629      	mov	r1, r5
 8001f74:	028b      	lsls	r3, r1, #10
 8001f76:	4621      	mov	r1, r4
 8001f78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f7c:	4621      	mov	r1, r4
 8001f7e:	028a      	lsls	r2, r1, #10
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f86:	2200      	movs	r2, #0
 8001f88:	61bb      	str	r3, [r7, #24]
 8001f8a:	61fa      	str	r2, [r7, #28]
 8001f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f90:	f7fe f96e 	bl	8000270 <__aeabi_uldivmod>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4613      	mov	r3, r2
 8001f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	0c1b      	lsrs	r3, r3, #16
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001fac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001fae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fb6:	e002      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fb8:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3750      	adds	r7, #80	@ 0x50
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	00f42400 	.word	0x00f42400
 8001fd4:	007a1200 	.word	0x007a1200

08001fd8 <siprintf>:
 8001fd8:	b40e      	push	{r1, r2, r3}
 8001fda:	b500      	push	{lr}
 8001fdc:	b09c      	sub	sp, #112	@ 0x70
 8001fde:	ab1d      	add	r3, sp, #116	@ 0x74
 8001fe0:	9002      	str	r0, [sp, #8]
 8001fe2:	9006      	str	r0, [sp, #24]
 8001fe4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001fe8:	4809      	ldr	r0, [pc, #36]	@ (8002010 <siprintf+0x38>)
 8001fea:	9107      	str	r1, [sp, #28]
 8001fec:	9104      	str	r1, [sp, #16]
 8001fee:	4909      	ldr	r1, [pc, #36]	@ (8002014 <siprintf+0x3c>)
 8001ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ff4:	9105      	str	r1, [sp, #20]
 8001ff6:	6800      	ldr	r0, [r0, #0]
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	a902      	add	r1, sp, #8
 8001ffc:	f000 f994 	bl	8002328 <_svfiprintf_r>
 8002000:	9b02      	ldr	r3, [sp, #8]
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
 8002006:	b01c      	add	sp, #112	@ 0x70
 8002008:	f85d eb04 	ldr.w	lr, [sp], #4
 800200c:	b003      	add	sp, #12
 800200e:	4770      	bx	lr
 8002010:	20000010 	.word	0x20000010
 8002014:	ffff0208 	.word	0xffff0208

08002018 <memset>:
 8002018:	4402      	add	r2, r0
 800201a:	4603      	mov	r3, r0
 800201c:	4293      	cmp	r3, r2
 800201e:	d100      	bne.n	8002022 <memset+0xa>
 8002020:	4770      	bx	lr
 8002022:	f803 1b01 	strb.w	r1, [r3], #1
 8002026:	e7f9      	b.n	800201c <memset+0x4>

08002028 <__errno>:
 8002028:	4b01      	ldr	r3, [pc, #4]	@ (8002030 <__errno+0x8>)
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000010 	.word	0x20000010

08002034 <__libc_init_array>:
 8002034:	b570      	push	{r4, r5, r6, lr}
 8002036:	4d0d      	ldr	r5, [pc, #52]	@ (800206c <__libc_init_array+0x38>)
 8002038:	4c0d      	ldr	r4, [pc, #52]	@ (8002070 <__libc_init_array+0x3c>)
 800203a:	1b64      	subs	r4, r4, r5
 800203c:	10a4      	asrs	r4, r4, #2
 800203e:	2600      	movs	r6, #0
 8002040:	42a6      	cmp	r6, r4
 8002042:	d109      	bne.n	8002058 <__libc_init_array+0x24>
 8002044:	4d0b      	ldr	r5, [pc, #44]	@ (8002074 <__libc_init_array+0x40>)
 8002046:	4c0c      	ldr	r4, [pc, #48]	@ (8002078 <__libc_init_array+0x44>)
 8002048:	f000 fc66 	bl	8002918 <_init>
 800204c:	1b64      	subs	r4, r4, r5
 800204e:	10a4      	asrs	r4, r4, #2
 8002050:	2600      	movs	r6, #0
 8002052:	42a6      	cmp	r6, r4
 8002054:	d105      	bne.n	8002062 <__libc_init_array+0x2e>
 8002056:	bd70      	pop	{r4, r5, r6, pc}
 8002058:	f855 3b04 	ldr.w	r3, [r5], #4
 800205c:	4798      	blx	r3
 800205e:	3601      	adds	r6, #1
 8002060:	e7ee      	b.n	8002040 <__libc_init_array+0xc>
 8002062:	f855 3b04 	ldr.w	r3, [r5], #4
 8002066:	4798      	blx	r3
 8002068:	3601      	adds	r6, #1
 800206a:	e7f2      	b.n	8002052 <__libc_init_array+0x1e>
 800206c:	0800299c 	.word	0x0800299c
 8002070:	0800299c 	.word	0x0800299c
 8002074:	0800299c 	.word	0x0800299c
 8002078:	080029a0 	.word	0x080029a0

0800207c <__retarget_lock_acquire_recursive>:
 800207c:	4770      	bx	lr

0800207e <__retarget_lock_release_recursive>:
 800207e:	4770      	bx	lr

08002080 <_free_r>:
 8002080:	b538      	push	{r3, r4, r5, lr}
 8002082:	4605      	mov	r5, r0
 8002084:	2900      	cmp	r1, #0
 8002086:	d041      	beq.n	800210c <_free_r+0x8c>
 8002088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800208c:	1f0c      	subs	r4, r1, #4
 800208e:	2b00      	cmp	r3, #0
 8002090:	bfb8      	it	lt
 8002092:	18e4      	addlt	r4, r4, r3
 8002094:	f000 f8e0 	bl	8002258 <__malloc_lock>
 8002098:	4a1d      	ldr	r2, [pc, #116]	@ (8002110 <_free_r+0x90>)
 800209a:	6813      	ldr	r3, [r2, #0]
 800209c:	b933      	cbnz	r3, 80020ac <_free_r+0x2c>
 800209e:	6063      	str	r3, [r4, #4]
 80020a0:	6014      	str	r4, [r2, #0]
 80020a2:	4628      	mov	r0, r5
 80020a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020a8:	f000 b8dc 	b.w	8002264 <__malloc_unlock>
 80020ac:	42a3      	cmp	r3, r4
 80020ae:	d908      	bls.n	80020c2 <_free_r+0x42>
 80020b0:	6820      	ldr	r0, [r4, #0]
 80020b2:	1821      	adds	r1, r4, r0
 80020b4:	428b      	cmp	r3, r1
 80020b6:	bf01      	itttt	eq
 80020b8:	6819      	ldreq	r1, [r3, #0]
 80020ba:	685b      	ldreq	r3, [r3, #4]
 80020bc:	1809      	addeq	r1, r1, r0
 80020be:	6021      	streq	r1, [r4, #0]
 80020c0:	e7ed      	b.n	800209e <_free_r+0x1e>
 80020c2:	461a      	mov	r2, r3
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	b10b      	cbz	r3, 80020cc <_free_r+0x4c>
 80020c8:	42a3      	cmp	r3, r4
 80020ca:	d9fa      	bls.n	80020c2 <_free_r+0x42>
 80020cc:	6811      	ldr	r1, [r2, #0]
 80020ce:	1850      	adds	r0, r2, r1
 80020d0:	42a0      	cmp	r0, r4
 80020d2:	d10b      	bne.n	80020ec <_free_r+0x6c>
 80020d4:	6820      	ldr	r0, [r4, #0]
 80020d6:	4401      	add	r1, r0
 80020d8:	1850      	adds	r0, r2, r1
 80020da:	4283      	cmp	r3, r0
 80020dc:	6011      	str	r1, [r2, #0]
 80020de:	d1e0      	bne.n	80020a2 <_free_r+0x22>
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	6053      	str	r3, [r2, #4]
 80020e6:	4408      	add	r0, r1
 80020e8:	6010      	str	r0, [r2, #0]
 80020ea:	e7da      	b.n	80020a2 <_free_r+0x22>
 80020ec:	d902      	bls.n	80020f4 <_free_r+0x74>
 80020ee:	230c      	movs	r3, #12
 80020f0:	602b      	str	r3, [r5, #0]
 80020f2:	e7d6      	b.n	80020a2 <_free_r+0x22>
 80020f4:	6820      	ldr	r0, [r4, #0]
 80020f6:	1821      	adds	r1, r4, r0
 80020f8:	428b      	cmp	r3, r1
 80020fa:	bf04      	itt	eq
 80020fc:	6819      	ldreq	r1, [r3, #0]
 80020fe:	685b      	ldreq	r3, [r3, #4]
 8002100:	6063      	str	r3, [r4, #4]
 8002102:	bf04      	itt	eq
 8002104:	1809      	addeq	r1, r1, r0
 8002106:	6021      	streq	r1, [r4, #0]
 8002108:	6054      	str	r4, [r2, #4]
 800210a:	e7ca      	b.n	80020a2 <_free_r+0x22>
 800210c:	bd38      	pop	{r3, r4, r5, pc}
 800210e:	bf00      	nop
 8002110:	200001d0 	.word	0x200001d0

08002114 <sbrk_aligned>:
 8002114:	b570      	push	{r4, r5, r6, lr}
 8002116:	4e0f      	ldr	r6, [pc, #60]	@ (8002154 <sbrk_aligned+0x40>)
 8002118:	460c      	mov	r4, r1
 800211a:	6831      	ldr	r1, [r6, #0]
 800211c:	4605      	mov	r5, r0
 800211e:	b911      	cbnz	r1, 8002126 <sbrk_aligned+0x12>
 8002120:	f000 fba6 	bl	8002870 <_sbrk_r>
 8002124:	6030      	str	r0, [r6, #0]
 8002126:	4621      	mov	r1, r4
 8002128:	4628      	mov	r0, r5
 800212a:	f000 fba1 	bl	8002870 <_sbrk_r>
 800212e:	1c43      	adds	r3, r0, #1
 8002130:	d103      	bne.n	800213a <sbrk_aligned+0x26>
 8002132:	f04f 34ff 	mov.w	r4, #4294967295
 8002136:	4620      	mov	r0, r4
 8002138:	bd70      	pop	{r4, r5, r6, pc}
 800213a:	1cc4      	adds	r4, r0, #3
 800213c:	f024 0403 	bic.w	r4, r4, #3
 8002140:	42a0      	cmp	r0, r4
 8002142:	d0f8      	beq.n	8002136 <sbrk_aligned+0x22>
 8002144:	1a21      	subs	r1, r4, r0
 8002146:	4628      	mov	r0, r5
 8002148:	f000 fb92 	bl	8002870 <_sbrk_r>
 800214c:	3001      	adds	r0, #1
 800214e:	d1f2      	bne.n	8002136 <sbrk_aligned+0x22>
 8002150:	e7ef      	b.n	8002132 <sbrk_aligned+0x1e>
 8002152:	bf00      	nop
 8002154:	200001cc 	.word	0x200001cc

08002158 <_malloc_r>:
 8002158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800215c:	1ccd      	adds	r5, r1, #3
 800215e:	f025 0503 	bic.w	r5, r5, #3
 8002162:	3508      	adds	r5, #8
 8002164:	2d0c      	cmp	r5, #12
 8002166:	bf38      	it	cc
 8002168:	250c      	movcc	r5, #12
 800216a:	2d00      	cmp	r5, #0
 800216c:	4606      	mov	r6, r0
 800216e:	db01      	blt.n	8002174 <_malloc_r+0x1c>
 8002170:	42a9      	cmp	r1, r5
 8002172:	d904      	bls.n	800217e <_malloc_r+0x26>
 8002174:	230c      	movs	r3, #12
 8002176:	6033      	str	r3, [r6, #0]
 8002178:	2000      	movs	r0, #0
 800217a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800217e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002254 <_malloc_r+0xfc>
 8002182:	f000 f869 	bl	8002258 <__malloc_lock>
 8002186:	f8d8 3000 	ldr.w	r3, [r8]
 800218a:	461c      	mov	r4, r3
 800218c:	bb44      	cbnz	r4, 80021e0 <_malloc_r+0x88>
 800218e:	4629      	mov	r1, r5
 8002190:	4630      	mov	r0, r6
 8002192:	f7ff ffbf 	bl	8002114 <sbrk_aligned>
 8002196:	1c43      	adds	r3, r0, #1
 8002198:	4604      	mov	r4, r0
 800219a:	d158      	bne.n	800224e <_malloc_r+0xf6>
 800219c:	f8d8 4000 	ldr.w	r4, [r8]
 80021a0:	4627      	mov	r7, r4
 80021a2:	2f00      	cmp	r7, #0
 80021a4:	d143      	bne.n	800222e <_malloc_r+0xd6>
 80021a6:	2c00      	cmp	r4, #0
 80021a8:	d04b      	beq.n	8002242 <_malloc_r+0xea>
 80021aa:	6823      	ldr	r3, [r4, #0]
 80021ac:	4639      	mov	r1, r7
 80021ae:	4630      	mov	r0, r6
 80021b0:	eb04 0903 	add.w	r9, r4, r3
 80021b4:	f000 fb5c 	bl	8002870 <_sbrk_r>
 80021b8:	4581      	cmp	r9, r0
 80021ba:	d142      	bne.n	8002242 <_malloc_r+0xea>
 80021bc:	6821      	ldr	r1, [r4, #0]
 80021be:	1a6d      	subs	r5, r5, r1
 80021c0:	4629      	mov	r1, r5
 80021c2:	4630      	mov	r0, r6
 80021c4:	f7ff ffa6 	bl	8002114 <sbrk_aligned>
 80021c8:	3001      	adds	r0, #1
 80021ca:	d03a      	beq.n	8002242 <_malloc_r+0xea>
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	442b      	add	r3, r5
 80021d0:	6023      	str	r3, [r4, #0]
 80021d2:	f8d8 3000 	ldr.w	r3, [r8]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	bb62      	cbnz	r2, 8002234 <_malloc_r+0xdc>
 80021da:	f8c8 7000 	str.w	r7, [r8]
 80021de:	e00f      	b.n	8002200 <_malloc_r+0xa8>
 80021e0:	6822      	ldr	r2, [r4, #0]
 80021e2:	1b52      	subs	r2, r2, r5
 80021e4:	d420      	bmi.n	8002228 <_malloc_r+0xd0>
 80021e6:	2a0b      	cmp	r2, #11
 80021e8:	d917      	bls.n	800221a <_malloc_r+0xc2>
 80021ea:	1961      	adds	r1, r4, r5
 80021ec:	42a3      	cmp	r3, r4
 80021ee:	6025      	str	r5, [r4, #0]
 80021f0:	bf18      	it	ne
 80021f2:	6059      	strne	r1, [r3, #4]
 80021f4:	6863      	ldr	r3, [r4, #4]
 80021f6:	bf08      	it	eq
 80021f8:	f8c8 1000 	streq.w	r1, [r8]
 80021fc:	5162      	str	r2, [r4, r5]
 80021fe:	604b      	str	r3, [r1, #4]
 8002200:	4630      	mov	r0, r6
 8002202:	f000 f82f 	bl	8002264 <__malloc_unlock>
 8002206:	f104 000b 	add.w	r0, r4, #11
 800220a:	1d23      	adds	r3, r4, #4
 800220c:	f020 0007 	bic.w	r0, r0, #7
 8002210:	1ac2      	subs	r2, r0, r3
 8002212:	bf1c      	itt	ne
 8002214:	1a1b      	subne	r3, r3, r0
 8002216:	50a3      	strne	r3, [r4, r2]
 8002218:	e7af      	b.n	800217a <_malloc_r+0x22>
 800221a:	6862      	ldr	r2, [r4, #4]
 800221c:	42a3      	cmp	r3, r4
 800221e:	bf0c      	ite	eq
 8002220:	f8c8 2000 	streq.w	r2, [r8]
 8002224:	605a      	strne	r2, [r3, #4]
 8002226:	e7eb      	b.n	8002200 <_malloc_r+0xa8>
 8002228:	4623      	mov	r3, r4
 800222a:	6864      	ldr	r4, [r4, #4]
 800222c:	e7ae      	b.n	800218c <_malloc_r+0x34>
 800222e:	463c      	mov	r4, r7
 8002230:	687f      	ldr	r7, [r7, #4]
 8002232:	e7b6      	b.n	80021a2 <_malloc_r+0x4a>
 8002234:	461a      	mov	r2, r3
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	42a3      	cmp	r3, r4
 800223a:	d1fb      	bne.n	8002234 <_malloc_r+0xdc>
 800223c:	2300      	movs	r3, #0
 800223e:	6053      	str	r3, [r2, #4]
 8002240:	e7de      	b.n	8002200 <_malloc_r+0xa8>
 8002242:	230c      	movs	r3, #12
 8002244:	6033      	str	r3, [r6, #0]
 8002246:	4630      	mov	r0, r6
 8002248:	f000 f80c 	bl	8002264 <__malloc_unlock>
 800224c:	e794      	b.n	8002178 <_malloc_r+0x20>
 800224e:	6005      	str	r5, [r0, #0]
 8002250:	e7d6      	b.n	8002200 <_malloc_r+0xa8>
 8002252:	bf00      	nop
 8002254:	200001d0 	.word	0x200001d0

08002258 <__malloc_lock>:
 8002258:	4801      	ldr	r0, [pc, #4]	@ (8002260 <__malloc_lock+0x8>)
 800225a:	f7ff bf0f 	b.w	800207c <__retarget_lock_acquire_recursive>
 800225e:	bf00      	nop
 8002260:	200001c8 	.word	0x200001c8

08002264 <__malloc_unlock>:
 8002264:	4801      	ldr	r0, [pc, #4]	@ (800226c <__malloc_unlock+0x8>)
 8002266:	f7ff bf0a 	b.w	800207e <__retarget_lock_release_recursive>
 800226a:	bf00      	nop
 800226c:	200001c8 	.word	0x200001c8

08002270 <__ssputs_r>:
 8002270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002274:	688e      	ldr	r6, [r1, #8]
 8002276:	461f      	mov	r7, r3
 8002278:	42be      	cmp	r6, r7
 800227a:	680b      	ldr	r3, [r1, #0]
 800227c:	4682      	mov	sl, r0
 800227e:	460c      	mov	r4, r1
 8002280:	4690      	mov	r8, r2
 8002282:	d82d      	bhi.n	80022e0 <__ssputs_r+0x70>
 8002284:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002288:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800228c:	d026      	beq.n	80022dc <__ssputs_r+0x6c>
 800228e:	6965      	ldr	r5, [r4, #20]
 8002290:	6909      	ldr	r1, [r1, #16]
 8002292:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002296:	eba3 0901 	sub.w	r9, r3, r1
 800229a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800229e:	1c7b      	adds	r3, r7, #1
 80022a0:	444b      	add	r3, r9
 80022a2:	106d      	asrs	r5, r5, #1
 80022a4:	429d      	cmp	r5, r3
 80022a6:	bf38      	it	cc
 80022a8:	461d      	movcc	r5, r3
 80022aa:	0553      	lsls	r3, r2, #21
 80022ac:	d527      	bpl.n	80022fe <__ssputs_r+0x8e>
 80022ae:	4629      	mov	r1, r5
 80022b0:	f7ff ff52 	bl	8002158 <_malloc_r>
 80022b4:	4606      	mov	r6, r0
 80022b6:	b360      	cbz	r0, 8002312 <__ssputs_r+0xa2>
 80022b8:	6921      	ldr	r1, [r4, #16]
 80022ba:	464a      	mov	r2, r9
 80022bc:	f000 fae8 	bl	8002890 <memcpy>
 80022c0:	89a3      	ldrh	r3, [r4, #12]
 80022c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80022c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022ca:	81a3      	strh	r3, [r4, #12]
 80022cc:	6126      	str	r6, [r4, #16]
 80022ce:	6165      	str	r5, [r4, #20]
 80022d0:	444e      	add	r6, r9
 80022d2:	eba5 0509 	sub.w	r5, r5, r9
 80022d6:	6026      	str	r6, [r4, #0]
 80022d8:	60a5      	str	r5, [r4, #8]
 80022da:	463e      	mov	r6, r7
 80022dc:	42be      	cmp	r6, r7
 80022de:	d900      	bls.n	80022e2 <__ssputs_r+0x72>
 80022e0:	463e      	mov	r6, r7
 80022e2:	6820      	ldr	r0, [r4, #0]
 80022e4:	4632      	mov	r2, r6
 80022e6:	4641      	mov	r1, r8
 80022e8:	f000 faa8 	bl	800283c <memmove>
 80022ec:	68a3      	ldr	r3, [r4, #8]
 80022ee:	1b9b      	subs	r3, r3, r6
 80022f0:	60a3      	str	r3, [r4, #8]
 80022f2:	6823      	ldr	r3, [r4, #0]
 80022f4:	4433      	add	r3, r6
 80022f6:	6023      	str	r3, [r4, #0]
 80022f8:	2000      	movs	r0, #0
 80022fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022fe:	462a      	mov	r2, r5
 8002300:	f000 fad4 	bl	80028ac <_realloc_r>
 8002304:	4606      	mov	r6, r0
 8002306:	2800      	cmp	r0, #0
 8002308:	d1e0      	bne.n	80022cc <__ssputs_r+0x5c>
 800230a:	6921      	ldr	r1, [r4, #16]
 800230c:	4650      	mov	r0, sl
 800230e:	f7ff feb7 	bl	8002080 <_free_r>
 8002312:	230c      	movs	r3, #12
 8002314:	f8ca 3000 	str.w	r3, [sl]
 8002318:	89a3      	ldrh	r3, [r4, #12]
 800231a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800231e:	81a3      	strh	r3, [r4, #12]
 8002320:	f04f 30ff 	mov.w	r0, #4294967295
 8002324:	e7e9      	b.n	80022fa <__ssputs_r+0x8a>
	...

08002328 <_svfiprintf_r>:
 8002328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800232c:	4698      	mov	r8, r3
 800232e:	898b      	ldrh	r3, [r1, #12]
 8002330:	061b      	lsls	r3, r3, #24
 8002332:	b09d      	sub	sp, #116	@ 0x74
 8002334:	4607      	mov	r7, r0
 8002336:	460d      	mov	r5, r1
 8002338:	4614      	mov	r4, r2
 800233a:	d510      	bpl.n	800235e <_svfiprintf_r+0x36>
 800233c:	690b      	ldr	r3, [r1, #16]
 800233e:	b973      	cbnz	r3, 800235e <_svfiprintf_r+0x36>
 8002340:	2140      	movs	r1, #64	@ 0x40
 8002342:	f7ff ff09 	bl	8002158 <_malloc_r>
 8002346:	6028      	str	r0, [r5, #0]
 8002348:	6128      	str	r0, [r5, #16]
 800234a:	b930      	cbnz	r0, 800235a <_svfiprintf_r+0x32>
 800234c:	230c      	movs	r3, #12
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	f04f 30ff 	mov.w	r0, #4294967295
 8002354:	b01d      	add	sp, #116	@ 0x74
 8002356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800235a:	2340      	movs	r3, #64	@ 0x40
 800235c:	616b      	str	r3, [r5, #20]
 800235e:	2300      	movs	r3, #0
 8002360:	9309      	str	r3, [sp, #36]	@ 0x24
 8002362:	2320      	movs	r3, #32
 8002364:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002368:	f8cd 800c 	str.w	r8, [sp, #12]
 800236c:	2330      	movs	r3, #48	@ 0x30
 800236e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800250c <_svfiprintf_r+0x1e4>
 8002372:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002376:	f04f 0901 	mov.w	r9, #1
 800237a:	4623      	mov	r3, r4
 800237c:	469a      	mov	sl, r3
 800237e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002382:	b10a      	cbz	r2, 8002388 <_svfiprintf_r+0x60>
 8002384:	2a25      	cmp	r2, #37	@ 0x25
 8002386:	d1f9      	bne.n	800237c <_svfiprintf_r+0x54>
 8002388:	ebba 0b04 	subs.w	fp, sl, r4
 800238c:	d00b      	beq.n	80023a6 <_svfiprintf_r+0x7e>
 800238e:	465b      	mov	r3, fp
 8002390:	4622      	mov	r2, r4
 8002392:	4629      	mov	r1, r5
 8002394:	4638      	mov	r0, r7
 8002396:	f7ff ff6b 	bl	8002270 <__ssputs_r>
 800239a:	3001      	adds	r0, #1
 800239c:	f000 80a7 	beq.w	80024ee <_svfiprintf_r+0x1c6>
 80023a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80023a2:	445a      	add	r2, fp
 80023a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80023a6:	f89a 3000 	ldrb.w	r3, [sl]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 809f 	beq.w	80024ee <_svfiprintf_r+0x1c6>
 80023b0:	2300      	movs	r3, #0
 80023b2:	f04f 32ff 	mov.w	r2, #4294967295
 80023b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80023ba:	f10a 0a01 	add.w	sl, sl, #1
 80023be:	9304      	str	r3, [sp, #16]
 80023c0:	9307      	str	r3, [sp, #28]
 80023c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80023c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80023c8:	4654      	mov	r4, sl
 80023ca:	2205      	movs	r2, #5
 80023cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023d0:	484e      	ldr	r0, [pc, #312]	@ (800250c <_svfiprintf_r+0x1e4>)
 80023d2:	f7fd fefd 	bl	80001d0 <memchr>
 80023d6:	9a04      	ldr	r2, [sp, #16]
 80023d8:	b9d8      	cbnz	r0, 8002412 <_svfiprintf_r+0xea>
 80023da:	06d0      	lsls	r0, r2, #27
 80023dc:	bf44      	itt	mi
 80023de:	2320      	movmi	r3, #32
 80023e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80023e4:	0711      	lsls	r1, r2, #28
 80023e6:	bf44      	itt	mi
 80023e8:	232b      	movmi	r3, #43	@ 0x2b
 80023ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80023ee:	f89a 3000 	ldrb.w	r3, [sl]
 80023f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80023f4:	d015      	beq.n	8002422 <_svfiprintf_r+0xfa>
 80023f6:	9a07      	ldr	r2, [sp, #28]
 80023f8:	4654      	mov	r4, sl
 80023fa:	2000      	movs	r0, #0
 80023fc:	f04f 0c0a 	mov.w	ip, #10
 8002400:	4621      	mov	r1, r4
 8002402:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002406:	3b30      	subs	r3, #48	@ 0x30
 8002408:	2b09      	cmp	r3, #9
 800240a:	d94b      	bls.n	80024a4 <_svfiprintf_r+0x17c>
 800240c:	b1b0      	cbz	r0, 800243c <_svfiprintf_r+0x114>
 800240e:	9207      	str	r2, [sp, #28]
 8002410:	e014      	b.n	800243c <_svfiprintf_r+0x114>
 8002412:	eba0 0308 	sub.w	r3, r0, r8
 8002416:	fa09 f303 	lsl.w	r3, r9, r3
 800241a:	4313      	orrs	r3, r2
 800241c:	9304      	str	r3, [sp, #16]
 800241e:	46a2      	mov	sl, r4
 8002420:	e7d2      	b.n	80023c8 <_svfiprintf_r+0xa0>
 8002422:	9b03      	ldr	r3, [sp, #12]
 8002424:	1d19      	adds	r1, r3, #4
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	9103      	str	r1, [sp, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	bfbb      	ittet	lt
 800242e:	425b      	neglt	r3, r3
 8002430:	f042 0202 	orrlt.w	r2, r2, #2
 8002434:	9307      	strge	r3, [sp, #28]
 8002436:	9307      	strlt	r3, [sp, #28]
 8002438:	bfb8      	it	lt
 800243a:	9204      	strlt	r2, [sp, #16]
 800243c:	7823      	ldrb	r3, [r4, #0]
 800243e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002440:	d10a      	bne.n	8002458 <_svfiprintf_r+0x130>
 8002442:	7863      	ldrb	r3, [r4, #1]
 8002444:	2b2a      	cmp	r3, #42	@ 0x2a
 8002446:	d132      	bne.n	80024ae <_svfiprintf_r+0x186>
 8002448:	9b03      	ldr	r3, [sp, #12]
 800244a:	1d1a      	adds	r2, r3, #4
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	9203      	str	r2, [sp, #12]
 8002450:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002454:	3402      	adds	r4, #2
 8002456:	9305      	str	r3, [sp, #20]
 8002458:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800251c <_svfiprintf_r+0x1f4>
 800245c:	7821      	ldrb	r1, [r4, #0]
 800245e:	2203      	movs	r2, #3
 8002460:	4650      	mov	r0, sl
 8002462:	f7fd feb5 	bl	80001d0 <memchr>
 8002466:	b138      	cbz	r0, 8002478 <_svfiprintf_r+0x150>
 8002468:	9b04      	ldr	r3, [sp, #16]
 800246a:	eba0 000a 	sub.w	r0, r0, sl
 800246e:	2240      	movs	r2, #64	@ 0x40
 8002470:	4082      	lsls	r2, r0
 8002472:	4313      	orrs	r3, r2
 8002474:	3401      	adds	r4, #1
 8002476:	9304      	str	r3, [sp, #16]
 8002478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800247c:	4824      	ldr	r0, [pc, #144]	@ (8002510 <_svfiprintf_r+0x1e8>)
 800247e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002482:	2206      	movs	r2, #6
 8002484:	f7fd fea4 	bl	80001d0 <memchr>
 8002488:	2800      	cmp	r0, #0
 800248a:	d036      	beq.n	80024fa <_svfiprintf_r+0x1d2>
 800248c:	4b21      	ldr	r3, [pc, #132]	@ (8002514 <_svfiprintf_r+0x1ec>)
 800248e:	bb1b      	cbnz	r3, 80024d8 <_svfiprintf_r+0x1b0>
 8002490:	9b03      	ldr	r3, [sp, #12]
 8002492:	3307      	adds	r3, #7
 8002494:	f023 0307 	bic.w	r3, r3, #7
 8002498:	3308      	adds	r3, #8
 800249a:	9303      	str	r3, [sp, #12]
 800249c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800249e:	4433      	add	r3, r6
 80024a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80024a2:	e76a      	b.n	800237a <_svfiprintf_r+0x52>
 80024a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80024a8:	460c      	mov	r4, r1
 80024aa:	2001      	movs	r0, #1
 80024ac:	e7a8      	b.n	8002400 <_svfiprintf_r+0xd8>
 80024ae:	2300      	movs	r3, #0
 80024b0:	3401      	adds	r4, #1
 80024b2:	9305      	str	r3, [sp, #20]
 80024b4:	4619      	mov	r1, r3
 80024b6:	f04f 0c0a 	mov.w	ip, #10
 80024ba:	4620      	mov	r0, r4
 80024bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80024c0:	3a30      	subs	r2, #48	@ 0x30
 80024c2:	2a09      	cmp	r2, #9
 80024c4:	d903      	bls.n	80024ce <_svfiprintf_r+0x1a6>
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0c6      	beq.n	8002458 <_svfiprintf_r+0x130>
 80024ca:	9105      	str	r1, [sp, #20]
 80024cc:	e7c4      	b.n	8002458 <_svfiprintf_r+0x130>
 80024ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80024d2:	4604      	mov	r4, r0
 80024d4:	2301      	movs	r3, #1
 80024d6:	e7f0      	b.n	80024ba <_svfiprintf_r+0x192>
 80024d8:	ab03      	add	r3, sp, #12
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	462a      	mov	r2, r5
 80024de:	4b0e      	ldr	r3, [pc, #56]	@ (8002518 <_svfiprintf_r+0x1f0>)
 80024e0:	a904      	add	r1, sp, #16
 80024e2:	4638      	mov	r0, r7
 80024e4:	f3af 8000 	nop.w
 80024e8:	1c42      	adds	r2, r0, #1
 80024ea:	4606      	mov	r6, r0
 80024ec:	d1d6      	bne.n	800249c <_svfiprintf_r+0x174>
 80024ee:	89ab      	ldrh	r3, [r5, #12]
 80024f0:	065b      	lsls	r3, r3, #25
 80024f2:	f53f af2d 	bmi.w	8002350 <_svfiprintf_r+0x28>
 80024f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80024f8:	e72c      	b.n	8002354 <_svfiprintf_r+0x2c>
 80024fa:	ab03      	add	r3, sp, #12
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	462a      	mov	r2, r5
 8002500:	4b05      	ldr	r3, [pc, #20]	@ (8002518 <_svfiprintf_r+0x1f0>)
 8002502:	a904      	add	r1, sp, #16
 8002504:	4638      	mov	r0, r7
 8002506:	f000 f879 	bl	80025fc <_printf_i>
 800250a:	e7ed      	b.n	80024e8 <_svfiprintf_r+0x1c0>
 800250c:	08002960 	.word	0x08002960
 8002510:	0800296a 	.word	0x0800296a
 8002514:	00000000 	.word	0x00000000
 8002518:	08002271 	.word	0x08002271
 800251c:	08002966 	.word	0x08002966

08002520 <_printf_common>:
 8002520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002524:	4616      	mov	r6, r2
 8002526:	4698      	mov	r8, r3
 8002528:	688a      	ldr	r2, [r1, #8]
 800252a:	690b      	ldr	r3, [r1, #16]
 800252c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002530:	4293      	cmp	r3, r2
 8002532:	bfb8      	it	lt
 8002534:	4613      	movlt	r3, r2
 8002536:	6033      	str	r3, [r6, #0]
 8002538:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800253c:	4607      	mov	r7, r0
 800253e:	460c      	mov	r4, r1
 8002540:	b10a      	cbz	r2, 8002546 <_printf_common+0x26>
 8002542:	3301      	adds	r3, #1
 8002544:	6033      	str	r3, [r6, #0]
 8002546:	6823      	ldr	r3, [r4, #0]
 8002548:	0699      	lsls	r1, r3, #26
 800254a:	bf42      	ittt	mi
 800254c:	6833      	ldrmi	r3, [r6, #0]
 800254e:	3302      	addmi	r3, #2
 8002550:	6033      	strmi	r3, [r6, #0]
 8002552:	6825      	ldr	r5, [r4, #0]
 8002554:	f015 0506 	ands.w	r5, r5, #6
 8002558:	d106      	bne.n	8002568 <_printf_common+0x48>
 800255a:	f104 0a19 	add.w	sl, r4, #25
 800255e:	68e3      	ldr	r3, [r4, #12]
 8002560:	6832      	ldr	r2, [r6, #0]
 8002562:	1a9b      	subs	r3, r3, r2
 8002564:	42ab      	cmp	r3, r5
 8002566:	dc26      	bgt.n	80025b6 <_printf_common+0x96>
 8002568:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800256c:	6822      	ldr	r2, [r4, #0]
 800256e:	3b00      	subs	r3, #0
 8002570:	bf18      	it	ne
 8002572:	2301      	movne	r3, #1
 8002574:	0692      	lsls	r2, r2, #26
 8002576:	d42b      	bmi.n	80025d0 <_printf_common+0xb0>
 8002578:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800257c:	4641      	mov	r1, r8
 800257e:	4638      	mov	r0, r7
 8002580:	47c8      	blx	r9
 8002582:	3001      	adds	r0, #1
 8002584:	d01e      	beq.n	80025c4 <_printf_common+0xa4>
 8002586:	6823      	ldr	r3, [r4, #0]
 8002588:	6922      	ldr	r2, [r4, #16]
 800258a:	f003 0306 	and.w	r3, r3, #6
 800258e:	2b04      	cmp	r3, #4
 8002590:	bf02      	ittt	eq
 8002592:	68e5      	ldreq	r5, [r4, #12]
 8002594:	6833      	ldreq	r3, [r6, #0]
 8002596:	1aed      	subeq	r5, r5, r3
 8002598:	68a3      	ldr	r3, [r4, #8]
 800259a:	bf0c      	ite	eq
 800259c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025a0:	2500      	movne	r5, #0
 80025a2:	4293      	cmp	r3, r2
 80025a4:	bfc4      	itt	gt
 80025a6:	1a9b      	subgt	r3, r3, r2
 80025a8:	18ed      	addgt	r5, r5, r3
 80025aa:	2600      	movs	r6, #0
 80025ac:	341a      	adds	r4, #26
 80025ae:	42b5      	cmp	r5, r6
 80025b0:	d11a      	bne.n	80025e8 <_printf_common+0xc8>
 80025b2:	2000      	movs	r0, #0
 80025b4:	e008      	b.n	80025c8 <_printf_common+0xa8>
 80025b6:	2301      	movs	r3, #1
 80025b8:	4652      	mov	r2, sl
 80025ba:	4641      	mov	r1, r8
 80025bc:	4638      	mov	r0, r7
 80025be:	47c8      	blx	r9
 80025c0:	3001      	adds	r0, #1
 80025c2:	d103      	bne.n	80025cc <_printf_common+0xac>
 80025c4:	f04f 30ff 	mov.w	r0, #4294967295
 80025c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025cc:	3501      	adds	r5, #1
 80025ce:	e7c6      	b.n	800255e <_printf_common+0x3e>
 80025d0:	18e1      	adds	r1, r4, r3
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	2030      	movs	r0, #48	@ 0x30
 80025d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80025da:	4422      	add	r2, r4
 80025dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80025e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80025e4:	3302      	adds	r3, #2
 80025e6:	e7c7      	b.n	8002578 <_printf_common+0x58>
 80025e8:	2301      	movs	r3, #1
 80025ea:	4622      	mov	r2, r4
 80025ec:	4641      	mov	r1, r8
 80025ee:	4638      	mov	r0, r7
 80025f0:	47c8      	blx	r9
 80025f2:	3001      	adds	r0, #1
 80025f4:	d0e6      	beq.n	80025c4 <_printf_common+0xa4>
 80025f6:	3601      	adds	r6, #1
 80025f8:	e7d9      	b.n	80025ae <_printf_common+0x8e>
	...

080025fc <_printf_i>:
 80025fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002600:	7e0f      	ldrb	r7, [r1, #24]
 8002602:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002604:	2f78      	cmp	r7, #120	@ 0x78
 8002606:	4691      	mov	r9, r2
 8002608:	4680      	mov	r8, r0
 800260a:	460c      	mov	r4, r1
 800260c:	469a      	mov	sl, r3
 800260e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002612:	d807      	bhi.n	8002624 <_printf_i+0x28>
 8002614:	2f62      	cmp	r7, #98	@ 0x62
 8002616:	d80a      	bhi.n	800262e <_printf_i+0x32>
 8002618:	2f00      	cmp	r7, #0
 800261a:	f000 80d2 	beq.w	80027c2 <_printf_i+0x1c6>
 800261e:	2f58      	cmp	r7, #88	@ 0x58
 8002620:	f000 80b9 	beq.w	8002796 <_printf_i+0x19a>
 8002624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002628:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800262c:	e03a      	b.n	80026a4 <_printf_i+0xa8>
 800262e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002632:	2b15      	cmp	r3, #21
 8002634:	d8f6      	bhi.n	8002624 <_printf_i+0x28>
 8002636:	a101      	add	r1, pc, #4	@ (adr r1, 800263c <_printf_i+0x40>)
 8002638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800263c:	08002695 	.word	0x08002695
 8002640:	080026a9 	.word	0x080026a9
 8002644:	08002625 	.word	0x08002625
 8002648:	08002625 	.word	0x08002625
 800264c:	08002625 	.word	0x08002625
 8002650:	08002625 	.word	0x08002625
 8002654:	080026a9 	.word	0x080026a9
 8002658:	08002625 	.word	0x08002625
 800265c:	08002625 	.word	0x08002625
 8002660:	08002625 	.word	0x08002625
 8002664:	08002625 	.word	0x08002625
 8002668:	080027a9 	.word	0x080027a9
 800266c:	080026d3 	.word	0x080026d3
 8002670:	08002763 	.word	0x08002763
 8002674:	08002625 	.word	0x08002625
 8002678:	08002625 	.word	0x08002625
 800267c:	080027cb 	.word	0x080027cb
 8002680:	08002625 	.word	0x08002625
 8002684:	080026d3 	.word	0x080026d3
 8002688:	08002625 	.word	0x08002625
 800268c:	08002625 	.word	0x08002625
 8002690:	0800276b 	.word	0x0800276b
 8002694:	6833      	ldr	r3, [r6, #0]
 8002696:	1d1a      	adds	r2, r3, #4
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6032      	str	r2, [r6, #0]
 800269c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80026a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80026a4:	2301      	movs	r3, #1
 80026a6:	e09d      	b.n	80027e4 <_printf_i+0x1e8>
 80026a8:	6833      	ldr	r3, [r6, #0]
 80026aa:	6820      	ldr	r0, [r4, #0]
 80026ac:	1d19      	adds	r1, r3, #4
 80026ae:	6031      	str	r1, [r6, #0]
 80026b0:	0606      	lsls	r6, r0, #24
 80026b2:	d501      	bpl.n	80026b8 <_printf_i+0xbc>
 80026b4:	681d      	ldr	r5, [r3, #0]
 80026b6:	e003      	b.n	80026c0 <_printf_i+0xc4>
 80026b8:	0645      	lsls	r5, r0, #25
 80026ba:	d5fb      	bpl.n	80026b4 <_printf_i+0xb8>
 80026bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80026c0:	2d00      	cmp	r5, #0
 80026c2:	da03      	bge.n	80026cc <_printf_i+0xd0>
 80026c4:	232d      	movs	r3, #45	@ 0x2d
 80026c6:	426d      	negs	r5, r5
 80026c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80026cc:	4859      	ldr	r0, [pc, #356]	@ (8002834 <_printf_i+0x238>)
 80026ce:	230a      	movs	r3, #10
 80026d0:	e011      	b.n	80026f6 <_printf_i+0xfa>
 80026d2:	6821      	ldr	r1, [r4, #0]
 80026d4:	6833      	ldr	r3, [r6, #0]
 80026d6:	0608      	lsls	r0, r1, #24
 80026d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80026dc:	d402      	bmi.n	80026e4 <_printf_i+0xe8>
 80026de:	0649      	lsls	r1, r1, #25
 80026e0:	bf48      	it	mi
 80026e2:	b2ad      	uxthmi	r5, r5
 80026e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80026e6:	4853      	ldr	r0, [pc, #332]	@ (8002834 <_printf_i+0x238>)
 80026e8:	6033      	str	r3, [r6, #0]
 80026ea:	bf14      	ite	ne
 80026ec:	230a      	movne	r3, #10
 80026ee:	2308      	moveq	r3, #8
 80026f0:	2100      	movs	r1, #0
 80026f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80026f6:	6866      	ldr	r6, [r4, #4]
 80026f8:	60a6      	str	r6, [r4, #8]
 80026fa:	2e00      	cmp	r6, #0
 80026fc:	bfa2      	ittt	ge
 80026fe:	6821      	ldrge	r1, [r4, #0]
 8002700:	f021 0104 	bicge.w	r1, r1, #4
 8002704:	6021      	strge	r1, [r4, #0]
 8002706:	b90d      	cbnz	r5, 800270c <_printf_i+0x110>
 8002708:	2e00      	cmp	r6, #0
 800270a:	d04b      	beq.n	80027a4 <_printf_i+0x1a8>
 800270c:	4616      	mov	r6, r2
 800270e:	fbb5 f1f3 	udiv	r1, r5, r3
 8002712:	fb03 5711 	mls	r7, r3, r1, r5
 8002716:	5dc7      	ldrb	r7, [r0, r7]
 8002718:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800271c:	462f      	mov	r7, r5
 800271e:	42bb      	cmp	r3, r7
 8002720:	460d      	mov	r5, r1
 8002722:	d9f4      	bls.n	800270e <_printf_i+0x112>
 8002724:	2b08      	cmp	r3, #8
 8002726:	d10b      	bne.n	8002740 <_printf_i+0x144>
 8002728:	6823      	ldr	r3, [r4, #0]
 800272a:	07df      	lsls	r7, r3, #31
 800272c:	d508      	bpl.n	8002740 <_printf_i+0x144>
 800272e:	6923      	ldr	r3, [r4, #16]
 8002730:	6861      	ldr	r1, [r4, #4]
 8002732:	4299      	cmp	r1, r3
 8002734:	bfde      	ittt	le
 8002736:	2330      	movle	r3, #48	@ 0x30
 8002738:	f806 3c01 	strble.w	r3, [r6, #-1]
 800273c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002740:	1b92      	subs	r2, r2, r6
 8002742:	6122      	str	r2, [r4, #16]
 8002744:	f8cd a000 	str.w	sl, [sp]
 8002748:	464b      	mov	r3, r9
 800274a:	aa03      	add	r2, sp, #12
 800274c:	4621      	mov	r1, r4
 800274e:	4640      	mov	r0, r8
 8002750:	f7ff fee6 	bl	8002520 <_printf_common>
 8002754:	3001      	adds	r0, #1
 8002756:	d14a      	bne.n	80027ee <_printf_i+0x1f2>
 8002758:	f04f 30ff 	mov.w	r0, #4294967295
 800275c:	b004      	add	sp, #16
 800275e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	f043 0320 	orr.w	r3, r3, #32
 8002768:	6023      	str	r3, [r4, #0]
 800276a:	4833      	ldr	r0, [pc, #204]	@ (8002838 <_printf_i+0x23c>)
 800276c:	2778      	movs	r7, #120	@ 0x78
 800276e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	6831      	ldr	r1, [r6, #0]
 8002776:	061f      	lsls	r7, r3, #24
 8002778:	f851 5b04 	ldr.w	r5, [r1], #4
 800277c:	d402      	bmi.n	8002784 <_printf_i+0x188>
 800277e:	065f      	lsls	r7, r3, #25
 8002780:	bf48      	it	mi
 8002782:	b2ad      	uxthmi	r5, r5
 8002784:	6031      	str	r1, [r6, #0]
 8002786:	07d9      	lsls	r1, r3, #31
 8002788:	bf44      	itt	mi
 800278a:	f043 0320 	orrmi.w	r3, r3, #32
 800278e:	6023      	strmi	r3, [r4, #0]
 8002790:	b11d      	cbz	r5, 800279a <_printf_i+0x19e>
 8002792:	2310      	movs	r3, #16
 8002794:	e7ac      	b.n	80026f0 <_printf_i+0xf4>
 8002796:	4827      	ldr	r0, [pc, #156]	@ (8002834 <_printf_i+0x238>)
 8002798:	e7e9      	b.n	800276e <_printf_i+0x172>
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	f023 0320 	bic.w	r3, r3, #32
 80027a0:	6023      	str	r3, [r4, #0]
 80027a2:	e7f6      	b.n	8002792 <_printf_i+0x196>
 80027a4:	4616      	mov	r6, r2
 80027a6:	e7bd      	b.n	8002724 <_printf_i+0x128>
 80027a8:	6833      	ldr	r3, [r6, #0]
 80027aa:	6825      	ldr	r5, [r4, #0]
 80027ac:	6961      	ldr	r1, [r4, #20]
 80027ae:	1d18      	adds	r0, r3, #4
 80027b0:	6030      	str	r0, [r6, #0]
 80027b2:	062e      	lsls	r6, r5, #24
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	d501      	bpl.n	80027bc <_printf_i+0x1c0>
 80027b8:	6019      	str	r1, [r3, #0]
 80027ba:	e002      	b.n	80027c2 <_printf_i+0x1c6>
 80027bc:	0668      	lsls	r0, r5, #25
 80027be:	d5fb      	bpl.n	80027b8 <_printf_i+0x1bc>
 80027c0:	8019      	strh	r1, [r3, #0]
 80027c2:	2300      	movs	r3, #0
 80027c4:	6123      	str	r3, [r4, #16]
 80027c6:	4616      	mov	r6, r2
 80027c8:	e7bc      	b.n	8002744 <_printf_i+0x148>
 80027ca:	6833      	ldr	r3, [r6, #0]
 80027cc:	1d1a      	adds	r2, r3, #4
 80027ce:	6032      	str	r2, [r6, #0]
 80027d0:	681e      	ldr	r6, [r3, #0]
 80027d2:	6862      	ldr	r2, [r4, #4]
 80027d4:	2100      	movs	r1, #0
 80027d6:	4630      	mov	r0, r6
 80027d8:	f7fd fcfa 	bl	80001d0 <memchr>
 80027dc:	b108      	cbz	r0, 80027e2 <_printf_i+0x1e6>
 80027de:	1b80      	subs	r0, r0, r6
 80027e0:	6060      	str	r0, [r4, #4]
 80027e2:	6863      	ldr	r3, [r4, #4]
 80027e4:	6123      	str	r3, [r4, #16]
 80027e6:	2300      	movs	r3, #0
 80027e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80027ec:	e7aa      	b.n	8002744 <_printf_i+0x148>
 80027ee:	6923      	ldr	r3, [r4, #16]
 80027f0:	4632      	mov	r2, r6
 80027f2:	4649      	mov	r1, r9
 80027f4:	4640      	mov	r0, r8
 80027f6:	47d0      	blx	sl
 80027f8:	3001      	adds	r0, #1
 80027fa:	d0ad      	beq.n	8002758 <_printf_i+0x15c>
 80027fc:	6823      	ldr	r3, [r4, #0]
 80027fe:	079b      	lsls	r3, r3, #30
 8002800:	d413      	bmi.n	800282a <_printf_i+0x22e>
 8002802:	68e0      	ldr	r0, [r4, #12]
 8002804:	9b03      	ldr	r3, [sp, #12]
 8002806:	4298      	cmp	r0, r3
 8002808:	bfb8      	it	lt
 800280a:	4618      	movlt	r0, r3
 800280c:	e7a6      	b.n	800275c <_printf_i+0x160>
 800280e:	2301      	movs	r3, #1
 8002810:	4632      	mov	r2, r6
 8002812:	4649      	mov	r1, r9
 8002814:	4640      	mov	r0, r8
 8002816:	47d0      	blx	sl
 8002818:	3001      	adds	r0, #1
 800281a:	d09d      	beq.n	8002758 <_printf_i+0x15c>
 800281c:	3501      	adds	r5, #1
 800281e:	68e3      	ldr	r3, [r4, #12]
 8002820:	9903      	ldr	r1, [sp, #12]
 8002822:	1a5b      	subs	r3, r3, r1
 8002824:	42ab      	cmp	r3, r5
 8002826:	dcf2      	bgt.n	800280e <_printf_i+0x212>
 8002828:	e7eb      	b.n	8002802 <_printf_i+0x206>
 800282a:	2500      	movs	r5, #0
 800282c:	f104 0619 	add.w	r6, r4, #25
 8002830:	e7f5      	b.n	800281e <_printf_i+0x222>
 8002832:	bf00      	nop
 8002834:	08002971 	.word	0x08002971
 8002838:	08002982 	.word	0x08002982

0800283c <memmove>:
 800283c:	4288      	cmp	r0, r1
 800283e:	b510      	push	{r4, lr}
 8002840:	eb01 0402 	add.w	r4, r1, r2
 8002844:	d902      	bls.n	800284c <memmove+0x10>
 8002846:	4284      	cmp	r4, r0
 8002848:	4623      	mov	r3, r4
 800284a:	d807      	bhi.n	800285c <memmove+0x20>
 800284c:	1e43      	subs	r3, r0, #1
 800284e:	42a1      	cmp	r1, r4
 8002850:	d008      	beq.n	8002864 <memmove+0x28>
 8002852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002856:	f803 2f01 	strb.w	r2, [r3, #1]!
 800285a:	e7f8      	b.n	800284e <memmove+0x12>
 800285c:	4402      	add	r2, r0
 800285e:	4601      	mov	r1, r0
 8002860:	428a      	cmp	r2, r1
 8002862:	d100      	bne.n	8002866 <memmove+0x2a>
 8002864:	bd10      	pop	{r4, pc}
 8002866:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800286a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800286e:	e7f7      	b.n	8002860 <memmove+0x24>

08002870 <_sbrk_r>:
 8002870:	b538      	push	{r3, r4, r5, lr}
 8002872:	4d06      	ldr	r5, [pc, #24]	@ (800288c <_sbrk_r+0x1c>)
 8002874:	2300      	movs	r3, #0
 8002876:	4604      	mov	r4, r0
 8002878:	4608      	mov	r0, r1
 800287a:	602b      	str	r3, [r5, #0]
 800287c:	f7fe fab4 	bl	8000de8 <_sbrk>
 8002880:	1c43      	adds	r3, r0, #1
 8002882:	d102      	bne.n	800288a <_sbrk_r+0x1a>
 8002884:	682b      	ldr	r3, [r5, #0]
 8002886:	b103      	cbz	r3, 800288a <_sbrk_r+0x1a>
 8002888:	6023      	str	r3, [r4, #0]
 800288a:	bd38      	pop	{r3, r4, r5, pc}
 800288c:	200001c4 	.word	0x200001c4

08002890 <memcpy>:
 8002890:	440a      	add	r2, r1
 8002892:	4291      	cmp	r1, r2
 8002894:	f100 33ff 	add.w	r3, r0, #4294967295
 8002898:	d100      	bne.n	800289c <memcpy+0xc>
 800289a:	4770      	bx	lr
 800289c:	b510      	push	{r4, lr}
 800289e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028a6:	4291      	cmp	r1, r2
 80028a8:	d1f9      	bne.n	800289e <memcpy+0xe>
 80028aa:	bd10      	pop	{r4, pc}

080028ac <_realloc_r>:
 80028ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028b0:	4680      	mov	r8, r0
 80028b2:	4615      	mov	r5, r2
 80028b4:	460c      	mov	r4, r1
 80028b6:	b921      	cbnz	r1, 80028c2 <_realloc_r+0x16>
 80028b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028bc:	4611      	mov	r1, r2
 80028be:	f7ff bc4b 	b.w	8002158 <_malloc_r>
 80028c2:	b92a      	cbnz	r2, 80028d0 <_realloc_r+0x24>
 80028c4:	f7ff fbdc 	bl	8002080 <_free_r>
 80028c8:	2400      	movs	r4, #0
 80028ca:	4620      	mov	r0, r4
 80028cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028d0:	f000 f81a 	bl	8002908 <_malloc_usable_size_r>
 80028d4:	4285      	cmp	r5, r0
 80028d6:	4606      	mov	r6, r0
 80028d8:	d802      	bhi.n	80028e0 <_realloc_r+0x34>
 80028da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80028de:	d8f4      	bhi.n	80028ca <_realloc_r+0x1e>
 80028e0:	4629      	mov	r1, r5
 80028e2:	4640      	mov	r0, r8
 80028e4:	f7ff fc38 	bl	8002158 <_malloc_r>
 80028e8:	4607      	mov	r7, r0
 80028ea:	2800      	cmp	r0, #0
 80028ec:	d0ec      	beq.n	80028c8 <_realloc_r+0x1c>
 80028ee:	42b5      	cmp	r5, r6
 80028f0:	462a      	mov	r2, r5
 80028f2:	4621      	mov	r1, r4
 80028f4:	bf28      	it	cs
 80028f6:	4632      	movcs	r2, r6
 80028f8:	f7ff ffca 	bl	8002890 <memcpy>
 80028fc:	4621      	mov	r1, r4
 80028fe:	4640      	mov	r0, r8
 8002900:	f7ff fbbe 	bl	8002080 <_free_r>
 8002904:	463c      	mov	r4, r7
 8002906:	e7e0      	b.n	80028ca <_realloc_r+0x1e>

08002908 <_malloc_usable_size_r>:
 8002908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800290c:	1f18      	subs	r0, r3, #4
 800290e:	2b00      	cmp	r3, #0
 8002910:	bfbc      	itt	lt
 8002912:	580b      	ldrlt	r3, [r1, r0]
 8002914:	18c0      	addlt	r0, r0, r3
 8002916:	4770      	bx	lr

08002918 <_init>:
 8002918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291a:	bf00      	nop
 800291c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800291e:	bc08      	pop	{r3}
 8002920:	469e      	mov	lr, r3
 8002922:	4770      	bx	lr

08002924 <_fini>:
 8002924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002926:	bf00      	nop
 8002928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800292a:	bc08      	pop	{r3}
 800292c:	469e      	mov	lr, r3
 800292e:	4770      	bx	lr
