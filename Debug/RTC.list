
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004480  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08004610  08004610  00005610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004674  08004674  00006064  2**0
                  CONTENTS
  4 .ARM          00000008  08004674  08004674  00005674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800467c  0800467c  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800467c  0800467c  0000567c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004680  08004680  00005680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08004684  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006064  2**0
                  CONTENTS
 10 .bss          000001c8  20000064  20000064  00006064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000022c  2000022c  00006064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a22f  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000227f  00000000  00000000  000102c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000848  00000000  00000000  00012548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000615  00000000  00000000  00012d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022719  00000000  00000000  000133a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d285  00000000  00000000  00035abe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbf76  00000000  00000000  00042d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010ecb9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000236c  00000000  00000000  0010ecfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  00111068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080045f8 	.word	0x080045f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	080045f8 	.word	0x080045f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <DAC_init>:
/**
 * @brief Initialisation du composant et de tout ce qui est nécessaire à son fonctionnement
 * @param none
 * @retval none
 * */
void DAC_init(){
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	GPIOD->BSRR = 0x00000010; //RST component
 8000564:	4b48      	ldr	r3, [pc, #288]	@ (8000688 <DAC_init+0x128>)
 8000566:	2210      	movs	r2, #16
 8000568:	619a      	str	r2, [r3, #24]
	// ecrire 04 dans le registre 0xA0
	data[0]=0x04;
 800056a:	4b48      	ldr	r3, [pc, #288]	@ (800068c <DAC_init+0x12c>)
 800056c:	2204      	movs	r2, #4
 800056e:	701a      	strb	r2, [r3, #0]
	data[1]=0xA0;
 8000570:	4b46      	ldr	r3, [pc, #280]	@ (800068c <DAC_init+0x12c>)
 8000572:	22a0      	movs	r2, #160	@ 0xa0
 8000574:	705a      	strb	r2, [r3, #1]
	I2C_Master_Transmit(0x94,data,2);
 8000576:	2202      	movs	r2, #2
 8000578:	4944      	ldr	r1, [pc, #272]	@ (800068c <DAC_init+0x12c>)
 800057a:	2094      	movs	r0, #148	@ 0x94
 800057c:	f000 fb24 	bl	8000bc8 <I2C_Master_Transmit>
	// ecrire 06 dans le registre 0x87
	data[0]=0x06;
 8000580:	4b42      	ldr	r3, [pc, #264]	@ (800068c <DAC_init+0x12c>)
 8000582:	2206      	movs	r2, #6
 8000584:	701a      	strb	r2, [r3, #0]
	data[1]=0x87;
 8000586:	4b41      	ldr	r3, [pc, #260]	@ (800068c <DAC_init+0x12c>)
 8000588:	2287      	movs	r2, #135	@ 0x87
 800058a:	705a      	strb	r2, [r3, #1]
	I2C_Master_Transmit(0x94,data,2);
 800058c:	2202      	movs	r2, #2
 800058e:	493f      	ldr	r1, [pc, #252]	@ (800068c <DAC_init+0x12c>)
 8000590:	2094      	movs	r0, #148	@ 0x94
 8000592:	f000 fb19 	bl	8000bc8 <I2C_Master_Transmit>
	// écrire 0x99 dans le registre 0x00
	data[0]=0x00;
 8000596:	4b3d      	ldr	r3, [pc, #244]	@ (800068c <DAC_init+0x12c>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
	data[1]=0x99;
 800059c:	4b3b      	ldr	r3, [pc, #236]	@ (800068c <DAC_init+0x12c>)
 800059e:	2299      	movs	r2, #153	@ 0x99
 80005a0:	705a      	strb	r2, [r3, #1]
	I2C_Master_Transmit(I2C_DAC_Transmit,data,sendSize);
 80005a2:	4b3b      	ldr	r3, [pc, #236]	@ (8000690 <DAC_init+0x130>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	4a3b      	ldr	r2, [pc, #236]	@ (8000694 <DAC_init+0x134>)
 80005a8:	7812      	ldrb	r2, [r2, #0]
 80005aa:	4938      	ldr	r1, [pc, #224]	@ (800068c <DAC_init+0x12c>)
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fb0b 	bl	8000bc8 <I2C_Master_Transmit>
	// écrire 0x80 dans registre 0x47
	data[0]=0x47;
 80005b2:	4b36      	ldr	r3, [pc, #216]	@ (800068c <DAC_init+0x12c>)
 80005b4:	2247      	movs	r2, #71	@ 0x47
 80005b6:	701a      	strb	r2, [r3, #0]
	data[1]=0x80;
 80005b8:	4b34      	ldr	r3, [pc, #208]	@ (800068c <DAC_init+0x12c>)
 80005ba:	2280      	movs	r2, #128	@ 0x80
 80005bc:	705a      	strb	r2, [r3, #1]
	I2C_Master_Transmit(I2C_DAC_Transmit,data,sendSize);
 80005be:	4b34      	ldr	r3, [pc, #208]	@ (8000690 <DAC_init+0x130>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	4a34      	ldr	r2, [pc, #208]	@ (8000694 <DAC_init+0x134>)
 80005c4:	7812      	ldrb	r2, [r2, #0]
 80005c6:	4931      	ldr	r1, [pc, #196]	@ (800068c <DAC_init+0x12c>)
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fafd 	bl	8000bc8 <I2C_Master_Transmit>
	// écrire 1 dans le bit 7 du registre 32
	data[0] = 0x32;
 80005ce:	4b2f      	ldr	r3, [pc, #188]	@ (800068c <DAC_init+0x12c>)
 80005d0:	2232      	movs	r2, #50	@ 0x32
 80005d2:	701a      	strb	r2, [r3, #0]
	I2C_Master_Transmit(I2C_DAC_Transmit,data[0],1);
 80005d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000690 <DAC_init+0x130>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4a2c      	ldr	r2, [pc, #176]	@ (800068c <DAC_init+0x12c>)
 80005da:	7812      	ldrb	r2, [r2, #0]
 80005dc:	4611      	mov	r1, r2
 80005de:	2201      	movs	r2, #1
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 faf1 	bl	8000bc8 <I2C_Master_Transmit>
	I2C_Master_Receive(0x95,buffer,1);
 80005e6:	2201      	movs	r2, #1
 80005e8:	492b      	ldr	r1, [pc, #172]	@ (8000698 <DAC_init+0x138>)
 80005ea:	2095      	movs	r0, #149	@ 0x95
 80005ec:	f000 fb62 	bl	8000cb4 <I2C_Master_Receive>
	buffer[0] |= 10000000;
 80005f0:	4b29      	ldr	r3, [pc, #164]	@ (8000698 <DAC_init+0x138>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	b25b      	sxtb	r3, r3
 80005f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005fa:	b25b      	sxtb	r3, r3
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4b26      	ldr	r3, [pc, #152]	@ (8000698 <DAC_init+0x138>)
 8000600:	701a      	strb	r2, [r3, #0]
	data[1] = buffer[0];
 8000602:	4b25      	ldr	r3, [pc, #148]	@ (8000698 <DAC_init+0x138>)
 8000604:	781a      	ldrb	r2, [r3, #0]
 8000606:	4b21      	ldr	r3, [pc, #132]	@ (800068c <DAC_init+0x12c>)
 8000608:	705a      	strb	r2, [r3, #1]
	I2C_Master_Transmit(I2C_DAC_Transmit,data,sendSize);
 800060a:	4b21      	ldr	r3, [pc, #132]	@ (8000690 <DAC_init+0x130>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	4a21      	ldr	r2, [pc, #132]	@ (8000694 <DAC_init+0x134>)
 8000610:	7812      	ldrb	r2, [r2, #0]
 8000612:	491e      	ldr	r1, [pc, #120]	@ (800068c <DAC_init+0x12c>)
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fad7 	bl	8000bc8 <I2C_Master_Transmit>
	// écrire 0 dans le bit 7 du registre 32
	I2C_Master_Transmit(I2C_DAC_Transmit,data[0],1);
 800061a:	4b1d      	ldr	r3, [pc, #116]	@ (8000690 <DAC_init+0x130>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	4a1b      	ldr	r2, [pc, #108]	@ (800068c <DAC_init+0x12c>)
 8000620:	7812      	ldrb	r2, [r2, #0]
 8000622:	4611      	mov	r1, r2
 8000624:	2201      	movs	r2, #1
 8000626:	4618      	mov	r0, r3
 8000628:	f000 face 	bl	8000bc8 <I2C_Master_Transmit>
	I2C_Master_Receive(0x95,buffer,1);
 800062c:	2201      	movs	r2, #1
 800062e:	491a      	ldr	r1, [pc, #104]	@ (8000698 <DAC_init+0x138>)
 8000630:	2095      	movs	r0, #149	@ 0x95
 8000632:	f000 fb3f 	bl	8000cb4 <I2C_Master_Receive>
	buffer[0] &= 01111111;
 8000636:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <DAC_init+0x138>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	f003 0349 	and.w	r3, r3, #73	@ 0x49
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <DAC_init+0x138>)
 8000642:	701a      	strb	r2, [r3, #0]
	data[1]= buffer[0];
 8000644:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <DAC_init+0x138>)
 8000646:	781a      	ldrb	r2, [r3, #0]
 8000648:	4b10      	ldr	r3, [pc, #64]	@ (800068c <DAC_init+0x12c>)
 800064a:	705a      	strb	r2, [r3, #1]
	I2C_Master_Transmit(0x94,data,2);
 800064c:	2202      	movs	r2, #2
 800064e:	490f      	ldr	r1, [pc, #60]	@ (800068c <DAC_init+0x12c>)
 8000650:	2094      	movs	r0, #148	@ 0x94
 8000652:	f000 fab9 	bl	8000bc8 <I2C_Master_Transmit>
	// ecrire 0 dans le registre 0x0
	data[0]=0;
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <DAC_init+0x12c>)
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
	data[1]=0;
 800065c:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <DAC_init+0x12c>)
 800065e:	2200      	movs	r2, #0
 8000660:	705a      	strb	r2, [r3, #1]
	I2C_Master_Transmit(0x94,data,2);
 8000662:	2202      	movs	r2, #2
 8000664:	4909      	ldr	r1, [pc, #36]	@ (800068c <DAC_init+0x12c>)
 8000666:	2094      	movs	r0, #148	@ 0x94
 8000668:	f000 faae 	bl	8000bc8 <I2C_Master_Transmit>
	// ecrire 9E dans le registre 0x02
	data[0]=0x02;
 800066c:	4b07      	ldr	r3, [pc, #28]	@ (800068c <DAC_init+0x12c>)
 800066e:	2202      	movs	r2, #2
 8000670:	701a      	strb	r2, [r3, #0]
	data[1]=0x9E;
 8000672:	4b06      	ldr	r3, [pc, #24]	@ (800068c <DAC_init+0x12c>)
 8000674:	229e      	movs	r2, #158	@ 0x9e
 8000676:	705a      	strb	r2, [r3, #1]
	I2C_Master_Transmit(0x94,data,2);
 8000678:	2202      	movs	r2, #2
 800067a:	4904      	ldr	r1, [pc, #16]	@ (800068c <DAC_init+0x12c>)
 800067c:	2094      	movs	r0, #148	@ 0x94
 800067e:	f000 faa3 	bl	8000bc8 <I2C_Master_Transmit>
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40020c00 	.word	0x40020c00
 800068c:	20000080 	.word	0x20000080
 8000690:	20000001 	.word	0x20000001
 8000694:	20000000 	.word	0x20000000
 8000698:	20000084 	.word	0x20000084

0800069c <DAC_configurationBeep>:
/**
 * @brief Change la configurtion du bip généré
 * @param mode 0: aucun bip, 1 : 1 seul bip , 2 : bip alternant, 3 : bip continu
 * @retval none
 * */
void DAC_configurationBeep(uint8_t mode){
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
	data[0] = 0x1E;
 80006a6:	4b18      	ldr	r3, [pc, #96]	@ (8000708 <DAC_configurationBeep+0x6c>)
 80006a8:	221e      	movs	r2, #30
 80006aa:	701a      	strb	r2, [r3, #0]
	switch (mode){
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d81a      	bhi.n	80006e8 <DAC_configurationBeep+0x4c>
 80006b2:	a201      	add	r2, pc, #4	@ (adr r2, 80006b8 <DAC_configurationBeep+0x1c>)
 80006b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b8:	080006c9 	.word	0x080006c9
 80006bc:	080006d1 	.word	0x080006d1
 80006c0:	080006d9 	.word	0x080006d9
 80006c4:	080006e1 	.word	0x080006e1
	case 0:
		data[1] = 0x00; //aucun bip
 80006c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <DAC_configurationBeep+0x6c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	705a      	strb	r2, [r3, #1]
		break;
 80006ce:	e00e      	b.n	80006ee <DAC_configurationBeep+0x52>
	case 1:
		data[1] = 0x40; //1 seul bip
 80006d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <DAC_configurationBeep+0x6c>)
 80006d2:	2240      	movs	r2, #64	@ 0x40
 80006d4:	705a      	strb	r2, [r3, #1]
		break;
 80006d6:	e00a      	b.n	80006ee <DAC_configurationBeep+0x52>
	case 2:
		data[1] = 0x80; //bip alternant
 80006d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <DAC_configurationBeep+0x6c>)
 80006da:	2280      	movs	r2, #128	@ 0x80
 80006dc:	705a      	strb	r2, [r3, #1]
		break;
 80006de:	e006      	b.n	80006ee <DAC_configurationBeep+0x52>
	case 3:
		data[1] = 0xC0; //bip continu
 80006e0:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <DAC_configurationBeep+0x6c>)
 80006e2:	22c0      	movs	r2, #192	@ 0xc0
 80006e4:	705a      	strb	r2, [r3, #1]
		break;
 80006e6:	e002      	b.n	80006ee <DAC_configurationBeep+0x52>
	default:
		data[1] = 0xC0;
 80006e8:	4b07      	ldr	r3, [pc, #28]	@ (8000708 <DAC_configurationBeep+0x6c>)
 80006ea:	22c0      	movs	r2, #192	@ 0xc0
 80006ec:	705a      	strb	r2, [r3, #1]
	}
	I2C_Master_Transmit(I2C_DAC_Transmit,data,sendSize);
 80006ee:	4b07      	ldr	r3, [pc, #28]	@ (800070c <DAC_configurationBeep+0x70>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	4a07      	ldr	r2, [pc, #28]	@ (8000710 <DAC_configurationBeep+0x74>)
 80006f4:	7812      	ldrb	r2, [r2, #0]
 80006f6:	4904      	ldr	r1, [pc, #16]	@ (8000708 <DAC_configurationBeep+0x6c>)
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 fa65 	bl	8000bc8 <I2C_Master_Transmit>
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000080 	.word	0x20000080
 800070c:	20000001 	.word	0x20000001
 8000710:	20000000 	.word	0x20000000

08000714 <DAC_changeVolume>:
/**
 * @brief change le volume du bip
 * @param 1 : atténuation de 6dB, 0 : augmentation de 6dB
 * @retval none
 * */
void DAC_changeVolume(uint8_t volume){
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
	data[0] = 0x1D;
 800071e:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <DAC_changeVolume+0x6c>)
 8000720:	221d      	movs	r2, #29
 8000722:	701a      	strb	r2, [r3, #0]
	uint8_t buf[8];
	I2C_Master_Transmit(I2C_DAC_Transmit,data,1);
 8000724:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <DAC_changeVolume+0x70>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2201      	movs	r2, #1
 800072a:	4915      	ldr	r1, [pc, #84]	@ (8000780 <DAC_changeVolume+0x6c>)
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fa4b 	bl	8000bc8 <I2C_Master_Transmit>
	I2C_Master_Receive(0x95,buf,1);
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	2201      	movs	r2, #1
 8000738:	4619      	mov	r1, r3
 800073a:	2095      	movs	r0, #149	@ 0x95
 800073c:	f000 faba 	bl	8000cb4 <I2C_Master_Receive>
	if (volume == 0) { //aténuation de 6dB
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d108      	bne.n	8000758 <DAC_changeVolume+0x44>
		buf[0] &= 11100000;
 8000746:	7a3b      	ldrb	r3, [r7, #8]
 8000748:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800074c:	b2db      	uxtb	r3, r3
 800074e:	723b      	strb	r3, [r7, #8]
		data[1] = buf[0];
 8000750:	7a3a      	ldrb	r2, [r7, #8]
 8000752:	4b0b      	ldr	r3, [pc, #44]	@ (8000780 <DAC_changeVolume+0x6c>)
 8000754:	705a      	strb	r2, [r3, #1]
 8000756:	e007      	b.n	8000768 <DAC_changeVolume+0x54>
	} else { //augmentation de 6dB
		buf[0] |= 00000110;
 8000758:	7a3b      	ldrb	r3, [r7, #8]
 800075a:	f043 0348 	orr.w	r3, r3, #72	@ 0x48
 800075e:	b2db      	uxtb	r3, r3
 8000760:	723b      	strb	r3, [r7, #8]
		data[1] = buf[0];
 8000762:	7a3a      	ldrb	r2, [r7, #8]
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <DAC_changeVolume+0x6c>)
 8000766:	705a      	strb	r2, [r3, #1]
	}
	I2C_Master_Transmit(I2C_DAC_Transmit,data,sendSize);
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <DAC_changeVolume+0x70>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	4a06      	ldr	r2, [pc, #24]	@ (8000788 <DAC_changeVolume+0x74>)
 800076e:	7812      	ldrb	r2, [r2, #0]
 8000770:	4903      	ldr	r1, [pc, #12]	@ (8000780 <DAC_changeVolume+0x6c>)
 8000772:	4618      	mov	r0, r3
 8000774:	f000 fa28 	bl	8000bc8 <I2C_Master_Transmit>
}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000080 	.word	0x20000080
 8000784:	20000001 	.word	0x20000001
 8000788:	20000000 	.word	0x20000000

0800078c <DAC_freq_set>:
/**
 * @brief change la fréquence du signal sonore
 * @param frequency 0 : low-pitch, 1 : medium-pitch, 2 : high-pitch
 * @retval none
 * */
void DAC_freq_set(uint8_t frequency){
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2];
	uint8_t buffer[1];
	switch (frequency){
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b02      	cmp	r3, #2
 800079a:	d040      	beq.n	800081e <DAC_freq_set+0x92>
 800079c:	2b02      	cmp	r3, #2
 800079e:	dc5b      	bgt.n	8000858 <DAC_freq_set+0xcc>
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d002      	beq.n	80007aa <DAC_freq_set+0x1e>
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d01d      	beq.n	80007e4 <DAC_freq_set+0x58>
 80007a8:	e056      	b.n	8000858 <DAC_freq_set+0xcc>
	case 0: //low-pitch
		I2C_Master_Transmit(0x94,0x1C,1);
 80007aa:	2201      	movs	r2, #1
 80007ac:	211c      	movs	r1, #28
 80007ae:	2094      	movs	r0, #148	@ 0x94
 80007b0:	f000 fa0a 	bl	8000bc8 <I2C_Master_Transmit>
		I2C_Master_Receive(0x95,buffer,1);
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	2201      	movs	r2, #1
 80007ba:	4619      	mov	r1, r3
 80007bc:	2095      	movs	r0, #149	@ 0x95
 80007be:	f000 fa79 	bl	8000cb4 <I2C_Master_Receive>
		buffer[0] |= 0x10;
 80007c2:	7a3b      	ldrb	r3, [r7, #8]
 80007c4:	f043 0310 	orr.w	r3, r3, #16
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	723b      	strb	r3, [r7, #8]
		data[0]= 0x1C;
 80007cc:	231c      	movs	r3, #28
 80007ce:	733b      	strb	r3, [r7, #12]
		data[1]= buffer[0];
 80007d0:	7a3b      	ldrb	r3, [r7, #8]
 80007d2:	737b      	strb	r3, [r7, #13]
		I2C_Master_Transmit(0x94,data,2);
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2202      	movs	r2, #2
 80007da:	4619      	mov	r1, r3
 80007dc:	2094      	movs	r0, #148	@ 0x94
 80007de:	f000 f9f3 	bl	8000bc8 <I2C_Master_Transmit>
		break;
 80007e2:	e056      	b.n	8000892 <DAC_freq_set+0x106>
	case 1: //medium-pitch
		I2C_Master_Transmit(0x94,0x1C,1);
 80007e4:	2201      	movs	r2, #1
 80007e6:	211c      	movs	r1, #28
 80007e8:	2094      	movs	r0, #148	@ 0x94
 80007ea:	f000 f9ed 	bl	8000bc8 <I2C_Master_Transmit>
		I2C_Master_Receive(0x95,buffer,1);
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	2201      	movs	r2, #1
 80007f4:	4619      	mov	r1, r3
 80007f6:	2095      	movs	r0, #149	@ 0x95
 80007f8:	f000 fa5c 	bl	8000cb4 <I2C_Master_Receive>
		buffer[0] |= 0x80;
 80007fc:	7a3b      	ldrb	r3, [r7, #8]
 80007fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000802:	b2db      	uxtb	r3, r3
 8000804:	723b      	strb	r3, [r7, #8]
		data[0]= 0x1C;
 8000806:	231c      	movs	r3, #28
 8000808:	733b      	strb	r3, [r7, #12]
		data[1]= buffer[0];
 800080a:	7a3b      	ldrb	r3, [r7, #8]
 800080c:	737b      	strb	r3, [r7, #13]
		I2C_Master_Transmit(0x94,data,2);
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	2202      	movs	r2, #2
 8000814:	4619      	mov	r1, r3
 8000816:	2094      	movs	r0, #148	@ 0x94
 8000818:	f000 f9d6 	bl	8000bc8 <I2C_Master_Transmit>
		break;
 800081c:	e039      	b.n	8000892 <DAC_freq_set+0x106>
	case 2: //high-pitch
		I2C_Master_Transmit(0x94,0x1C,1);
 800081e:	2201      	movs	r2, #1
 8000820:	211c      	movs	r1, #28
 8000822:	2094      	movs	r0, #148	@ 0x94
 8000824:	f000 f9d0 	bl	8000bc8 <I2C_Master_Transmit>
		I2C_Master_Receive(0x95,buffer,1);
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	2201      	movs	r2, #1
 800082e:	4619      	mov	r1, r3
 8000830:	2095      	movs	r0, #149	@ 0x95
 8000832:	f000 fa3f 	bl	8000cb4 <I2C_Master_Receive>
		buffer[0] |= 0xF0;
 8000836:	7a3b      	ldrb	r3, [r7, #8]
 8000838:	f063 030f 	orn	r3, r3, #15
 800083c:	b2db      	uxtb	r3, r3
 800083e:	723b      	strb	r3, [r7, #8]
		data[0]= 0x1C;
 8000840:	231c      	movs	r3, #28
 8000842:	733b      	strb	r3, [r7, #12]
		data[1]= buffer[0];
 8000844:	7a3b      	ldrb	r3, [r7, #8]
 8000846:	737b      	strb	r3, [r7, #13]
		I2C_Master_Transmit(0x94,data,2);
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	2202      	movs	r2, #2
 800084e:	4619      	mov	r1, r3
 8000850:	2094      	movs	r0, #148	@ 0x94
 8000852:	f000 f9b9 	bl	8000bc8 <I2C_Master_Transmit>
		break;
 8000856:	e01c      	b.n	8000892 <DAC_freq_set+0x106>
	default : //medium-pitch
		I2C_Master_Transmit(0x94,0x1C,1);
 8000858:	2201      	movs	r2, #1
 800085a:	211c      	movs	r1, #28
 800085c:	2094      	movs	r0, #148	@ 0x94
 800085e:	f000 f9b3 	bl	8000bc8 <I2C_Master_Transmit>
		I2C_Master_Receive(0x95,buffer,1);
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	2201      	movs	r2, #1
 8000868:	4619      	mov	r1, r3
 800086a:	2095      	movs	r0, #149	@ 0x95
 800086c:	f000 fa22 	bl	8000cb4 <I2C_Master_Receive>
		buffer[0] |= 0x80;
 8000870:	7a3b      	ldrb	r3, [r7, #8]
 8000872:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000876:	b2db      	uxtb	r3, r3
 8000878:	723b      	strb	r3, [r7, #8]
		data[0]= 0x1C;
 800087a:	231c      	movs	r3, #28
 800087c:	733b      	strb	r3, [r7, #12]
		data[1]= buffer[0];
 800087e:	7a3b      	ldrb	r3, [r7, #8]
 8000880:	737b      	strb	r3, [r7, #13]
		I2C_Master_Transmit(0x94,data,2);
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2202      	movs	r2, #2
 8000888:	4619      	mov	r1, r3
 800088a:	2094      	movs	r0, #148	@ 0x94
 800088c:	f000 f99c 	bl	8000bc8 <I2C_Master_Transmit>
		break;
 8000890:	bf00      	nop
	}
}
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <DAC_OnTime>:
/**
 * @brief Change la durée de ontime (temps de génération du bip)
 * @param ontime 0 : short, 1 : medium, 2 : long
 * @retval none
 * */
void DAC_OnTime(uint8_t ontime){
 800089a:	b580      	push	{r7, lr}
 800089c:	b084      	sub	sp, #16
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2];
	uint8_t buffer[1];
	switch (ontime){
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d040      	beq.n	800092c <DAC_OnTime+0x92>
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	dc5b      	bgt.n	8000966 <DAC_OnTime+0xcc>
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d002      	beq.n	80008b8 <DAC_OnTime+0x1e>
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d01d      	beq.n	80008f2 <DAC_OnTime+0x58>
 80008b6:	e056      	b.n	8000966 <DAC_OnTime+0xcc>
	case 0: //short
		I2C_Master_Transmit(0x94,0x1C,1);
 80008b8:	2201      	movs	r2, #1
 80008ba:	211c      	movs	r1, #28
 80008bc:	2094      	movs	r0, #148	@ 0x94
 80008be:	f000 f983 	bl	8000bc8 <I2C_Master_Transmit>
		I2C_Master_Receive(0x95,buffer,1);
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	2201      	movs	r2, #1
 80008c8:	4619      	mov	r1, r3
 80008ca:	2095      	movs	r0, #149	@ 0x95
 80008cc:	f000 f9f2 	bl	8000cb4 <I2C_Master_Receive>
		buffer[0] |= 1;
 80008d0:	7a3b      	ldrb	r3, [r7, #8]
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	723b      	strb	r3, [r7, #8]
		data[0]= 0x1C;
 80008da:	231c      	movs	r3, #28
 80008dc:	733b      	strb	r3, [r7, #12]
		data[1]= buffer[0];
 80008de:	7a3b      	ldrb	r3, [r7, #8]
 80008e0:	737b      	strb	r3, [r7, #13]
		I2C_Master_Transmit(0x94,data,2);
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	2202      	movs	r2, #2
 80008e8:	4619      	mov	r1, r3
 80008ea:	2094      	movs	r0, #148	@ 0x94
 80008ec:	f000 f96c 	bl	8000bc8 <I2C_Master_Transmit>
		break;
 80008f0:	e056      	b.n	80009a0 <DAC_OnTime+0x106>
	case 1: //medium
		I2C_Master_Transmit(0x94,0x1C,1);
 80008f2:	2201      	movs	r2, #1
 80008f4:	211c      	movs	r1, #28
 80008f6:	2094      	movs	r0, #148	@ 0x94
 80008f8:	f000 f966 	bl	8000bc8 <I2C_Master_Transmit>
		I2C_Master_Receive(0x95,buffer,1);
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	2201      	movs	r2, #1
 8000902:	4619      	mov	r1, r3
 8000904:	2095      	movs	r0, #149	@ 0x95
 8000906:	f000 f9d5 	bl	8000cb4 <I2C_Master_Receive>
		buffer[0] |= 0x07;
 800090a:	7a3b      	ldrb	r3, [r7, #8]
 800090c:	f043 0307 	orr.w	r3, r3, #7
 8000910:	b2db      	uxtb	r3, r3
 8000912:	723b      	strb	r3, [r7, #8]
		data[0]= 0x1C;
 8000914:	231c      	movs	r3, #28
 8000916:	733b      	strb	r3, [r7, #12]
		data[1]= buffer[0];
 8000918:	7a3b      	ldrb	r3, [r7, #8]
 800091a:	737b      	strb	r3, [r7, #13]
		I2C_Master_Transmit(0x94,data,2);
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	2202      	movs	r2, #2
 8000922:	4619      	mov	r1, r3
 8000924:	2094      	movs	r0, #148	@ 0x94
 8000926:	f000 f94f 	bl	8000bc8 <I2C_Master_Transmit>
		break;
 800092a:	e039      	b.n	80009a0 <DAC_OnTime+0x106>
	case 2: //long
		I2C_Master_Transmit(0x94,0x1C,1);
 800092c:	2201      	movs	r2, #1
 800092e:	211c      	movs	r1, #28
 8000930:	2094      	movs	r0, #148	@ 0x94
 8000932:	f000 f949 	bl	8000bc8 <I2C_Master_Transmit>
		I2C_Master_Receive(0x95,buffer,1);
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	2201      	movs	r2, #1
 800093c:	4619      	mov	r1, r3
 800093e:	2095      	movs	r0, #149	@ 0x95
 8000940:	f000 f9b8 	bl	8000cb4 <I2C_Master_Receive>
		buffer[0] |= 0x0F;
 8000944:	7a3b      	ldrb	r3, [r7, #8]
 8000946:	f043 030f 	orr.w	r3, r3, #15
 800094a:	b2db      	uxtb	r3, r3
 800094c:	723b      	strb	r3, [r7, #8]
		data[0]= 0x1C;
 800094e:	231c      	movs	r3, #28
 8000950:	733b      	strb	r3, [r7, #12]
		data[1]= buffer[0];
 8000952:	7a3b      	ldrb	r3, [r7, #8]
 8000954:	737b      	strb	r3, [r7, #13]
		I2C_Master_Transmit(0x94,data,2);
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	2202      	movs	r2, #2
 800095c:	4619      	mov	r1, r3
 800095e:	2094      	movs	r0, #148	@ 0x94
 8000960:	f000 f932 	bl	8000bc8 <I2C_Master_Transmit>
		break;
 8000964:	e01c      	b.n	80009a0 <DAC_OnTime+0x106>
	default : //short
		I2C_Master_Transmit(0x94,0x1C,1);
 8000966:	2201      	movs	r2, #1
 8000968:	211c      	movs	r1, #28
 800096a:	2094      	movs	r0, #148	@ 0x94
 800096c:	f000 f92c 	bl	8000bc8 <I2C_Master_Transmit>
		I2C_Master_Receive(0x95,buffer,1);
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	2201      	movs	r2, #1
 8000976:	4619      	mov	r1, r3
 8000978:	2095      	movs	r0, #149	@ 0x95
 800097a:	f000 f99b 	bl	8000cb4 <I2C_Master_Receive>
		buffer[0] |= 1;
 800097e:	7a3b      	ldrb	r3, [r7, #8]
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	b2db      	uxtb	r3, r3
 8000986:	723b      	strb	r3, [r7, #8]
		data[0]= 0x1C;
 8000988:	231c      	movs	r3, #28
 800098a:	733b      	strb	r3, [r7, #12]
		data[1]= buffer[0];
 800098c:	7a3b      	ldrb	r3, [r7, #8]
 800098e:	737b      	strb	r3, [r7, #13]
		I2C_Master_Transmit(0x94,data,2);
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	2202      	movs	r2, #2
 8000996:	4619      	mov	r1, r3
 8000998:	2094      	movs	r0, #148	@ 0x94
 800099a:	f000 f915 	bl	8000bc8 <I2C_Master_Transmit>
		break;
 800099e:	bf00      	nop
	}
}
 80009a0:	bf00      	nop
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <DAC_OffTime>:
/**
 * @brief change la durée de offtime (durée pendant laquelle aucun bip n'est généré)
 * @param ontime 0 : short, 1 : medium, 2 : long
 * @retval none
 * */
void DAC_OffTime(uint8_t offtime){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2];
	uint8_t buffer[1];
	switch (offtime){
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d040      	beq.n	8000a3a <DAC_OffTime+0x92>
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	dc5b      	bgt.n	8000a74 <DAC_OffTime+0xcc>
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d002      	beq.n	80009c6 <DAC_OffTime+0x1e>
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d01d      	beq.n	8000a00 <DAC_OffTime+0x58>
 80009c4:	e056      	b.n	8000a74 <DAC_OffTime+0xcc>
	case 0: //short
		I2C_Master_Transmit(0x94,0x1D,1);
 80009c6:	2201      	movs	r2, #1
 80009c8:	211d      	movs	r1, #29
 80009ca:	2094      	movs	r0, #148	@ 0x94
 80009cc:	f000 f8fc 	bl	8000bc8 <I2C_Master_Transmit>
		I2C_Master_Receive(0x95,buffer,1);
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	2201      	movs	r2, #1
 80009d6:	4619      	mov	r1, r3
 80009d8:	2095      	movs	r0, #149	@ 0x95
 80009da:	f000 f96b 	bl	8000cb4 <I2C_Master_Receive>
		buffer[0] &=0x0F ;
 80009de:	7a3b      	ldrb	r3, [r7, #8]
 80009e0:	f003 030f 	and.w	r3, r3, #15
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	723b      	strb	r3, [r7, #8]
		data[0]= 0x1D;
 80009e8:	231d      	movs	r3, #29
 80009ea:	733b      	strb	r3, [r7, #12]
		data[1]= buffer[0];
 80009ec:	7a3b      	ldrb	r3, [r7, #8]
 80009ee:	737b      	strb	r3, [r7, #13]
		I2C_Master_Transmit(0x94,data,2);
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	2202      	movs	r2, #2
 80009f6:	4619      	mov	r1, r3
 80009f8:	2094      	movs	r0, #148	@ 0x94
 80009fa:	f000 f8e5 	bl	8000bc8 <I2C_Master_Transmit>
		break;
 80009fe:	e056      	b.n	8000aae <DAC_OffTime+0x106>
	case 1: //medium
		I2C_Master_Transmit(0x94,0x1D,1);
 8000a00:	2201      	movs	r2, #1
 8000a02:	211d      	movs	r1, #29
 8000a04:	2094      	movs	r0, #148	@ 0x94
 8000a06:	f000 f8df 	bl	8000bc8 <I2C_Master_Transmit>
		I2C_Master_Receive(0x95,buffer,1);
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	2201      	movs	r2, #1
 8000a10:	4619      	mov	r1, r3
 8000a12:	2095      	movs	r0, #149	@ 0x95
 8000a14:	f000 f94e 	bl	8000cb4 <I2C_Master_Receive>
		buffer[0] |= 0x30;
 8000a18:	7a3b      	ldrb	r3, [r7, #8]
 8000a1a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	723b      	strb	r3, [r7, #8]
		data[0]= 0x1D;
 8000a22:	231d      	movs	r3, #29
 8000a24:	733b      	strb	r3, [r7, #12]
		data[1]= buffer[0];
 8000a26:	7a3b      	ldrb	r3, [r7, #8]
 8000a28:	737b      	strb	r3, [r7, #13]
		I2C_Master_Transmit(0x94,data,2);
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	2202      	movs	r2, #2
 8000a30:	4619      	mov	r1, r3
 8000a32:	2094      	movs	r0, #148	@ 0x94
 8000a34:	f000 f8c8 	bl	8000bc8 <I2C_Master_Transmit>
		break;
 8000a38:	e039      	b.n	8000aae <DAC_OffTime+0x106>
	case 2: //long
		I2C_Master_Transmit(0x94,0x1D,1);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	211d      	movs	r1, #29
 8000a3e:	2094      	movs	r0, #148	@ 0x94
 8000a40:	f000 f8c2 	bl	8000bc8 <I2C_Master_Transmit>
		I2C_Master_Receive(0x95,buffer,1);
 8000a44:	f107 0308 	add.w	r3, r7, #8
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	2095      	movs	r0, #149	@ 0x95
 8000a4e:	f000 f931 	bl	8000cb4 <I2C_Master_Receive>
		buffer[0] |= 0x70;
 8000a52:	7a3b      	ldrb	r3, [r7, #8]
 8000a54:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	723b      	strb	r3, [r7, #8]
		data[0]= 0x1D;
 8000a5c:	231d      	movs	r3, #29
 8000a5e:	733b      	strb	r3, [r7, #12]
		data[1]= buffer[0];
 8000a60:	7a3b      	ldrb	r3, [r7, #8]
 8000a62:	737b      	strb	r3, [r7, #13]
		I2C_Master_Transmit(0x94,data,2);
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2202      	movs	r2, #2
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	2094      	movs	r0, #148	@ 0x94
 8000a6e:	f000 f8ab 	bl	8000bc8 <I2C_Master_Transmit>
		break;
 8000a72:	e01c      	b.n	8000aae <DAC_OffTime+0x106>
	default : //short
		I2C_Master_Transmit(0x94,0x1D,1);
 8000a74:	2201      	movs	r2, #1
 8000a76:	211d      	movs	r1, #29
 8000a78:	2094      	movs	r0, #148	@ 0x94
 8000a7a:	f000 f8a5 	bl	8000bc8 <I2C_Master_Transmit>
		I2C_Master_Receive(0x95,buffer,1);
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	2201      	movs	r2, #1
 8000a84:	4619      	mov	r1, r3
 8000a86:	2095      	movs	r0, #149	@ 0x95
 8000a88:	f000 f914 	bl	8000cb4 <I2C_Master_Receive>
		buffer[0] &= 0x0F;
 8000a8c:	7a3b      	ldrb	r3, [r7, #8]
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	723b      	strb	r3, [r7, #8]
		data[0]= 0x1D;
 8000a96:	231d      	movs	r3, #29
 8000a98:	733b      	strb	r3, [r7, #12]
		data[1]= buffer[0];
 8000a9a:	7a3b      	ldrb	r3, [r7, #8]
 8000a9c:	737b      	strb	r3, [r7, #13]
		I2C_Master_Transmit(0x94,data,2);
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	2094      	movs	r0, #148	@ 0x94
 8000aa8:	f000 f88e 	bl	8000bc8 <I2C_Master_Transmit>
		break;
 8000aac:	bf00      	nop
		}
}
 8000aae:	bf00      	nop
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <DAC_timed_alarm>:
/**
 * @brief emission d'un beep pendant un durée spécifié - ! Fonction bloquante !
 * @param ms_time durée pendant laquelle l'utilisateur veut générer un beep
 * @retval none
 * */
void DAC_timed_alarm(uint16_t ms_time){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	80fb      	strh	r3, [r7, #6]
	uint32_t current_tick;
	current_tick=HAL_GetTick();
 8000ac2:	f001 fa61 	bl	8001f88 <HAL_GetTick>
 8000ac6:	60f8      	str	r0, [r7, #12]
	I2S_buffer[0] = 0xAAAA;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <DAC_timed_alarm+0x44>)
 8000aca:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8000ace:	801a      	strh	r2, [r3, #0]
	while(HAL_GetTick()-current_tick<ms_time){
 8000ad0:	e007      	b.n	8000ae2 <DAC_timed_alarm+0x2a>
		HAL_I2S_Transmit(&hi2s3, I2S_buffer, 1, ms_time/2);
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	085b      	lsrs	r3, r3, #1
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4908      	ldr	r1, [pc, #32]	@ (8000afc <DAC_timed_alarm+0x44>)
 8000adc:	4808      	ldr	r0, [pc, #32]	@ (8000b00 <DAC_timed_alarm+0x48>)
 8000ade:	f001 febb 	bl	8002858 <HAL_I2S_Transmit>
	while(HAL_GetTick()-current_tick<ms_time){
 8000ae2:	f001 fa51 	bl	8001f88 <HAL_GetTick>
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	1ad2      	subs	r2, r2, r3
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d3ef      	bcc.n	8000ad2 <DAC_timed_alarm+0x1a>
	}
}
 8000af2:	bf00      	nop
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000088 	.word	0x20000088
 8000b00:	2000008c 	.word	0x2000008c

08000b04 <init_I2C1>:
 *      Author: aravey
 */

#include "i2c.h"

void init_I2C1(void) {
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

	/* Peripheral clock enable */
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000b08:	4b2c      	ldr	r3, [pc, #176]	@ (8000bbc <init_I2C1+0xb8>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0c:	4a2b      	ldr	r2, [pc, #172]	@ (8000bbc <init_I2C1+0xb8>)
 8000b0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b12:	6413      	str	r3, [r2, #64]	@ 0x40

	/* GPIOB clock enable */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000b14:	4b29      	ldr	r3, [pc, #164]	@ (8000bbc <init_I2C1+0xb8>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b18:	4a28      	ldr	r2, [pc, #160]	@ (8000bbc <init_I2C1+0xb8>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	6313      	str	r3, [r2, #48]	@ 0x30

	/**I2C1 GPIO Configuration
	 PB6     ------> I2C1_SCL
	 PB9     ------> I2C1_SDA
	 */
	GPIOB->MODER |= GPIO_MODER_MODER6_Msk | GPIO_MODER_MODER9_Msk;
 8000b20:	4b27      	ldr	r3, [pc, #156]	@ (8000bc0 <init_I2C1+0xbc>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a26      	ldr	r2, [pc, #152]	@ (8000bc0 <init_I2C1+0xbc>)
 8000b26:	f443 2343 	orr.w	r3, r3, #798720	@ 0xc3000
 8000b2a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODER6_0 | GPIO_MODER_MODER9_0); // Enable alternative function mode
 8000b2c:	4b24      	ldr	r3, [pc, #144]	@ (8000bc0 <init_I2C1+0xbc>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a23      	ldr	r2, [pc, #140]	@ (8000bc0 <init_I2C1+0xbc>)
 8000b32:	f423 2382 	bic.w	r3, r3, #266240	@ 0x41000
 8000b36:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] |= GPIO_AFRL_AFRL6_2;
 8000b38:	4b21      	ldr	r3, [pc, #132]	@ (8000bc0 <init_I2C1+0xbc>)
 8000b3a:	6a1b      	ldr	r3, [r3, #32]
 8000b3c:	4a20      	ldr	r2, [pc, #128]	@ (8000bc0 <init_I2C1+0xbc>)
 8000b3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b42:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[1] |= GPIO_AFRH_AFRH1_2;
 8000b44:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc0 <init_I2C1+0xbc>)
 8000b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b48:	4a1d      	ldr	r2, [pc, #116]	@ (8000bc0 <init_I2C1+0xbc>)
 8000b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b4e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED6_Msk | GPIO_OSPEEDR_OSPEED9_Msk;
 8000b50:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc0 <init_I2C1+0xbc>)
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	4a1a      	ldr	r2, [pc, #104]	@ (8000bc0 <init_I2C1+0xbc>)
 8000b56:	f443 2343 	orr.w	r3, r3, #798720	@ 0xc3000
 8000b5a:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER |= GPIO_OTYPER_OT6 | GPIO_OTYPER_OT9;
 8000b5c:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <init_I2C1+0xbc>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	4a17      	ldr	r2, [pc, #92]	@ (8000bc0 <init_I2C1+0xbc>)
 8000b62:	f443 7310 	orr.w	r3, r3, #576	@ 0x240
 8000b66:	6053      	str	r3, [r2, #4]

	//Reset I2C peripheral
	I2C1->CR1 |= 0x8000;
 8000b68:	4b16      	ldr	r3, [pc, #88]	@ (8000bc4 <init_I2C1+0xc0>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a15      	ldr	r2, [pc, #84]	@ (8000bc4 <init_I2C1+0xc0>)
 8000b6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b72:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= 0x7FFF;
 8000b74:	4b13      	ldr	r3, [pc, #76]	@ (8000bc4 <init_I2C1+0xc0>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a12      	ldr	r2, [pc, #72]	@ (8000bc4 <init_I2C1+0xc0>)
 8000b7a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b7e:	6013      	str	r3, [r2, #0]

	//Set I2C mode, no SMB, no PEC, no ARP
	I2C1->CR1 = 0x0000;
 8000b80:	4b10      	ldr	r3, [pc, #64]	@ (8000bc4 <init_I2C1+0xc0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]

	//APB1 = 42Mhz => FREQ=42; no interrupts
	I2C1->CR2 = 0x002A;
 8000b86:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <init_I2C1+0xc0>)
 8000b88:	222a      	movs	r2, #42	@ 0x2a
 8000b8a:	605a      	str	r2, [r3, #4]

	//No slave mode, addr sets to 0
	I2C1->OAR1 = 0x0;
 8000b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc4 <init_I2C1+0xc0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
	I2C1->OAR2 = 0;
 8000b92:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <init_I2C1+0xc0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]

	//Standard mode (Sm), Duty cycle = 2 (50%), CLock 100kHz=5000ns (one semi period) -> CCR= 42000000 * 0.000005000 = 210
	I2C1->CCR = 0x00D2;
 8000b98:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc4 <init_I2C1+0xc0>)
 8000b9a:	22d2      	movs	r2, #210	@ 0xd2
 8000b9c:	61da      	str	r2, [r3, #28]

	// TRISE set to 1000ns -> 42Mhz = 23.8ns : (1000/23.8)+1 = 43
	I2C1->TRISE = 0x002B;
 8000b9e:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <init_I2C1+0xc0>)
 8000ba0:	222b      	movs	r2, #43	@ 0x2b
 8000ba2:	621a      	str	r2, [r3, #32]

	//Start I2C
	I2C1->CR1 |= 0x0001;
 8000ba4:	4b07      	ldr	r3, [pc, #28]	@ (8000bc4 <init_I2C1+0xc0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a06      	ldr	r2, [pc, #24]	@ (8000bc4 <init_I2C1+0xc0>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020400 	.word	0x40020400
 8000bc4:	40005400 	.word	0x40005400

08000bc8 <I2C_Master_Transmit>:

void I2C_Master_Transmit(uint8_t addr, uint8_t *buffer, uint8_t size) {
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	71bb      	strb	r3, [r7, #6]

	uint8_t i = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	73fb      	strb	r3, [r7, #15]

	//Wait for I2C bus to be free (not busy)
	while (I2C1->SR2 & 0x2)
 8000bdc:	bf00      	nop
 8000bde:	4b34      	ldr	r3, [pc, #208]	@ (8000cb0 <I2C_Master_Transmit+0xe8>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d1f9      	bne.n	8000bde <I2C_Master_Transmit+0x16>
		;

	//Send a start
	I2C1->CR1 |= 0x0100;
 8000bea:	4b31      	ldr	r3, [pc, #196]	@ (8000cb0 <I2C_Master_Transmit+0xe8>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a30      	ldr	r2, [pc, #192]	@ (8000cb0 <I2C_Master_Transmit+0xe8>)
 8000bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bf4:	6013      	str	r3, [r2, #0]
	// wait for start to finish -> SB = 1
	while (!(I2C1->SR1 & 0x1))
 8000bf6:	bf00      	nop
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb0 <I2C_Master_Transmit+0xe8>)
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d0f9      	beq.n	8000bf8 <I2C_Master_Transmit+0x30>
		;
	I2C1->DR = addr;
 8000c04:	4a2a      	ldr	r2, [pc, #168]	@ (8000cb0 <I2C_Master_Transmit+0xe8>)
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	6113      	str	r3, [r2, #16]
	//Wait until ADDR flag is set
	while (!(I2C1->SR1 & 0x2))
 8000c0a:	bf00      	nop
 8000c0c:	4b28      	ldr	r3, [pc, #160]	@ (8000cb0 <I2C_Master_Transmit+0xe8>)
 8000c0e:	695b      	ldr	r3, [r3, #20]
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d0f9      	beq.n	8000c0c <I2C_Master_Transmit+0x44>
		;
	//Clear Addr flag (by reading SR1 then SR2)
	if (I2C1->SR1 == 0x0)
 8000c18:	4b25      	ldr	r3, [pc, #148]	@ (8000cb0 <I2C_Master_Transmit+0xe8>)
 8000c1a:	695b      	ldr	r3, [r3, #20]
		;
	if (I2C1->SR2 == 0x0)
 8000c1c:	4b24      	ldr	r3, [pc, #144]	@ (8000cb0 <I2C_Master_Transmit+0xe8>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
		;

	while (size > 0) {
 8000c20:	e027      	b.n	8000c72 <I2C_Master_Transmit+0xaa>
		// Wait for Txe (register Empty)
		while (!(I2C1->SR1 & 0x0080))
 8000c22:	bf00      	nop
 8000c24:	4b22      	ldr	r3, [pc, #136]	@ (8000cb0 <I2C_Master_Transmit+0xe8>)
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d0f9      	beq.n	8000c24 <I2C_Master_Transmit+0x5c>
			;
		//Write to DR
		I2C1->DR = buffer[i];
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	683a      	ldr	r2, [r7, #0]
 8000c34:	4413      	add	r3, r2
 8000c36:	781a      	ldrb	r2, [r3, #0]
 8000c38:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb0 <I2C_Master_Transmit+0xe8>)
 8000c3a:	611a      	str	r2, [r3, #16]
		size = size - 1;
 8000c3c:	79bb      	ldrb	r3, [r7, #6]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	71bb      	strb	r3, [r7, #6]
		i = i + 1;
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	3301      	adds	r3, #1
 8000c46:	73fb      	strb	r3, [r7, #15]
		//Check if BTF ==1
		if ((I2C1->SR1 & 0x0004) && size > 0) {
 8000c48:	4b19      	ldr	r3, [pc, #100]	@ (8000cb0 <I2C_Master_Transmit+0xe8>)
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d00e      	beq.n	8000c72 <I2C_Master_Transmit+0xaa>
 8000c54:	79bb      	ldrb	r3, [r7, #6]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d00b      	beq.n	8000c72 <I2C_Master_Transmit+0xaa>
			//Write to DR
			I2C1->DR = buffer[i];
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	781a      	ldrb	r2, [r3, #0]
 8000c62:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <I2C_Master_Transmit+0xe8>)
 8000c64:	611a      	str	r2, [r3, #16]
			size = size - 1;
 8000c66:	79bb      	ldrb	r3, [r7, #6]
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	71bb      	strb	r3, [r7, #6]
			i = i + 1;
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	73fb      	strb	r3, [r7, #15]
	while (size > 0) {
 8000c72:	79bb      	ldrb	r3, [r7, #6]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1d4      	bne.n	8000c22 <I2C_Master_Transmit+0x5a>
		}
	}
	//Wait BTF to be set
	while (!(I2C1->SR1 & 0x0004))
 8000c78:	bf00      	nop
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb0 <I2C_Master_Transmit+0xe8>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d0f9      	beq.n	8000c7a <I2C_Master_Transmit+0xb2>
		;
	//Send a stop byte
	I2C1->CR1 |= 0x0200;
 8000c86:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <I2C_Master_Transmit+0xe8>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a09      	ldr	r2, [pc, #36]	@ (8000cb0 <I2C_Master_Transmit+0xe8>)
 8000c8c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c90:	6013      	str	r3, [r2, #0]
	// Wait stop to be sent
	while ((I2C1->SR1 & 0x0010))
 8000c92:	bf00      	nop
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <I2C_Master_Transmit+0xe8>)
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	f003 0310 	and.w	r3, r3, #16
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d1f9      	bne.n	8000c94 <I2C_Master_Transmit+0xcc>
		;
}
 8000ca0:	bf00      	nop
 8000ca2:	bf00      	nop
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40005400 	.word	0x40005400

08000cb4 <I2C_Master_Receive>:

void I2C_Master_Receive(uint8_t addr, uint8_t *buffer, uint8_t size) {
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	71bb      	strb	r3, [r7, #6]

	uint8_t i = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73fb      	strb	r3, [r7, #15]

	//Wait for I2C bus to be free (not busy)
	while (I2C1->SR2 & 0x2)
 8000cc8:	bf00      	nop
 8000cca:	4b94      	ldr	r3, [pc, #592]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1f9      	bne.n	8000cca <I2C_Master_Receive+0x16>
		;

	//Disable POS
	I2C1->CR1 &= 0xFEFF;
 8000cd6:	4b91      	ldr	r3, [pc, #580]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	4990      	ldr	r1, [pc, #576]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000cdc:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	600b      	str	r3, [r1, #0]

	//Enable Ack
	I2C1->CR1 |= 0x0400;
 8000ce4:	4b8d      	ldr	r3, [pc, #564]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a8c      	ldr	r2, [pc, #560]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cee:	6013      	str	r3, [r2, #0]
	//Send a start
	I2C1->CR1 |= 0x0100;
 8000cf0:	4b8a      	ldr	r3, [pc, #552]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a89      	ldr	r2, [pc, #548]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
	// wait for start to finish -> SB = 1
	while (!(I2C1->SR1 & 0x1))
 8000cfc:	bf00      	nop
 8000cfe:	4b87      	ldr	r3, [pc, #540]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f9      	beq.n	8000cfe <I2C_Master_Receive+0x4a>
		;
	I2C1->DR = addr;
 8000d0a:	4a84      	ldr	r2, [pc, #528]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	6113      	str	r3, [r2, #16]
	//Wait until ADDR flag is set
	while (!(I2C1->SR1 & 0x2))
 8000d10:	bf00      	nop
 8000d12:	4b82      	ldr	r3, [pc, #520]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d0f9      	beq.n	8000d12 <I2C_Master_Receive+0x5e>
		;

	if (size == 0) {
 8000d1e:	79bb      	ldrb	r3, [r7, #6]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d10a      	bne.n	8000d3a <I2C_Master_Receive+0x86>
		//Clear Addr flag (by reading SR1 then SR2)
		if (I2C1->SR1 == 0x0)
 8000d24:	4b7d      	ldr	r3, [pc, #500]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000d26:	695b      	ldr	r3, [r3, #20]
			;
		if (I2C1->SR2 == 0x0)
 8000d28:	4b7c      	ldr	r3, [pc, #496]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
			;
		//Send a stop byte
		I2C1->CR1 |= 0x0200;
 8000d2c:	4b7b      	ldr	r3, [pc, #492]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a7a      	ldr	r2, [pc, #488]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000d32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	e0e5      	b.n	8000f06 <I2C_Master_Receive+0x252>
	} else if (size == 1) {
 8000d3a:	79bb      	ldrb	r3, [r7, #6]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d111      	bne.n	8000d64 <I2C_Master_Receive+0xb0>
		// In this case, we receive only 1 data, we need to NOack it
		//Disable Ack
		I2C1->CR1 &= 0xFBFF;
 8000d40:	4b76      	ldr	r3, [pc, #472]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4975      	ldr	r1, [pc, #468]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000d46:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	600b      	str	r3, [r1, #0]

		//Clear Addr flag (by reading SR1 then SR2)
		if (I2C1->SR1 == 0x0)
 8000d4e:	4b73      	ldr	r3, [pc, #460]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000d50:	695b      	ldr	r3, [r3, #20]
			;
		if (I2C1->SR2 == 0x0)
 8000d52:	4b72      	ldr	r3, [pc, #456]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000d54:	699b      	ldr	r3, [r3, #24]
			;

		//Send a stop byte
		I2C1->CR1 |= 0x0200;
 8000d56:	4b71      	ldr	r3, [pc, #452]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a70      	ldr	r2, [pc, #448]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000d5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d60:	6013      	str	r3, [r2, #0]
 8000d62:	e0d0      	b.n	8000f06 <I2C_Master_Receive+0x252>
	} else {
		//Enable Ack
		I2C1->CR1 |= 0x0400;
 8000d64:	4b6d      	ldr	r3, [pc, #436]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a6c      	ldr	r2, [pc, #432]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000d6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d6e:	6013      	str	r3, [r2, #0]
		//Clear Addr flag (by reading SR1 then SR2)
		if (I2C1->SR1 == 0x0)
 8000d70:	4b6a      	ldr	r3, [pc, #424]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000d72:	695b      	ldr	r3, [r3, #20]
			;
		if (I2C1->SR2 == 0x0)
 8000d74:	4b69      	ldr	r3, [pc, #420]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000d76:	699b      	ldr	r3, [r3, #24]
			;
	}

	while (size > 0) {
 8000d78:	e0c5      	b.n	8000f06 <I2C_Master_Receive+0x252>
		if (size <= 3) {
 8000d7a:	79bb      	ldrb	r3, [r7, #6]
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	f200 809b 	bhi.w	8000eb8 <I2C_Master_Receive+0x204>
			// We received only one byte
			if (size == 1) {
 8000d82:	79bb      	ldrb	r3, [r7, #6]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d114      	bne.n	8000db2 <I2C_Master_Receive+0xfe>
				//Wait RXNE=1 to receive a byte
				while (!(I2C1->SR1 & 0x0040))
 8000d88:	bf00      	nop
 8000d8a:	4b64      	ldr	r3, [pc, #400]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0f9      	beq.n	8000d8a <I2C_Master_Receive+0xd6>
					;
				//Read data
				buffer[i] = I2C1->DR;
 8000d96:	4b61      	ldr	r3, [pc, #388]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000d98:	6919      	ldr	r1, [r3, #16]
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	683a      	ldr	r2, [r7, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	b2ca      	uxtb	r2, r1
 8000da2:	701a      	strb	r2, [r3, #0]
				size = size - 1;
 8000da4:	79bb      	ldrb	r3, [r7, #6]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	71bb      	strb	r3, [r7, #6]
				i = i + 1;
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	3301      	adds	r3, #1
 8000dae:	73fb      	strb	r3, [r7, #15]
 8000db0:	e0a9      	b.n	8000f06 <I2C_Master_Receive+0x252>
			}
			// We received two bytes
			else if (size == 2) {
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d13c      	bne.n	8000e32 <I2C_Master_Receive+0x17e>

				//Wait RXNE=1 to receive a byte
				while (!(I2C1->SR1 & 0x0040))
 8000db8:	bf00      	nop
 8000dba:	4b58      	ldr	r3, [pc, #352]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0f9      	beq.n	8000dba <I2C_Master_Receive+0x106>
					;

				//Disable Ack
				I2C1->CR1 &= 0xFBFF;
 8000dc6:	4b55      	ldr	r3, [pc, #340]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	4954      	ldr	r1, [pc, #336]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000dcc:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	600b      	str	r3, [r1, #0]
				//Send a stop byte
				I2C1->CR1 |= 0x0200;
 8000dd4:	4b51      	ldr	r3, [pc, #324]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a50      	ldr	r2, [pc, #320]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000dda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dde:	6013      	str	r3, [r2, #0]

				//Read data
				buffer[i] = I2C1->DR;
 8000de0:	4b4e      	ldr	r3, [pc, #312]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000de2:	6919      	ldr	r1, [r3, #16]
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	4413      	add	r3, r2
 8000dea:	b2ca      	uxtb	r2, r1
 8000dec:	701a      	strb	r2, [r3, #0]
				size = size - 1;
 8000dee:	79bb      	ldrb	r3, [r7, #6]
 8000df0:	3b01      	subs	r3, #1
 8000df2:	71bb      	strb	r3, [r7, #6]
				i = i + 1;
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	3301      	adds	r3, #1
 8000df8:	73fb      	strb	r3, [r7, #15]

				//Wait RXNE=1 to receive a byte
				while (!(I2C1->SR1 & 0x0040))
 8000dfa:	bf00      	nop
 8000dfc:	4b47      	ldr	r3, [pc, #284]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d0f9      	beq.n	8000dfc <I2C_Master_Receive+0x148>
					;

				//Read data
				buffer[i] = I2C1->DR;
 8000e08:	4b44      	ldr	r3, [pc, #272]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000e0a:	6919      	ldr	r1, [r3, #16]
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	683a      	ldr	r2, [r7, #0]
 8000e10:	4413      	add	r3, r2
 8000e12:	b2ca      	uxtb	r2, r1
 8000e14:	701a      	strb	r2, [r3, #0]
				size = size - 1;
 8000e16:	79bb      	ldrb	r3, [r7, #6]
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	71bb      	strb	r3, [r7, #6]
				i = i + 1;
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	73fb      	strb	r3, [r7, #15]

				// Wait stop to be sent
				while ((I2C1->SR1 & 0x0010))
 8000e22:	bf00      	nop
 8000e24:	4b3d      	ldr	r3, [pc, #244]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	f003 0310 	and.w	r3, r3, #16
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1f9      	bne.n	8000e24 <I2C_Master_Receive+0x170>
 8000e30:	e069      	b.n	8000f06 <I2C_Master_Receive+0x252>
					;
			}
			// We received 3 bytes
			else {
				//Wait BTF = 1
				while (!(I2C1->SR1 & 0x0004))
 8000e32:	bf00      	nop
 8000e34:	4b39      	ldr	r3, [pc, #228]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0f9      	beq.n	8000e34 <I2C_Master_Receive+0x180>
					;

				//Disable Ack
				I2C1->CR1 &= 0xFBFF;
 8000e40:	4b36      	ldr	r3, [pc, #216]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4935      	ldr	r1, [pc, #212]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000e46:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	600b      	str	r3, [r1, #0]

				//Read data
				buffer[i] = I2C1->DR;
 8000e4e:	4b33      	ldr	r3, [pc, #204]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000e50:	6919      	ldr	r1, [r3, #16]
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	b2ca      	uxtb	r2, r1
 8000e5a:	701a      	strb	r2, [r3, #0]
				size = size - 1;
 8000e5c:	79bb      	ldrb	r3, [r7, #6]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	71bb      	strb	r3, [r7, #6]
				i = i + 1;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	3301      	adds	r3, #1
 8000e66:	73fb      	strb	r3, [r7, #15]

				//Wait BTF = 1
				while (!(I2C1->SR1 & 0x0004))
 8000e68:	bf00      	nop
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	f003 0304 	and.w	r3, r3, #4
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0f9      	beq.n	8000e6a <I2C_Master_Receive+0x1b6>
					;

				//Send a stop byte
				I2C1->CR1 |= 0x0200;
 8000e76:	4b29      	ldr	r3, [pc, #164]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a28      	ldr	r2, [pc, #160]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000e7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e80:	6013      	str	r3, [r2, #0]

				//Read data
				buffer[i] = I2C1->DR;
 8000e82:	4b26      	ldr	r3, [pc, #152]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000e84:	6919      	ldr	r1, [r3, #16]
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	b2ca      	uxtb	r2, r1
 8000e8e:	701a      	strb	r2, [r3, #0]
				size = size - 1;
 8000e90:	79bb      	ldrb	r3, [r7, #6]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	71bb      	strb	r3, [r7, #6]
				i = i + 1;
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	73fb      	strb	r3, [r7, #15]

				//Read data
				buffer[i] = I2C1->DR;
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000e9e:	6919      	ldr	r1, [r3, #16]
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	683a      	ldr	r2, [r7, #0]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	b2ca      	uxtb	r2, r1
 8000ea8:	701a      	strb	r2, [r3, #0]
				size = size - 1;
 8000eaa:	79bb      	ldrb	r3, [r7, #6]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	71bb      	strb	r3, [r7, #6]
				i = i + 1;
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]
 8000eb6:	e026      	b.n	8000f06 <I2C_Master_Receive+0x252>
			}
		} else {
			//Wait RXNE=1 to receive a byte
			while (!(I2C1->SR1 & 0x0040))
 8000eb8:	bf00      	nop
 8000eba:	4b18      	ldr	r3, [pc, #96]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d0f9      	beq.n	8000eba <I2C_Master_Receive+0x206>
				;

			//Read data
			buffer[i] = I2C1->DR;
 8000ec6:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000ec8:	6919      	ldr	r1, [r3, #16]
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	b2ca      	uxtb	r2, r1
 8000ed2:	701a      	strb	r2, [r3, #0]
			size = size - 1;
 8000ed4:	79bb      	ldrb	r3, [r7, #6]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	71bb      	strb	r3, [r7, #6]
			i = i + 1;
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	3301      	adds	r3, #1
 8000ede:	73fb      	strb	r3, [r7, #15]

			//If BTF is set
			if (I2C1->SR1 & 0x0004) {
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00c      	beq.n	8000f06 <I2C_Master_Receive+0x252>
				//Read data
				buffer[i] = I2C1->DR;
 8000eec:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <I2C_Master_Receive+0x268>)
 8000eee:	6919      	ldr	r1, [r3, #16]
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	683a      	ldr	r2, [r7, #0]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	b2ca      	uxtb	r2, r1
 8000ef8:	701a      	strb	r2, [r3, #0]
				size = size - 1;
 8000efa:	79bb      	ldrb	r3, [r7, #6]
 8000efc:	3b01      	subs	r3, #1
 8000efe:	71bb      	strb	r3, [r7, #6]
				i = i + 1;
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	3301      	adds	r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]
	while (size > 0) {
 8000f06:	79bb      	ldrb	r3, [r7, #6]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f47f af36 	bne.w	8000d7a <I2C_Master_Receive+0xc6>
			}
		}
	}
}
 8000f0e:	bf00      	nop
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	40005400 	.word	0x40005400

08000f20 <init_ACC>:
 * It sets the accelerometer to 100Hz, activates all axes, and configures interrupts wich are
 * triggered on the INT1 pin of the LIS3DSH.
 * 
 * @return void
 */
void init_ACC(void){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
    //setup
    SPIread(CTRL_REG5 | SPI_READ);
 8000f24:	20a4      	movs	r0, #164	@ 0xa4
 8000f26:	f000 fd8f 	bl	8001a48 <SPIread>
    SPIread(CTRL_REG5 | SPI_READ);
 8000f2a:	20a4      	movs	r0, #164	@ 0xa4
 8000f2c:	f000 fd8c 	bl	8001a48 <SPIread>

    //CTRL_REG4
    SPIwrite(CTRL_REG4, 0x67); // 100 Hz, tous les axes actifs
 8000f30:	2167      	movs	r1, #103	@ 0x67
 8000f32:	2020      	movs	r0, #32
 8000f34:	f000 fd40 	bl	80019b8 <SPIwrite>

    //CTRL_REG5
    SPIwrite(CTRL_REG5, 0x00);//40h
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2024      	movs	r0, #36	@ 0x24
 8000f3c:	f000 fd3c 	bl	80019b8 <SPIwrite>

    //INTERRUPT
    SPIwrite(CTRL_REG3, 0x68); // Enable DRDY interrupt on INT1 + IEL
 8000f40:	2168      	movs	r1, #104	@ 0x68
 8000f42:	2023      	movs	r0, #35	@ 0x23
 8000f44:	f000 fd38 	bl	80019b8 <SPIwrite>

    //SM1 config
    SPIwrite(THRS_SM1_1, 0x50); // Threshold for SM1 (1.25G)
 8000f48:	2150      	movs	r1, #80	@ 0x50
 8000f4a:	2057      	movs	r0, #87	@ 0x57
 8000f4c:	f000 fd34 	bl	80019b8 <SPIwrite>
    SPIwrite(MASK1_A, 0x08); // Mask SM1 interrupt (Z axis)
 8000f50:	2108      	movs	r1, #8
 8000f52:	205a      	movs	r0, #90	@ 0x5a
 8000f54:	f000 fd30 	bl	80019b8 <SPIwrite>
    SPIwrite(MASK1_B, 0x08);
 8000f58:	2108      	movs	r1, #8
 8000f5a:	2059      	movs	r0, #89	@ 0x59
 8000f5c:	f000 fd2c 	bl	80019b8 <SPIwrite>
    SPIwrite(SETT1, 0x23);
 8000f60:	2123      	movs	r1, #35	@ 0x23
 8000f62:	205b      	movs	r0, #91	@ 0x5b
 8000f64:	f000 fd28 	bl	80019b8 <SPIwrite>
    //ST1x config
    SPIwrite(0x40,0x05);// NOP next: > THRS1
 8000f68:	2105      	movs	r1, #5
 8000f6a:	2040      	movs	r0, #64	@ 0x40
 8000f6c:	f000 fd24 	bl	80019b8 <SPIwrite>
    SPIwrite(0x41,0x11);// Continue
 8000f70:	2111      	movs	r1, #17
 8000f72:	2041      	movs	r0, #65	@ 0x41
 8000f74:	f000 fd20 	bl	80019b8 <SPIwrite>
    SPIwrite(CTRL_REG1, 0x01); // Enable inertial interrupt
 8000f78:	2101      	movs	r1, #1
 8000f7a:	2021      	movs	r0, #33	@ 0x21
 8000f7c:	f000 fd1c 	bl	80019b8 <SPIwrite>

    //SM2 config
    SPIwrite(THRS_SM2_1, 0x35); // Threshold for SM2 (0.8G)
 8000f80:	2135      	movs	r1, #53	@ 0x35
 8000f82:	2077      	movs	r0, #119	@ 0x77
 8000f84:	f000 fd18 	bl	80019b8 <SPIwrite>
    SPIwrite(MASK2_A, 0x08); // Mask SM2 interrupt (Z axis)
 8000f88:	2108      	movs	r1, #8
 8000f8a:	207a      	movs	r0, #122	@ 0x7a
 8000f8c:	f000 fd14 	bl	80019b8 <SPIwrite>
    SPIwrite(MASK2_B, 0x08);
 8000f90:	2108      	movs	r1, #8
 8000f92:	2079      	movs	r0, #121	@ 0x79
 8000f94:	f000 fd10 	bl	80019b8 <SPIwrite>
    SPIwrite(SETT2, 0x23);
 8000f98:	2123      	movs	r1, #35	@ 0x23
 8000f9a:	207b      	movs	r0, #123	@ 0x7b
 8000f9c:	f000 fd0c 	bl	80019b8 <SPIwrite>
    //ST2x config
    SPIwrite(0x60,0x07);// NOP next: < THRS1
 8000fa0:	2107      	movs	r1, #7
 8000fa2:	2060      	movs	r0, #96	@ 0x60
 8000fa4:	f000 fd08 	bl	80019b8 <SPIwrite>
    SPIwrite(0x61,0x11);
 8000fa8:	2111      	movs	r1, #17
 8000faa:	2061      	movs	r0, #97	@ 0x61
 8000fac:	f000 fd04 	bl	80019b8 <SPIwrite>
    SPIwrite(CTRL_REG2, 0x01); // Enable inertial interrupt
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	2022      	movs	r0, #34	@ 0x22
 8000fb4:	f000 fd00 	bl	80019b8 <SPIwrite>

    //setup
    SPIread(CTRL_REG5 | SPI_READ);
 8000fb8:	20a4      	movs	r0, #164	@ 0xa4
 8000fba:	f000 fd45 	bl	8001a48 <SPIread>
    SPIread(CTRL_REG5 | SPI_READ);
 8000fbe:	20a4      	movs	r0, #164	@ 0xa4
 8000fc0:	f000 fd42 	bl	8001a48 <SPIread>
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fca:	b091      	sub	sp, #68	@ 0x44
 8000fcc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fce:	f000 ff75 	bl	8001ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd2:	f000 f8b5 	bl	8001140 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  TimeTypeDef time = {0};
 8000fd6:	f107 0320 	add.w	r3, r7, #32
 8000fda:	2100      	movs	r1, #0
 8000fdc:	460a      	mov	r2, r1
 8000fde:	801a      	strh	r2, [r3, #0]
 8000fe0:	460a      	mov	r2, r1
 8000fe2:	709a      	strb	r2, [r3, #2]
  DateTypeDef date = {0};
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	2100      	movs	r1, #0
 8000fea:	460a      	mov	r2, r1
 8000fec:	801a      	strh	r2, [r3, #0]
 8000fee:	460a      	mov	r2, r1
 8000ff0:	709a      	strb	r2, [r3, #2]
  char time_string[20];
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff2:	f000 f941 	bl	8001278 <MX_GPIO_Init>
  //MX_I2C1_Init();
  //MX_RTC_Init();
  //MX_USART2_UART_Init();
  MX_I2S3_Init();
 8000ff6:	f000 f90f 	bl	8001218 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */
  init_rtc();
 8000ffa:	f000 f9f3 	bl	80013e4 <init_rtc>
  init_usart();
 8000ffe:	f000 fe91 	bl	8001d24 <init_usart>
  init_SPI();
 8001002:	f000 fc6d 	bl	80018e0 <init_SPI>
  init_ACC();
 8001006:	f7ff ff8b 	bl	8000f20 <init_ACC>

  // DAC
  init_I2C1();
 800100a:	f7ff fd7b 	bl	8000b04 <init_I2C1>
  DAC_init();
 800100e:	f7ff faa7 	bl	8000560 <DAC_init>
  DAC_configurationBeep(3);
 8001012:	2003      	movs	r0, #3
 8001014:	f7ff fb42 	bl	800069c <DAC_configurationBeep>
  DAC_freq_set(1);
 8001018:	2001      	movs	r0, #1
 800101a:	f7ff fbb7 	bl	800078c <DAC_freq_set>
  DAC_OnTime(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f7ff fc3b 	bl	800089a <DAC_OnTime>
  DAC_OffTime(1);
 8001024:	2001      	movs	r0, #1
 8001026:	f7ff fcbf 	bl	80009a8 <DAC_OffTime>
  DAC_changeVolume(3);
 800102a:	2003      	movs	r0, #3
 800102c:	f7ff fb72 	bl	8000714 <DAC_changeVolume>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    uint8_t data = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	int input_nb = 6;
 8001036:	2306      	movs	r3, #6
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t time_tab[6] = {0};
 800103a:	2300      	movs	r3, #0
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	2300      	movs	r3, #0
 8001040:	80bb      	strh	r3, [r7, #4]

	for(int i = 0; i < input_nb; i++){
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001046:	e016      	b.n	8001076 <main+0xae>
	  while(!(USART2->SR & USART_SR_RXNE)){};
 8001048:	bf00      	nop
 800104a:	4b38      	ldr	r3, [pc, #224]	@ (800112c <main+0x164>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0320 	and.w	r3, r3, #32
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0f9      	beq.n	800104a <main+0x82>
	  data = USART2->DR;
 8001056:	4b35      	ldr	r3, [pc, #212]	@ (800112c <main+0x164>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	  time_tab[i] = data; // Convert ASCII value to numerical value
 800105e:	463a      	mov	r2, r7
 8001060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001062:	4413      	add	r3, r2
 8001064:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001068:	701a      	strb	r2, [r3, #0]
	  USART2->DR = 'A';
 800106a:	4b30      	ldr	r3, [pc, #192]	@ (800112c <main+0x164>)
 800106c:	2241      	movs	r2, #65	@ 0x41
 800106e:	605a      	str	r2, [r3, #4]
	for(int i = 0; i < input_nb; i++){
 8001070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001072:	3301      	adds	r3, #1
 8001074:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107a:	429a      	cmp	r2, r3
 800107c:	dbe4      	blt.n	8001048 <main+0x80>
	}

	date.Year = time_tab[0];
 800107e:	783b      	ldrb	r3, [r7, #0]
 8001080:	773b      	strb	r3, [r7, #28]
	date.Month = time_tab[1];
 8001082:	787b      	ldrb	r3, [r7, #1]
 8001084:	777b      	strb	r3, [r7, #29]
	date.Date = time_tab[2];
 8001086:	78bb      	ldrb	r3, [r7, #2]
 8001088:	77bb      	strb	r3, [r7, #30]

	time.Hours = time_tab[3];
 800108a:	78fb      	ldrb	r3, [r7, #3]
 800108c:	f887 3020 	strb.w	r3, [r7, #32]
	time.Minutes = time_tab[4];
 8001090:	793b      	ldrb	r3, [r7, #4]
 8001092:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	time.Seconds = time_tab[5];
 8001096:	797b      	ldrb	r3, [r7, #5]
 8001098:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

	// init rtc with input date
	init_rtc_datetime(date, time);
 800109c:	6a39      	ldr	r1, [r7, #32]
 800109e:	69f8      	ldr	r0, [r7, #28]
 80010a0:	f000 fa32 	bl	8001508 <init_rtc_datetime>

  while (1)
  {
	  btn_poussoir_state = HAL_GPIO_ReadPin(portA, GPIO_PIN_0);
 80010a4:	4b22      	ldr	r3, [pc, #136]	@ (8001130 <main+0x168>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2101      	movs	r1, #1
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 fa4a 	bl	8002544 <HAL_GPIO_ReadPin>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001134 <main+0x16c>)
 80010b6:	701a      	strb	r2, [r3, #0]
	  if(interupt == 1)
 80010b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001138 <main+0x170>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d130      	bne.n	8001122 <main+0x15a>
	  {
		  DAC_timed_alarm(2000);
 80010c0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010c4:	f7ff fcf8 	bl	8000ab8 <DAC_timed_alarm>
		  get_time(&time);
 80010c8:	f107 0320 	add.w	r3, r7, #32
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 fbb7 	bl	8001840 <get_time>
		  get_date(&date);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fb62 	bl	80017a0 <get_date>
		  sprintf(time_string, "%02d-%02d-%04d %02d:%02d:%02d\r\n", date.Date, date.Month, 2000 + date.Year, time.Hours, time.Minutes, time.Seconds);
 80010dc:	7fbb      	ldrb	r3, [r7, #30]
 80010de:	461d      	mov	r5, r3
 80010e0:	7f7b      	ldrb	r3, [r7, #29]
 80010e2:	461e      	mov	r6, r3
 80010e4:	7f3b      	ldrb	r3, [r7, #28]
 80010e6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80010ea:	f897 2020 	ldrb.w	r2, [r7, #32]
 80010ee:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 80010f2:	f897 0022 	ldrb.w	r0, [r7, #34]	@ 0x22
 80010f6:	4604      	mov	r4, r0
 80010f8:	f107 0008 	add.w	r0, r7, #8
 80010fc:	9403      	str	r4, [sp, #12]
 80010fe:	9102      	str	r1, [sp, #8]
 8001100:	9201      	str	r2, [sp, #4]
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	4633      	mov	r3, r6
 8001106:	462a      	mov	r2, r5
 8001108:	490c      	ldr	r1, [pc, #48]	@ (800113c <main+0x174>)
 800110a:	f002 fdd5 	bl	8003cb8 <siprintf>
		  serial_puts(&time_string);
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fe82 	bl	8001e1c <serial_puts>
		  newLine();
 8001118:	f000 fe9c 	bl	8001e54 <newLine>
		  interupt = 0;
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <main+0x170>)
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
	  }
	  DAC_changeVolume(0);
 8001122:	2000      	movs	r0, #0
 8001124:	f7ff faf6 	bl	8000714 <DAC_changeVolume>
	  btn_poussoir_state = HAL_GPIO_ReadPin(portA, GPIO_PIN_0);
 8001128:	e7bc      	b.n	80010a4 <main+0xdc>
 800112a:	bf00      	nop
 800112c:	40004400 	.word	0x40004400
 8001130:	20000004 	.word	0x20000004
 8001134:	200000d4 	.word	0x200000d4
 8001138:	200000d8 	.word	0x200000d8
 800113c:	08004610 	.word	0x08004610

08001140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b094      	sub	sp, #80	@ 0x50
 8001144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	f107 0320 	add.w	r3, r7, #32
 800114a:	2230      	movs	r2, #48	@ 0x30
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f002 fdd2 	bl	8003cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	4b29      	ldr	r3, [pc, #164]	@ (8001210 <SystemClock_Config+0xd0>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116c:	4a28      	ldr	r2, [pc, #160]	@ (8001210 <SystemClock_Config+0xd0>)
 800116e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001172:	6413      	str	r3, [r2, #64]	@ 0x40
 8001174:	4b26      	ldr	r3, [pc, #152]	@ (8001210 <SystemClock_Config+0xd0>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001178:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	4b23      	ldr	r3, [pc, #140]	@ (8001214 <SystemClock_Config+0xd4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a22      	ldr	r2, [pc, #136]	@ (8001214 <SystemClock_Config+0xd4>)
 800118a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b20      	ldr	r3, [pc, #128]	@ (8001214 <SystemClock_Config+0xd4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800119c:	2309      	movs	r3, #9
 800119e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011a6:	2301      	movs	r3, #1
 80011a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011aa:	2302      	movs	r3, #2
 80011ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011b4:	2308      	movs	r3, #8
 80011b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011b8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011be:	2302      	movs	r3, #2
 80011c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011c2:	2307      	movs	r3, #7
 80011c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c6:	f107 0320 	add.w	r3, r7, #32
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 ffce 	bl	800316c <HAL_RCC_OscConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011d6:	f000 f8ff 	bl	80013d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011da:	230f      	movs	r3, #15
 80011dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011de:	2302      	movs	r3, #2
 80011e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011e6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011f2:	f107 030c 	add.w	r3, r7, #12
 80011f6:	2105      	movs	r1, #5
 80011f8:	4618      	mov	r0, r3
 80011fa:	f002 fa2f 	bl	800365c <HAL_RCC_ClockConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001204:	f000 f8e8 	bl	80013d8 <Error_Handler>
  }
}
 8001208:	bf00      	nop
 800120a:	3750      	adds	r7, #80	@ 0x50
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40023800 	.word	0x40023800
 8001214:	40007000 	.word	0x40007000

08001218 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800121c:	4b13      	ldr	r3, [pc, #76]	@ (800126c <MX_I2S3_Init+0x54>)
 800121e:	4a14      	ldr	r2, [pc, #80]	@ (8001270 <MX_I2S3_Init+0x58>)
 8001220:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001222:	4b12      	ldr	r3, [pc, #72]	@ (800126c <MX_I2S3_Init+0x54>)
 8001224:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001228:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800122a:	4b10      	ldr	r3, [pc, #64]	@ (800126c <MX_I2S3_Init+0x54>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001230:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <MX_I2S3_Init+0x54>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001236:	4b0d      	ldr	r3, [pc, #52]	@ (800126c <MX_I2S3_Init+0x54>)
 8001238:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800123c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800123e:	4b0b      	ldr	r3, [pc, #44]	@ (800126c <MX_I2S3_Init+0x54>)
 8001240:	4a0c      	ldr	r2, [pc, #48]	@ (8001274 <MX_I2S3_Init+0x5c>)
 8001242:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001244:	4b09      	ldr	r3, [pc, #36]	@ (800126c <MX_I2S3_Init+0x54>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800124a:	4b08      	ldr	r3, [pc, #32]	@ (800126c <MX_I2S3_Init+0x54>)
 800124c:	2200      	movs	r2, #0
 800124e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001250:	4b06      	ldr	r3, [pc, #24]	@ (800126c <MX_I2S3_Init+0x54>)
 8001252:	2200      	movs	r2, #0
 8001254:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001256:	4805      	ldr	r0, [pc, #20]	@ (800126c <MX_I2S3_Init+0x54>)
 8001258:	f001 f9be 	bl	80025d8 <HAL_I2S_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001262:	f000 f8b9 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	2000008c 	.word	0x2000008c
 8001270:	40003c00 	.word	0x40003c00
 8001274:	00017700 	.word	0x00017700

08001278 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08c      	sub	sp, #48	@ 0x30
 800127c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
 8001292:	4b3f      	ldr	r3, [pc, #252]	@ (8001390 <MX_GPIO_Init+0x118>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a3e      	ldr	r2, [pc, #248]	@ (8001390 <MX_GPIO_Init+0x118>)
 8001298:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b3c      	ldr	r3, [pc, #240]	@ (8001390 <MX_GPIO_Init+0x118>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	4b38      	ldr	r3, [pc, #224]	@ (8001390 <MX_GPIO_Init+0x118>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a37      	ldr	r2, [pc, #220]	@ (8001390 <MX_GPIO_Init+0x118>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b35      	ldr	r3, [pc, #212]	@ (8001390 <MX_GPIO_Init+0x118>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	4b31      	ldr	r3, [pc, #196]	@ (8001390 <MX_GPIO_Init+0x118>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	4a30      	ldr	r2, [pc, #192]	@ (8001390 <MX_GPIO_Init+0x118>)
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001390 <MX_GPIO_Init+0x118>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001390 <MX_GPIO_Init+0x118>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	4a29      	ldr	r2, [pc, #164]	@ (8001390 <MX_GPIO_Init+0x118>)
 80012ec:	f043 0308 	orr.w	r3, r3, #8
 80012f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f2:	4b27      	ldr	r3, [pc, #156]	@ (8001390 <MX_GPIO_Init+0x118>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	4b23      	ldr	r3, [pc, #140]	@ (8001390 <MX_GPIO_Init+0x118>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	4a22      	ldr	r2, [pc, #136]	@ (8001390 <MX_GPIO_Init+0x118>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	6313      	str	r3, [r2, #48]	@ 0x30
 800130e:	4b20      	ldr	r3, [pc, #128]	@ (8001390 <MX_GPIO_Init+0x118>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	4b1c      	ldr	r3, [pc, #112]	@ (8001390 <MX_GPIO_Init+0x118>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	4a1b      	ldr	r2, [pc, #108]	@ (8001390 <MX_GPIO_Init+0x118>)
 8001324:	f043 0310 	orr.w	r3, r3, #16
 8001328:	6313      	str	r3, [r2, #48]	@ 0x30
 800132a:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <MX_GPIO_Init+0x118>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	f003 0310 	and.w	r3, r3, #16
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	2110      	movs	r1, #16
 800133a:	4816      	ldr	r0, [pc, #88]	@ (8001394 <MX_GPIO_Init+0x11c>)
 800133c:	f001 f91a 	bl	8002574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001340:	2310      	movs	r3, #16
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001344:	2301      	movs	r3, #1
 8001346:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001350:	f107 031c 	add.w	r3, r7, #28
 8001354:	4619      	mov	r1, r3
 8001356:	480f      	ldr	r0, [pc, #60]	@ (8001394 <MX_GPIO_Init+0x11c>)
 8001358:	f000 ff58 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800135c:	2301      	movs	r3, #1
 800135e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001360:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001364:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	4809      	ldr	r0, [pc, #36]	@ (8001398 <MX_GPIO_Init+0x120>)
 8001372:	f000 ff4b 	bl	800220c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	2006      	movs	r0, #6
 800137c:	f000 ff0f 	bl	800219e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001380:	2006      	movs	r0, #6
 8001382:	f000 ff28 	bl	80021d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001386:	bf00      	nop
 8001388:	3730      	adds	r7, #48	@ 0x30
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	40020c00 	.word	0x40020c00
 8001398:	40021000 	.word	0x40021000

0800139c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	80fb      	strh	r3, [r7, #6]
	interupt = 1;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <HAL_GPIO_EXTI_Callback+0x38>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	601a      	str	r2, [r3, #0]
    if(GPIO_Pin == GPIO_PIN_0){
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d10b      	bne.n	80013ca <HAL_GPIO_EXTI_Callback+0x2e>


        //exit
        SPIread(CTRL_REG5 | SPI_READ);
 80013b2:	20a4      	movs	r0, #164	@ 0xa4
 80013b4:	f000 fb48 	bl	8001a48 <SPIread>
        SPIread(CTRL_REG5 | SPI_READ);
 80013b8:	20a4      	movs	r0, #164	@ 0xa4
 80013ba:	f000 fb45 	bl	8001a48 <SPIread>

        SPIread(OUTS1 | SPI_READ);
 80013be:	20df      	movs	r0, #223	@ 0xdf
 80013c0:	f000 fb42 	bl	8001a48 <SPIread>
        SPIread(OUTS2 | SPI_READ);
 80013c4:	20ff      	movs	r0, #255	@ 0xff
 80013c6:	f000 fb3f 	bl	8001a48 <SPIread>
    }
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200000d8 	.word	0x200000d8

080013d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013dc:	b672      	cpsid	i
}
 80013de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <Error_Handler+0x8>

080013e4 <init_rtc>:
#include "stm32f4xx_hal_conf.h"
#include "usart2.h"


void init_rtc(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
	uint8_t asynch_factor = 0x7F; // 0111.1111
 80013ea:	237f      	movs	r3, #127	@ 0x7f
 80013ec:	71fb      	strb	r3, [r7, #7]
	uint8_t synch_factor = 0xFF; // 1111.1111 255
 80013ee:	23ff      	movs	r3, #255	@ 0xff
 80013f0:	71bb      	strb	r3, [r7, #6]
	// Low Speed Clock config
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80013f2:	4b40      	ldr	r3, [pc, #256]	@ (80014f4 <init_rtc+0x110>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	4a3f      	ldr	r2, [pc, #252]	@ (80014f4 <init_rtc+0x110>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013fc:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_DBP;
 80013fe:	4b3e      	ldr	r3, [pc, #248]	@ (80014f8 <init_rtc+0x114>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a3d      	ldr	r2, [pc, #244]	@ (80014f8 <init_rtc+0x114>)
 8001404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001408:	6013      	str	r3, [r2, #0]
	RCC->CSR |= RCC_CSR_LSION;
 800140a:	4b3a      	ldr	r3, [pc, #232]	@ (80014f4 <init_rtc+0x110>)
 800140c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800140e:	4a39      	ldr	r2, [pc, #228]	@ (80014f4 <init_rtc+0x110>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6753      	str	r3, [r2, #116]	@ 0x74
	while(!(RCC->CSR & RCC_CSR_LSIRDY)){};
 8001416:	bf00      	nop
 8001418:	4b36      	ldr	r3, [pc, #216]	@ (80014f4 <init_rtc+0x110>)
 800141a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f9      	beq.n	8001418 <init_rtc+0x34>
	RCC->BDCR |= 0x8200;
 8001424:	4b33      	ldr	r3, [pc, #204]	@ (80014f4 <init_rtc+0x110>)
 8001426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001428:	4a32      	ldr	r2, [pc, #200]	@ (80014f4 <init_rtc+0x110>)
 800142a:	f443 4302 	orr.w	r3, r3, #33280	@ 0x8200
 800142e:	6713      	str	r3, [r2, #112]	@ 0x70

	// enable RTC write
	RTC->WPR = 0xCA;
 8001430:	4b32      	ldr	r3, [pc, #200]	@ (80014fc <init_rtc+0x118>)
 8001432:	22ca      	movs	r2, #202	@ 0xca
 8001434:	625a      	str	r2, [r3, #36]	@ 0x24
	RTC->WPR = 0x53;
 8001436:	4b31      	ldr	r3, [pc, #196]	@ (80014fc <init_rtc+0x118>)
 8001438:	2253      	movs	r2, #83	@ 0x53
 800143a:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable init mode
	RTC->ISR |= (1<<ISR_IN_BIT);
 800143c:	4b2f      	ldr	r3, [pc, #188]	@ (80014fc <init_rtc+0x118>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	4a2e      	ldr	r2, [pc, #184]	@ (80014fc <init_rtc+0x118>)
 8001442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001446:	60d3      	str	r3, [r2, #12]
	while(!( RTC->ISR & (1<<ISR_INITF_BIT) )){};
 8001448:	bf00      	nop
 800144a:	4b2c      	ldr	r3, [pc, #176]	@ (80014fc <init_rtc+0x118>)
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f9      	beq.n	800144a <init_rtc+0x66>


	// program first the asynchronous prescaler factor in RTC_PRER register
	RTC->PRER &= ~(RTC_PRER_ASYNC_MASK<<RTC_PRER_ASYNC_LSB);
 8001456:	4b29      	ldr	r3, [pc, #164]	@ (80014fc <init_rtc+0x118>)
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	4a28      	ldr	r2, [pc, #160]	@ (80014fc <init_rtc+0x118>)
 800145c:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8001460:	6113      	str	r3, [r2, #16]
	RTC->PRER |= asynch_factor<<RTC_PRER_ASYNC_LSB;
 8001462:	4b26      	ldr	r3, [pc, #152]	@ (80014fc <init_rtc+0x118>)
 8001464:	691a      	ldr	r2, [r3, #16]
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	041b      	lsls	r3, r3, #16
 800146a:	4924      	ldr	r1, [pc, #144]	@ (80014fc <init_rtc+0x118>)
 800146c:	4313      	orrs	r3, r2
 800146e:	610b      	str	r3, [r1, #16]

	//  program the synchronous prescaler factor
	RTC->PRER &= ~RTC_PRER_SYNC_MASK;
 8001470:	4b22      	ldr	r3, [pc, #136]	@ (80014fc <init_rtc+0x118>)
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	4a21      	ldr	r2, [pc, #132]	@ (80014fc <init_rtc+0x118>)
 8001476:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800147a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800147e:	6113      	str	r3, [r2, #16]
	RTC->PRER |= synch_factor;
 8001480:	4b1e      	ldr	r3, [pc, #120]	@ (80014fc <init_rtc+0x118>)
 8001482:	691a      	ldr	r2, [r3, #16]
 8001484:	79bb      	ldrb	r3, [r7, #6]
 8001486:	491d      	ldr	r1, [pc, #116]	@ (80014fc <init_rtc+0x118>)
 8001488:	4313      	orrs	r3, r2
 800148a:	610b      	str	r3, [r1, #16]

	// default time


	RTC->TR &= 0xFF808080;
 800148c:	4b1b      	ldr	r3, [pc, #108]	@ (80014fc <init_rtc+0x118>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a1a      	ldr	r2, [pc, #104]	@ (80014fc <init_rtc+0x118>)
 8001492:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
 8001496:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800149a:	6013      	str	r3, [r2, #0]
	RTC->TR |=(0x16<<16) | (0x27<<8) | (0x00<<8);
 800149c:	4b17      	ldr	r3, [pc, #92]	@ (80014fc <init_rtc+0x118>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a16      	ldr	r2, [pc, #88]	@ (80014fc <init_rtc+0x118>)
 80014a2:	f443 13b1 	orr.w	r3, r3, #1449984	@ 0x162000
 80014a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80014aa:	6013      	str	r3, [r2, #0]

	// default date

	RTC->DR &= 0xFF0020C0;
 80014ac:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <init_rtc+0x118>)
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	4912      	ldr	r1, [pc, #72]	@ (80014fc <init_rtc+0x118>)
 80014b2:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <init_rtc+0x11c>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
	RTC->DR |= (0x24<<16) | (4<<8) | (0x2);
 80014b8:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <init_rtc+0x118>)
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	490f      	ldr	r1, [pc, #60]	@ (80014fc <init_rtc+0x118>)
 80014be:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <init_rtc+0x120>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	604b      	str	r3, [r1, #4]

	// disable init mode
	RTC->CR |= RTC_CR_BYPSHAD;
 80014c4:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <init_rtc+0x118>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	4a0c      	ldr	r2, [pc, #48]	@ (80014fc <init_rtc+0x118>)
 80014ca:	f043 0320 	orr.w	r3, r3, #32
 80014ce:	6093      	str	r3, [r2, #8]
	RTC->ISR &= ~RTC_ISR_INIT;
 80014d0:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <init_rtc+0x118>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4a09      	ldr	r2, [pc, #36]	@ (80014fc <init_rtc+0x118>)
 80014d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80014da:	60d3      	str	r3, [r2, #12]
	PWR->CR &= ~PWR_CR_DBP;
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <init_rtc+0x114>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a05      	ldr	r2, [pc, #20]	@ (80014f8 <init_rtc+0x114>)
 80014e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014e6:	6013      	str	r3, [r2, #0]

}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40007000 	.word	0x40007000
 80014fc:	40002800 	.word	0x40002800
 8001500:	ff0020c0 	.word	0xff0020c0
 8001504:	00240402 	.word	0x00240402

08001508 <init_rtc_datetime>:

void init_rtc_datetime(DateTypeDef date, TimeTypeDef time)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
	uint8_t asynch_factor = 0x7F; // 0111.1111
 8001512:	237f      	movs	r3, #127	@ 0x7f
 8001514:	73fb      	strb	r3, [r7, #15]
	uint8_t synch_factor = 0xFF; // 1111.1111 255
 8001516:	23ff      	movs	r3, #255	@ 0xff
 8001518:	73bb      	strb	r3, [r7, #14]
	// Low Speed Clock config
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800151a:	4b9c      	ldr	r3, [pc, #624]	@ (800178c <init_rtc_datetime+0x284>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	4a9b      	ldr	r2, [pc, #620]	@ (800178c <init_rtc_datetime+0x284>)
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001524:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_DBP;
 8001526:	4b9a      	ldr	r3, [pc, #616]	@ (8001790 <init_rtc_datetime+0x288>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a99      	ldr	r2, [pc, #612]	@ (8001790 <init_rtc_datetime+0x288>)
 800152c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001530:	6013      	str	r3, [r2, #0]
	RCC->CSR |= RCC_CSR_LSION;
 8001532:	4b96      	ldr	r3, [pc, #600]	@ (800178c <init_rtc_datetime+0x284>)
 8001534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001536:	4a95      	ldr	r2, [pc, #596]	@ (800178c <init_rtc_datetime+0x284>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6753      	str	r3, [r2, #116]	@ 0x74
	while(!(RCC->CSR & RCC_CSR_LSIRDY)){};
 800153e:	bf00      	nop
 8001540:	4b92      	ldr	r3, [pc, #584]	@ (800178c <init_rtc_datetime+0x284>)
 8001542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f9      	beq.n	8001540 <init_rtc_datetime+0x38>
	RCC->BDCR |= 0x8200;
 800154c:	4b8f      	ldr	r3, [pc, #572]	@ (800178c <init_rtc_datetime+0x284>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001550:	4a8e      	ldr	r2, [pc, #568]	@ (800178c <init_rtc_datetime+0x284>)
 8001552:	f443 4302 	orr.w	r3, r3, #33280	@ 0x8200
 8001556:	6713      	str	r3, [r2, #112]	@ 0x70

	// enable RTC write
	RTC->WPR = 0xCA;
 8001558:	4b8e      	ldr	r3, [pc, #568]	@ (8001794 <init_rtc_datetime+0x28c>)
 800155a:	22ca      	movs	r2, #202	@ 0xca
 800155c:	625a      	str	r2, [r3, #36]	@ 0x24
	RTC->WPR = 0x53;
 800155e:	4b8d      	ldr	r3, [pc, #564]	@ (8001794 <init_rtc_datetime+0x28c>)
 8001560:	2253      	movs	r2, #83	@ 0x53
 8001562:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable init mode
	RTC->ISR |= (1<<ISR_IN_BIT);
 8001564:	4b8b      	ldr	r3, [pc, #556]	@ (8001794 <init_rtc_datetime+0x28c>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	4a8a      	ldr	r2, [pc, #552]	@ (8001794 <init_rtc_datetime+0x28c>)
 800156a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800156e:	60d3      	str	r3, [r2, #12]
	while(!( RTC->ISR & (1<<ISR_INITF_BIT) )){};
 8001570:	bf00      	nop
 8001572:	4b88      	ldr	r3, [pc, #544]	@ (8001794 <init_rtc_datetime+0x28c>)
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f9      	beq.n	8001572 <init_rtc_datetime+0x6a>


	// program first the asynchronous prescaler factor in RTC_PRER register
	RTC->PRER &= ~(RTC_PRER_ASYNC_MASK<<RTC_PRER_ASYNC_LSB);
 800157e:	4b85      	ldr	r3, [pc, #532]	@ (8001794 <init_rtc_datetime+0x28c>)
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	4a84      	ldr	r2, [pc, #528]	@ (8001794 <init_rtc_datetime+0x28c>)
 8001584:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8001588:	6113      	str	r3, [r2, #16]
	RTC->PRER |= asynch_factor<<RTC_PRER_ASYNC_LSB;
 800158a:	4b82      	ldr	r3, [pc, #520]	@ (8001794 <init_rtc_datetime+0x28c>)
 800158c:	691a      	ldr	r2, [r3, #16]
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	041b      	lsls	r3, r3, #16
 8001592:	4980      	ldr	r1, [pc, #512]	@ (8001794 <init_rtc_datetime+0x28c>)
 8001594:	4313      	orrs	r3, r2
 8001596:	610b      	str	r3, [r1, #16]

	//  program the synchronous prescaler factor
	RTC->PRER &= ~RTC_PRER_SYNC_MASK;
 8001598:	4b7e      	ldr	r3, [pc, #504]	@ (8001794 <init_rtc_datetime+0x28c>)
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	4a7d      	ldr	r2, [pc, #500]	@ (8001794 <init_rtc_datetime+0x28c>)
 800159e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80015a2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80015a6:	6113      	str	r3, [r2, #16]
	RTC->PRER |= synch_factor;
 80015a8:	4b7a      	ldr	r3, [pc, #488]	@ (8001794 <init_rtc_datetime+0x28c>)
 80015aa:	691a      	ldr	r2, [r3, #16]
 80015ac:	7bbb      	ldrb	r3, [r7, #14]
 80015ae:	4979      	ldr	r1, [pc, #484]	@ (8001794 <init_rtc_datetime+0x28c>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	610b      	str	r3, [r1, #16]

	// default time
	uint8_t hour = (((time.Hours / 10) & 0x3) << 4) | ((time.Hours % 10) & 0xF);
 80015b4:	783b      	ldrb	r3, [r7, #0]
 80015b6:	4a78      	ldr	r2, [pc, #480]	@ (8001798 <init_rtc_datetime+0x290>)
 80015b8:	fba2 2303 	umull	r2, r3, r2, r3
 80015bc:	08db      	lsrs	r3, r3, #3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	011b      	lsls	r3, r3, #4
 80015c2:	b25b      	sxtb	r3, r3
 80015c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80015c8:	b258      	sxtb	r0, r3
 80015ca:	783a      	ldrb	r2, [r7, #0]
 80015cc:	4b72      	ldr	r3, [pc, #456]	@ (8001798 <init_rtc_datetime+0x290>)
 80015ce:	fba3 1302 	umull	r1, r3, r3, r2
 80015d2:	08d9      	lsrs	r1, r3, #3
 80015d4:	460b      	mov	r3, r1
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	b25b      	sxtb	r3, r3
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	4303      	orrs	r3, r0
 80015ea:	b25b      	sxtb	r3, r3
 80015ec:	737b      	strb	r3, [r7, #13]
	uint8_t minutes = (((time.Minutes / 10) & 0x7) << 4) | ((time.Minutes % 10) & 0xF);
 80015ee:	787b      	ldrb	r3, [r7, #1]
 80015f0:	4a69      	ldr	r2, [pc, #420]	@ (8001798 <init_rtc_datetime+0x290>)
 80015f2:	fba2 2303 	umull	r2, r3, r2, r3
 80015f6:	08db      	lsrs	r3, r3, #3
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	011b      	lsls	r3, r3, #4
 80015fc:	b25b      	sxtb	r3, r3
 80015fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001602:	b258      	sxtb	r0, r3
 8001604:	787a      	ldrb	r2, [r7, #1]
 8001606:	4b64      	ldr	r3, [pc, #400]	@ (8001798 <init_rtc_datetime+0x290>)
 8001608:	fba3 1302 	umull	r1, r3, r3, r2
 800160c:	08d9      	lsrs	r1, r3, #3
 800160e:	460b      	mov	r3, r1
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	440b      	add	r3, r1
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	b2db      	uxtb	r3, r3
 800161a:	b25b      	sxtb	r3, r3
 800161c:	f003 030f 	and.w	r3, r3, #15
 8001620:	b25b      	sxtb	r3, r3
 8001622:	4303      	orrs	r3, r0
 8001624:	b25b      	sxtb	r3, r3
 8001626:	733b      	strb	r3, [r7, #12]
	uint8_t seconds = (((time.Seconds / 10) & 0x7) << 4) | ((time.Seconds % 10) & 0xF);
 8001628:	78bb      	ldrb	r3, [r7, #2]
 800162a:	4a5b      	ldr	r2, [pc, #364]	@ (8001798 <init_rtc_datetime+0x290>)
 800162c:	fba2 2303 	umull	r2, r3, r2, r3
 8001630:	08db      	lsrs	r3, r3, #3
 8001632:	b2db      	uxtb	r3, r3
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	b25b      	sxtb	r3, r3
 8001638:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800163c:	b258      	sxtb	r0, r3
 800163e:	78ba      	ldrb	r2, [r7, #2]
 8001640:	4b55      	ldr	r3, [pc, #340]	@ (8001798 <init_rtc_datetime+0x290>)
 8001642:	fba3 1302 	umull	r1, r3, r3, r2
 8001646:	08d9      	lsrs	r1, r3, #3
 8001648:	460b      	mov	r3, r1
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	b2db      	uxtb	r3, r3
 8001654:	b25b      	sxtb	r3, r3
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	b25b      	sxtb	r3, r3
 800165c:	4303      	orrs	r3, r0
 800165e:	b25b      	sxtb	r3, r3
 8001660:	72fb      	strb	r3, [r7, #11]

	RTC->TR &= 0xFF808080;
 8001662:	4b4c      	ldr	r3, [pc, #304]	@ (8001794 <init_rtc_datetime+0x28c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a4b      	ldr	r2, [pc, #300]	@ (8001794 <init_rtc_datetime+0x28c>)
 8001668:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
 800166c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8001670:	6013      	str	r3, [r2, #0]
	RTC->TR |=(hour<<16) | (minutes<<8) | seconds;
 8001672:	4b48      	ldr	r3, [pc, #288]	@ (8001794 <init_rtc_datetime+0x28c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	7b7a      	ldrb	r2, [r7, #13]
 8001678:	0411      	lsls	r1, r2, #16
 800167a:	7b3a      	ldrb	r2, [r7, #12]
 800167c:	0212      	lsls	r2, r2, #8
 800167e:	4311      	orrs	r1, r2
 8001680:	7afa      	ldrb	r2, [r7, #11]
 8001682:	430a      	orrs	r2, r1
 8001684:	4611      	mov	r1, r2
 8001686:	4a43      	ldr	r2, [pc, #268]	@ (8001794 <init_rtc_datetime+0x28c>)
 8001688:	430b      	orrs	r3, r1
 800168a:	6013      	str	r3, [r2, #0]

	// default date
	uint8_t year = (((date.Year / 10) & 0xF) << 4) | ((date.Year % 10) & 0xF);
 800168c:	793b      	ldrb	r3, [r7, #4]
 800168e:	4a42      	ldr	r2, [pc, #264]	@ (8001798 <init_rtc_datetime+0x290>)
 8001690:	fba2 2303 	umull	r2, r3, r2, r3
 8001694:	08db      	lsrs	r3, r3, #3
 8001696:	b2db      	uxtb	r3, r3
 8001698:	011b      	lsls	r3, r3, #4
 800169a:	b258      	sxtb	r0, r3
 800169c:	793a      	ldrb	r2, [r7, #4]
 800169e:	4b3e      	ldr	r3, [pc, #248]	@ (8001798 <init_rtc_datetime+0x290>)
 80016a0:	fba3 1302 	umull	r1, r3, r3, r2
 80016a4:	08d9      	lsrs	r1, r3, #3
 80016a6:	460b      	mov	r3, r1
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	440b      	add	r3, r1
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	f003 030f 	and.w	r3, r3, #15
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	4303      	orrs	r3, r0
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	72bb      	strb	r3, [r7, #10]
	uint8_t month = (((date.Month / 10) & 0x1) << 4) | ((date.Month % 10) & 0xF);
 80016c0:	797b      	ldrb	r3, [r7, #5]
 80016c2:	4a35      	ldr	r2, [pc, #212]	@ (8001798 <init_rtc_datetime+0x290>)
 80016c4:	fba2 2303 	umull	r2, r3, r2, r3
 80016c8:	08db      	lsrs	r3, r3, #3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	f003 0310 	and.w	r3, r3, #16
 80016d4:	b258      	sxtb	r0, r3
 80016d6:	797a      	ldrb	r2, [r7, #5]
 80016d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001798 <init_rtc_datetime+0x290>)
 80016da:	fba3 1302 	umull	r1, r3, r3, r2
 80016de:	08d9      	lsrs	r1, r3, #3
 80016e0:	460b      	mov	r3, r1
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	4303      	orrs	r3, r0
 80016f6:	b25b      	sxtb	r3, r3
 80016f8:	727b      	strb	r3, [r7, #9]
	uint8_t day = (((date.Date / 10) & 0x3) << 4) | ((date.Date % 10) & 0xF);
 80016fa:	79bb      	ldrb	r3, [r7, #6]
 80016fc:	4a26      	ldr	r2, [pc, #152]	@ (8001798 <init_rtc_datetime+0x290>)
 80016fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001702:	08db      	lsrs	r3, r3, #3
 8001704:	b2db      	uxtb	r3, r3
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	b25b      	sxtb	r3, r3
 800170a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800170e:	b258      	sxtb	r0, r3
 8001710:	79ba      	ldrb	r2, [r7, #6]
 8001712:	4b21      	ldr	r3, [pc, #132]	@ (8001798 <init_rtc_datetime+0x290>)
 8001714:	fba3 1302 	umull	r1, r3, r3, r2
 8001718:	08d9      	lsrs	r1, r3, #3
 800171a:	460b      	mov	r3, r1
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	440b      	add	r3, r1
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	b2db      	uxtb	r3, r3
 8001726:	b25b      	sxtb	r3, r3
 8001728:	f003 030f 	and.w	r3, r3, #15
 800172c:	b25b      	sxtb	r3, r3
 800172e:	4303      	orrs	r3, r0
 8001730:	b25b      	sxtb	r3, r3
 8001732:	723b      	strb	r3, [r7, #8]

	RTC->DR &= 0xFF0020C0;
 8001734:	4b17      	ldr	r3, [pc, #92]	@ (8001794 <init_rtc_datetime+0x28c>)
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	4916      	ldr	r1, [pc, #88]	@ (8001794 <init_rtc_datetime+0x28c>)
 800173a:	4b18      	ldr	r3, [pc, #96]	@ (800179c <init_rtc_datetime+0x294>)
 800173c:	4013      	ands	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
	RTC->DR |= (year<<16) | (month<<8) | (day);
 8001740:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <init_rtc_datetime+0x28c>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	7aba      	ldrb	r2, [r7, #10]
 8001746:	0411      	lsls	r1, r2, #16
 8001748:	7a7a      	ldrb	r2, [r7, #9]
 800174a:	0212      	lsls	r2, r2, #8
 800174c:	4311      	orrs	r1, r2
 800174e:	7a3a      	ldrb	r2, [r7, #8]
 8001750:	430a      	orrs	r2, r1
 8001752:	4611      	mov	r1, r2
 8001754:	4a0f      	ldr	r2, [pc, #60]	@ (8001794 <init_rtc_datetime+0x28c>)
 8001756:	430b      	orrs	r3, r1
 8001758:	6053      	str	r3, [r2, #4]

	// disable init mode
	RTC->CR |= RTC_CR_BYPSHAD;
 800175a:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <init_rtc_datetime+0x28c>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	4a0d      	ldr	r2, [pc, #52]	@ (8001794 <init_rtc_datetime+0x28c>)
 8001760:	f043 0320 	orr.w	r3, r3, #32
 8001764:	6093      	str	r3, [r2, #8]
	RTC->ISR &= ~RTC_ISR_INIT;
 8001766:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <init_rtc_datetime+0x28c>)
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	4a0a      	ldr	r2, [pc, #40]	@ (8001794 <init_rtc_datetime+0x28c>)
 800176c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001770:	60d3      	str	r3, [r2, #12]
	PWR->CR &= ~PWR_CR_DBP;
 8001772:	4b07      	ldr	r3, [pc, #28]	@ (8001790 <init_rtc_datetime+0x288>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a06      	ldr	r2, [pc, #24]	@ (8001790 <init_rtc_datetime+0x288>)
 8001778:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800177c:	6013      	str	r3, [r2, #0]

}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800
 8001790:	40007000 	.word	0x40007000
 8001794:	40002800 	.word	0x40002800
 8001798:	cccccccd 	.word	0xcccccccd
 800179c:	ff0020c0 	.word	0xff0020c0

080017a0 <get_date>:



void get_date(DateTypeDef *date){
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

	date->Year = (((RTC->DR >> 20)&0xF)*10) + ((RTC->DR >> 16)&0xF);
 80017a8:	4b24      	ldr	r3, [pc, #144]	@ (800183c <get_date+0x9c>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	0d1b      	lsrs	r3, r3, #20
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	f003 030f 	and.w	r3, r3, #15
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	461a      	mov	r2, r3
 80017b8:	0092      	lsls	r2, r2, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	4b1e      	ldr	r3, [pc, #120]	@ (800183c <get_date+0x9c>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	0c1b      	lsrs	r3, r3, #16
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	f003 030f 	and.w	r3, r3, #15
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	701a      	strb	r2, [r3, #0]
	date->Month = (10*((RTC->DR >> 12)&1)) + ((RTC->DR >> 8)&0xF);
 80017d6:	4b19      	ldr	r3, [pc, #100]	@ (800183c <get_date+0x9c>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	0b1b      	lsrs	r3, r3, #12
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	461a      	mov	r2, r3
 80017e6:	0092      	lsls	r2, r2, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4b13      	ldr	r3, [pc, #76]	@ (800183c <get_date+0x9c>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	0a1b      	lsrs	r3, r3, #8
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	4413      	add	r3, r2
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	705a      	strb	r2, [r3, #1]
	date->Date = (10*((RTC->DR >> 4)&3)) + (RTC->DR & 0xF);
 8001804:	4b0d      	ldr	r3, [pc, #52]	@ (800183c <get_date+0x9c>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	b2db      	uxtb	r3, r3
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	b2db      	uxtb	r3, r3
 8001812:	461a      	mov	r2, r3
 8001814:	0092      	lsls	r2, r2, #2
 8001816:	4413      	add	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	b2da      	uxtb	r2, r3
 800181c:	4b07      	ldr	r3, [pc, #28]	@ (800183c <get_date+0x9c>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	b2db      	uxtb	r3, r3
 8001828:	4413      	add	r3, r2
 800182a:	b2da      	uxtb	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	709a      	strb	r2, [r3, #2]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	40002800 	.word	0x40002800

08001840 <get_time>:

void get_time(TimeTypeDef *time){
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	time->Seconds = (RTC->TR & 0xF) + 10*((RTC->TR >> 4)&7);
 8001848:	4b24      	ldr	r3, [pc, #144]	@ (80018dc <get_time+0x9c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	b2da      	uxtb	r2, r3
 8001854:	4b21      	ldr	r3, [pc, #132]	@ (80018dc <get_time+0x9c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	b2db      	uxtb	r3, r3
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	b2db      	uxtb	r3, r3
 8001862:	4619      	mov	r1, r3
 8001864:	0089      	lsls	r1, r1, #2
 8001866:	440b      	add	r3, r1
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	b2db      	uxtb	r3, r3
 800186c:	4413      	add	r3, r2
 800186e:	b2da      	uxtb	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	709a      	strb	r2, [r3, #2]
	time->Minutes = ((RTC->TR >> 8)&0xF) + 10*((RTC->TR >> 12)&7);
 8001874:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <get_time+0x9c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	0a1b      	lsrs	r3, r3, #8
 800187a:	b2db      	uxtb	r3, r3
 800187c:	f003 030f 	and.w	r3, r3, #15
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4b16      	ldr	r3, [pc, #88]	@ (80018dc <get_time+0x9c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	0b1b      	lsrs	r3, r3, #12
 8001888:	b2db      	uxtb	r3, r3
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	b2db      	uxtb	r3, r3
 8001890:	4619      	mov	r1, r3
 8001892:	0089      	lsls	r1, r1, #2
 8001894:	440b      	add	r3, r1
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	b2db      	uxtb	r3, r3
 800189a:	4413      	add	r3, r2
 800189c:	b2da      	uxtb	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	705a      	strb	r2, [r3, #1]
	time->Hours = ((RTC->TR >> 16)&0xF) + 10*(((RTC->TR >> 20)&3));
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <get_time+0x9c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <get_time+0x9c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	0d1b      	lsrs	r3, r3, #20
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	4619      	mov	r1, r3
 80018c0:	0089      	lsls	r1, r1, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	4413      	add	r3, r2
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	701a      	strb	r2, [r3, #0]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	40002800 	.word	0x40002800

080018e0 <init_SPI>:
 */


#include "spi.h"

void init_SPI(void){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
 80018f4:	611a      	str	r2, [r3, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	4b2b      	ldr	r3, [pc, #172]	@ (80019a8 <init_SPI+0xc8>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	4a2a      	ldr	r2, [pc, #168]	@ (80019a8 <init_SPI+0xc8>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6313      	str	r3, [r2, #48]	@ 0x30
 8001906:	4b28      	ldr	r3, [pc, #160]	@ (80019a8 <init_SPI+0xc8>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001912:	23e0      	movs	r3, #224	@ 0xe0
 8001914:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800191a:	2302      	movs	r3, #2
 800191c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800191e:	2301      	movs	r3, #1
 8001920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001922:	2305      	movs	r3, #5
 8001924:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	4619      	mov	r1, r3
 800192c:	481f      	ldr	r0, [pc, #124]	@ (80019ac <init_SPI+0xcc>)
 800192e:	f000 fc6d 	bl	800220c <HAL_GPIO_Init>

    /**LIS3DSH ChipSelect Configuration
    PE3     ------> LIS3DSH_SS
    */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	4b1c      	ldr	r3, [pc, #112]	@ (80019a8 <init_SPI+0xc8>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	4a1b      	ldr	r2, [pc, #108]	@ (80019a8 <init_SPI+0xc8>)
 800193c:	f043 0310 	orr.w	r3, r3, #16
 8001940:	6313      	str	r3, [r2, #48]	@ 0x30
 8001942:	4b19      	ldr	r3, [pc, #100]	@ (80019a8 <init_SPI+0xc8>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	f003 0310 	and.w	r3, r3, #16
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800194e:	2201      	movs	r2, #1
 8001950:	2108      	movs	r1, #8
 8001952:	4817      	ldr	r0, [pc, #92]	@ (80019b0 <init_SPI+0xd0>)
 8001954:	f000 fe0e 	bl	8002574 <HAL_GPIO_WritePin>
    /*Configure GPIO pin : CS_I2C_SPI_Pin */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001958:	2308      	movs	r3, #8
 800195a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195c:	2301      	movs	r3, #1
 800195e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001964:	2303      	movs	r3, #3
 8001966:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	4619      	mov	r1, r3
 800196e:	4810      	ldr	r0, [pc, #64]	@ (80019b0 <init_SPI+0xd0>)
 8001970:	f000 fc4c 	bl	800220c <HAL_GPIO_Init>

    /**
     * SPI1 configuration
     */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001974:	2300      	movs	r3, #0
 8001976:	603b      	str	r3, [r7, #0]
 8001978:	4b0b      	ldr	r3, [pc, #44]	@ (80019a8 <init_SPI+0xc8>)
 800197a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197c:	4a0a      	ldr	r2, [pc, #40]	@ (80019a8 <init_SPI+0xc8>)
 800197e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001982:	6453      	str	r3, [r2, #68]	@ 0x44
 8001984:	4b08      	ldr	r3, [pc, #32]	@ (80019a8 <init_SPI+0xc8>)
 8001986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001988:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800198c:	603b      	str	r3, [r7, #0]
 800198e:	683b      	ldr	r3, [r7, #0]
    // SPI1 clock = APB2, prescaler set to 16 -> 84000000/16 = 5Mhz
    SPI1->CR1 = 0b000001101011100; //0x007E
 8001990:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <init_SPI+0xd4>)
 8001992:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8001996:	601a      	str	r2, [r3, #0]
    SPI1->CR2 = 0b0000000000000000; //0x0000
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <init_SPI+0xd4>)
 800199a:	2200      	movs	r2, #0
 800199c:	605a      	str	r2, [r3, #4]
   // SPI1->I2SCFGR = 0; // SPI enable I2S disable
   // SPI1->I2SPR = 0b0000000000000000;
}
 800199e:	bf00      	nop
 80019a0:	3720      	adds	r7, #32
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020000 	.word	0x40020000
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40013000 	.word	0x40013000

080019b8 <SPIwrite>:

// Write a data @ address with SPI1
void SPIwrite(uint8_t address, uint8_t data)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	460a      	mov	r2, r1
 80019c2:	71fb      	strb	r3, [r7, #7]
 80019c4:	4613      	mov	r3, r2
 80019c6:	71bb      	strb	r3, [r7, #6]
	CS_LOW; //CS --> Low
 80019c8:	2200      	movs	r2, #0
 80019ca:	2108      	movs	r1, #8
 80019cc:	481c      	ldr	r0, [pc, #112]	@ (8001a40 <SPIwrite+0x88>)
 80019ce:	f000 fdd1 	bl	8002574 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80019d2:	2001      	movs	r0, #1
 80019d4:	f000 fae4 	bl	8001fa0 <HAL_Delay>
    SPI1->DR = address;
 80019d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001a44 <SPIwrite+0x8c>)
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	60d3      	str	r3, [r2, #12]
    HAL_Delay(1);
 80019de:	2001      	movs	r0, #1
 80019e0:	f000 fade 	bl	8001fa0 <HAL_Delay>
    while(!(SPI1->SR & 0x2)); // wait Flag TXE = 1
 80019e4:	bf00      	nop
 80019e6:	4b17      	ldr	r3, [pc, #92]	@ (8001a44 <SPIwrite+0x8c>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f9      	beq.n	80019e6 <SPIwrite+0x2e>
	while((SPI1->SR & 0x80)); // wait Flag BSY = 0
 80019f2:	bf00      	nop
 80019f4:	4b13      	ldr	r3, [pc, #76]	@ (8001a44 <SPIwrite+0x8c>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1f9      	bne.n	80019f4 <SPIwrite+0x3c>
    SPI1->DR = data;
 8001a00:	4a10      	ldr	r2, [pc, #64]	@ (8001a44 <SPIwrite+0x8c>)
 8001a02:	79bb      	ldrb	r3, [r7, #6]
 8001a04:	60d3      	str	r3, [r2, #12]
    HAL_Delay(1);
 8001a06:	2001      	movs	r0, #1
 8001a08:	f000 faca 	bl	8001fa0 <HAL_Delay>
    while(!(SPI1->SR & 0x2)); // Wait Flag TXE = 1
 8001a0c:	bf00      	nop
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a44 <SPIwrite+0x8c>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f9      	beq.n	8001a0e <SPIwrite+0x56>
	while((SPI1->SR & 0x80)); // wait Flag BSY = 0
 8001a1a:	bf00      	nop
 8001a1c:	4b09      	ldr	r3, [pc, #36]	@ (8001a44 <SPIwrite+0x8c>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f9      	bne.n	8001a1c <SPIwrite+0x64>
    HAL_Delay(1);
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f000 fab9 	bl	8001fa0 <HAL_Delay>
    CS_HIGH; //CS --> High
 8001a2e:	2201      	movs	r2, #1
 8001a30:	2108      	movs	r1, #8
 8001a32:	4803      	ldr	r0, [pc, #12]	@ (8001a40 <SPIwrite+0x88>)
 8001a34:	f000 fd9e 	bl	8002574 <HAL_GPIO_WritePin>
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40013000 	.word	0x40013000

08001a48 <SPIread>:
    return tempdat;
}

// Write a tempdat @ address with SPI1
uint8_t SPIread(uint8_t address)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
	 uint8_t tempdat;
	 CS_LOW; //CS --> Low
 8001a52:	2200      	movs	r2, #0
 8001a54:	2108      	movs	r1, #8
 8001a56:	481a      	ldr	r0, [pc, #104]	@ (8001ac0 <SPIread+0x78>)
 8001a58:	f000 fd8c 	bl	8002574 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	 SPI1->DR = address;
 8001a5c:	4a19      	ldr	r2, [pc, #100]	@ (8001ac4 <SPIread+0x7c>)
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	60d3      	str	r3, [r2, #12]
	 while(!(SPI1->SR & 0x2)); // wait Flag TXE = 1
 8001a62:	bf00      	nop
 8001a64:	4b17      	ldr	r3, [pc, #92]	@ (8001ac4 <SPIread+0x7c>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f9      	beq.n	8001a64 <SPIread+0x1c>
	 while((SPI1->SR & 0x80)); // wait Flag BSY = 0
 8001a70:	bf00      	nop
 8001a72:	4b14      	ldr	r3, [pc, #80]	@ (8001ac4 <SPIread+0x7c>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f9      	bne.n	8001a72 <SPIread+0x2a>
	 //HAL_Delay(100);
	tempdat = SPI1->DR & 0xFF; // Read dummy
 8001a7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <SPIread+0x7c>)
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	73fb      	strb	r3, [r7, #15]
	 SPI1->DR = DUMMY_BYTE;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac4 <SPIread+0x7c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
	 while(!(SPI1->SR & 0x1)); // Wait Flag RXE = 1
 8001a8a:	bf00      	nop
 8001a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac4 <SPIread+0x7c>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f9      	beq.n	8001a8c <SPIread+0x44>
	 while((SPI1->SR & 0x80)); // wait Flag BSY = 0
 8001a98:	bf00      	nop
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <SPIread+0x7c>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f9      	bne.n	8001a9a <SPIread+0x52>
	// HAL_Delay(100);
	 tempdat = SPI1->DR & 0xFF;
 8001aa6:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <SPIread+0x7c>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	73fb      	strb	r3, [r7, #15]
	// HAL_Delay(100);
	 CS_HIGH; //CS --> High
 8001aac:	2201      	movs	r2, #1
 8001aae:	2108      	movs	r1, #8
 8001ab0:	4803      	ldr	r0, [pc, #12]	@ (8001ac0 <SPIread+0x78>)
 8001ab2:	f000 fd5f 	bl	8002574 <HAL_GPIO_WritePin>
	 return tempdat;
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40013000 	.word	0x40013000

08001ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	4b10      	ldr	r3, [pc, #64]	@ (8001b14 <HAL_MspInit+0x4c>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8001b14 <HAL_MspInit+0x4c>)
 8001ad8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ade:	4b0d      	ldr	r3, [pc, #52]	@ (8001b14 <HAL_MspInit+0x4c>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	603b      	str	r3, [r7, #0]
 8001aee:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <HAL_MspInit+0x4c>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	4a08      	ldr	r2, [pc, #32]	@ (8001b14 <HAL_MspInit+0x4c>)
 8001af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001afa:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <HAL_MspInit+0x4c>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b02:	603b      	str	r3, [r7, #0]
 8001b04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b06:	2007      	movs	r0, #7
 8001b08:	f000 fb3e 	bl	8002188 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40023800 	.word	0x40023800

08001b18 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08e      	sub	sp, #56	@ 0x38
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a31      	ldr	r2, [pc, #196]	@ (8001c08 <HAL_I2S_MspInit+0xf0>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d15a      	bne.n	8001bfe <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001b4c:	23c0      	movs	r3, #192	@ 0xc0
 8001b4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001b50:	2302      	movs	r3, #2
 8001b52:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f001 ff6b 	bl	8003a34 <HAL_RCCEx_PeriphCLKConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001b64:	f7ff fc38 	bl	80013d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	4b27      	ldr	r3, [pc, #156]	@ (8001c0c <HAL_I2S_MspInit+0xf4>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b70:	4a26      	ldr	r2, [pc, #152]	@ (8001c0c <HAL_I2S_MspInit+0xf4>)
 8001b72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b76:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b78:	4b24      	ldr	r3, [pc, #144]	@ (8001c0c <HAL_I2S_MspInit+0xf4>)
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <HAL_I2S_MspInit+0xf4>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8c:	4a1f      	ldr	r2, [pc, #124]	@ (8001c0c <HAL_I2S_MspInit+0xf4>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b94:	4b1d      	ldr	r3, [pc, #116]	@ (8001c0c <HAL_I2S_MspInit+0xf4>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	4b19      	ldr	r3, [pc, #100]	@ (8001c0c <HAL_I2S_MspInit+0xf4>)
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba8:	4a18      	ldr	r2, [pc, #96]	@ (8001c0c <HAL_I2S_MspInit+0xf4>)
 8001baa:	f043 0304 	orr.w	r3, r3, #4
 8001bae:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb0:	4b16      	ldr	r3, [pc, #88]	@ (8001c0c <HAL_I2S_MspInit+0xf4>)
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bbc:	2310      	movs	r3, #16
 8001bbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bcc:	2306      	movs	r3, #6
 8001bce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	480e      	ldr	r0, [pc, #56]	@ (8001c10 <HAL_I2S_MspInit+0xf8>)
 8001bd8:	f000 fb18 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001bdc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bee:	2306      	movs	r3, #6
 8001bf0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4806      	ldr	r0, [pc, #24]	@ (8001c14 <HAL_I2S_MspInit+0xfc>)
 8001bfa:	f000 fb07 	bl	800220c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001bfe:	bf00      	nop
 8001c00:	3738      	adds	r7, #56	@ 0x38
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40003c00 	.word	0x40003c00
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020000 	.word	0x40020000
 8001c14:	40020800 	.word	0x40020800

08001c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <NMI_Handler+0x4>

08001c20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c24:	bf00      	nop
 8001c26:	e7fd      	b.n	8001c24 <HardFault_Handler+0x4>

08001c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c2c:	bf00      	nop
 8001c2e:	e7fd      	b.n	8001c2c <MemManage_Handler+0x4>

08001c30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <BusFault_Handler+0x4>

08001c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <UsageFault_Handler+0x4>

08001c40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c6e:	f000 f977 	bl	8001f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	interupt ++;
 8001c7c:	4b04      	ldr	r3, [pc, #16]	@ (8001c90 <EXTI0_IRQHandler+0x18>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	3301      	adds	r3, #1
 8001c82:	4a03      	ldr	r2, [pc, #12]	@ (8001c90 <EXTI0_IRQHandler+0x18>)
 8001c84:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001c86:	2001      	movs	r0, #1
 8001c88:	f000 fc8e 	bl	80025a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	200000d8 	.word	0x200000d8

08001c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c9c:	4a14      	ldr	r2, [pc, #80]	@ (8001cf0 <_sbrk+0x5c>)
 8001c9e:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <_sbrk+0x60>)
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca8:	4b13      	ldr	r3, [pc, #76]	@ (8001cf8 <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d102      	bne.n	8001cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <_sbrk+0x64>)
 8001cb2:	4a12      	ldr	r2, [pc, #72]	@ (8001cfc <_sbrk+0x68>)
 8001cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cb6:	4b10      	ldr	r3, [pc, #64]	@ (8001cf8 <_sbrk+0x64>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d207      	bcs.n	8001cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc4:	f002 f820 	bl	8003d08 <__errno>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	220c      	movs	r2, #12
 8001ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cce:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd2:	e009      	b.n	8001ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd4:	4b08      	ldr	r3, [pc, #32]	@ (8001cf8 <_sbrk+0x64>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cda:	4b07      	ldr	r3, [pc, #28]	@ (8001cf8 <_sbrk+0x64>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	4a05      	ldr	r2, [pc, #20]	@ (8001cf8 <_sbrk+0x64>)
 8001ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20020000 	.word	0x20020000
 8001cf4:	00000400 	.word	0x00000400
 8001cf8:	200000dc 	.word	0x200000dc
 8001cfc:	20000230 	.word	0x20000230

08001d00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d04:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <SystemInit+0x20>)
 8001d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d0a:	4a05      	ldr	r2, [pc, #20]	@ (8001d20 <SystemInit+0x20>)
 8001d0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <init_usart>:
#include "stm32f4xx_hal.h"
#include "usart2.h"


// USART2 Initialization
void init_usart(void){
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0

	//Initialize PA2 as USART2_TX and PA3 as USART2_RX
	//Activate A port
	SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIOAEN);
 8001d28:	4b29      	ldr	r3, [pc, #164]	@ (8001dd0 <init_usart+0xac>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2c:	4a28      	ldr	r2, [pc, #160]	@ (8001dd0 <init_usart+0xac>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6313      	str	r3, [r2, #48]	@ 0x30
    /* Setup PA2 and PA3 as Alternate Function */
	//MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER2, 0b01);
	//MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER3, 0b01);
	GPIOA->MODER |= 0x000000A0;
 8001d34:	4b27      	ldr	r3, [pc, #156]	@ (8001dd4 <init_usart+0xb0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a26      	ldr	r2, [pc, #152]	@ (8001dd4 <init_usart+0xb0>)
 8001d3a:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001d3e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= 0xFFFFFFAF;
 8001d40:	4b24      	ldr	r3, [pc, #144]	@ (8001dd4 <init_usart+0xb0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a23      	ldr	r2, [pc, #140]	@ (8001dd4 <init_usart+0xb0>)
 8001d46:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8001d4a:	6013      	str	r3, [r2, #0]
	/* Setup Alternate function as USART2 */
	GPIOA->AFR[0] &= 0xFFFF77FF;
 8001d4c:	4b21      	ldr	r3, [pc, #132]	@ (8001dd4 <init_usart+0xb0>)
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	4a20      	ldr	r2, [pc, #128]	@ (8001dd4 <init_usart+0xb0>)
 8001d52:	f423 4308 	bic.w	r3, r3, #34816	@ 0x8800
 8001d56:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 0x00007700;
 8001d58:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd4 <init_usart+0xb0>)
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd4 <init_usart+0xb0>)
 8001d5e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8001d62:	6213      	str	r3, [r2, #32]
	/* Push pull output */
	GPIOA->OTYPER &= 0xFFFFFFF3;
 8001d64:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd4 <init_usart+0xb0>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	4a1a      	ldr	r2, [pc, #104]	@ (8001dd4 <init_usart+0xb0>)
 8001d6a:	f023 030c 	bic.w	r3, r3, #12
 8001d6e:	6053      	str	r3, [r2, #4]
	/* Pull up resistor on */
	GPIOA->PUPDR &= 0xFFFFFF5F;
 8001d70:	4b18      	ldr	r3, [pc, #96]	@ (8001dd4 <init_usart+0xb0>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4a17      	ldr	r2, [pc, #92]	@ (8001dd4 <init_usart+0xb0>)
 8001d76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001d7a:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 0x00000050;
 8001d7c:	4b15      	ldr	r3, [pc, #84]	@ (8001dd4 <init_usart+0xb0>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	4a14      	ldr	r2, [pc, #80]	@ (8001dd4 <init_usart+0xb0>)
 8001d82:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8001d86:	60d3      	str	r3, [r2, #12]
	/* Output speed set to VeryHigh */
	GPIOA->OSPEEDR |= 0x000000F0;
 8001d88:	4b12      	ldr	r3, [pc, #72]	@ (8001dd4 <init_usart+0xb0>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	4a11      	ldr	r2, [pc, #68]	@ (8001dd4 <init_usart+0xb0>)
 8001d8e:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8001d92:	6093      	str	r3, [r2, #8]


	//Activate USART2 Clock
	SET_BIT(RCC->APB1ENR,RCC_APB1ENR_USART2EN);
 8001d94:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd0 <init_usart+0xac>)
 8001d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d98:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd0 <init_usart+0xac>)
 8001d9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d9e:	6413      	str	r3, [r2, #64]	@ 0x40
	//Enable USART, no TE no RE yet, Oversampling = 8, 8bit mode, no parity
	//Enable Tx and Rx
	USART2->CR1 = 0x0000800C;
 8001da0:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd8 <init_usart+0xb4>)
 8001da2:	f248 020c 	movw	r2, #32780	@ 0x800c
 8001da6:	60da      	str	r2, [r3, #12]
	// No LIN mode, No clock output (synchronous mode)
	USART2->CR2 = 0x00000000;
 8001da8:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <init_usart+0xb4>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
	// No control mode, 3 sample point,
	USART2->CR3 = 0x00000000;
 8001dae:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <init_usart+0xb4>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	615a      	str	r2, [r3, #20]
	// 19200bauds -> USARTDIV = 273.4375 -> Mantissa = 273d=0x111 , Fraction = 0.4375*16 = 7d = 0x7
	USART2->BRR = 0x00001117;
 8001db4:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <init_usart+0xb4>)
 8001db6:	f241 1217 	movw	r2, #4375	@ 0x1117
 8001dba:	609a      	str	r2, [r3, #8]
	//Enable UART
	USART2->CR1 = 0x0000A00C;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <init_usart+0xb4>)
 8001dbe:	f24a 020c 	movw	r2, #40972	@ 0xa00c
 8001dc2:	60da      	str	r2, [r3, #12]
	//SET_BIT(USART2->CR1, USART_CR1_UE );

	HAL_Delay(1);
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f000 f8eb 	bl	8001fa0 <HAL_Delay>
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40020000 	.word	0x40020000
 8001dd8:	40004400 	.word	0x40004400

08001ddc <serial_putc>:
	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
	NVIC_EnableIRQ(USART2_IRQn);
}

void serial_putc(char c)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
	//Load data to register
	USART2->DR = c;
 8001de6:	4a0c      	ldr	r2, [pc, #48]	@ (8001e18 <serial_putc+0x3c>)
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	6053      	str	r3, [r2, #4]
	while(!(USART2->SR & 0x00000080));
 8001dec:	bf00      	nop
 8001dee:	4b0a      	ldr	r3, [pc, #40]	@ (8001e18 <serial_putc+0x3c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f9      	beq.n	8001dee <serial_putc+0x12>
	while(!(USART2->SR & 0x00000040));
 8001dfa:	bf00      	nop
 8001dfc:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <serial_putc+0x3c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f9      	beq.n	8001dfc <serial_putc+0x20>
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40004400 	.word	0x40004400

08001e1c <serial_puts>:

void serial_puts( char *msg)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	int cnt = 0;;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 8001e28:	e009      	b.n	8001e3e <serial_puts+0x22>
		serial_putc(msg[cnt]);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	4413      	add	r3, r2
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff ffd2 	bl	8001ddc <serial_putc>
		cnt++;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	4413      	add	r3, r2
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1ef      	bne.n	8001e2a <serial_puts+0xe>
	}
}
 8001e4a:	bf00      	nop
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <newLine>:

void newLine()
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	serial_putc(10); // nouvelle ligne
 8001e58:	200a      	movs	r0, #10
 8001e5a:	f7ff ffbf 	bl	8001ddc <serial_putc>
	serial_putc(13); // retour chariot
 8001e5e:	200d      	movs	r0, #13
 8001e60:	f7ff ffbc 	bl	8001ddc <serial_putc>
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ea0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e6c:	f7ff ff48 	bl	8001d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e70:	480c      	ldr	r0, [pc, #48]	@ (8001ea4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e72:	490d      	ldr	r1, [pc, #52]	@ (8001ea8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e74:	4a0d      	ldr	r2, [pc, #52]	@ (8001eac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e78:	e002      	b.n	8001e80 <LoopCopyDataInit>

08001e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7e:	3304      	adds	r3, #4

08001e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e84:	d3f9      	bcc.n	8001e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e86:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e88:	4c0a      	ldr	r4, [pc, #40]	@ (8001eb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e8c:	e001      	b.n	8001e92 <LoopFillZerobss>

08001e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e90:	3204      	adds	r2, #4

08001e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e94:	d3fb      	bcc.n	8001e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e96:	f001 ff3d 	bl	8003d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e9a:	f7ff f895 	bl	8000fc8 <main>
  bx  lr    
 8001e9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ea0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001eac:	08004684 	.word	0x08004684
  ldr r2, =_sbss
 8001eb0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001eb4:	2000022c 	.word	0x2000022c

08001eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb8:	e7fe      	b.n	8001eb8 <ADC_IRQHandler>
	...

08001ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <HAL_Init+0x40>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8001efc <HAL_Init+0x40>)
 8001ec6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <HAL_Init+0x40>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8001efc <HAL_Init+0x40>)
 8001ed2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed8:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <HAL_Init+0x40>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a07      	ldr	r2, [pc, #28]	@ (8001efc <HAL_Init+0x40>)
 8001ede:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee4:	2003      	movs	r0, #3
 8001ee6:	f000 f94f 	bl	8002188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eea:	2000      	movs	r0, #0
 8001eec:	f000 f808 	bl	8001f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef0:	f7ff fdea 	bl	8001ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023c00 	.word	0x40023c00

08001f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f08:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <HAL_InitTick+0x54>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b12      	ldr	r3, [pc, #72]	@ (8001f58 <HAL_InitTick+0x58>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 f967 	bl	80021f2 <HAL_SYSTICK_Config>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e00e      	b.n	8001f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b0f      	cmp	r3, #15
 8001f32:	d80a      	bhi.n	8001f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f34:	2200      	movs	r2, #0
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3c:	f000 f92f 	bl	800219e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f40:	4a06      	ldr	r2, [pc, #24]	@ (8001f5c <HAL_InitTick+0x5c>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e000      	b.n	8001f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000008 	.word	0x20000008
 8001f58:	20000010 	.word	0x20000010
 8001f5c:	2000000c 	.word	0x2000000c

08001f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <HAL_IncTick+0x20>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <HAL_IncTick+0x24>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	4a04      	ldr	r2, [pc, #16]	@ (8001f84 <HAL_IncTick+0x24>)
 8001f72:	6013      	str	r3, [r2, #0]
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000010 	.word	0x20000010
 8001f84:	200000e0 	.word	0x200000e0

08001f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	@ (8001f9c <HAL_GetTick+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	200000e0 	.word	0x200000e0

08001fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa8:	f7ff ffee 	bl	8001f88 <HAL_GetTick>
 8001fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb8:	d005      	beq.n	8001fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fba:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <HAL_Delay+0x44>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fc6:	bf00      	nop
 8001fc8:	f7ff ffde 	bl	8001f88 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d8f7      	bhi.n	8001fc8 <HAL_Delay+0x28>
  {
  }
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000010 	.word	0x20000010

08001fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800202c <__NVIC_SetPriorityGrouping+0x44>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002004:	4013      	ands	r3, r2
 8002006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002010:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201a:	4a04      	ldr	r2, [pc, #16]	@ (800202c <__NVIC_SetPriorityGrouping+0x44>)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	60d3      	str	r3, [r2, #12]
}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002034:	4b04      	ldr	r3, [pc, #16]	@ (8002048 <__NVIC_GetPriorityGrouping+0x18>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	f003 0307 	and.w	r3, r3, #7
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	2b00      	cmp	r3, #0
 800205c:	db0b      	blt.n	8002076 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	f003 021f 	and.w	r2, r3, #31
 8002064:	4907      	ldr	r1, [pc, #28]	@ (8002084 <__NVIC_EnableIRQ+0x38>)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	2001      	movs	r0, #1
 800206e:	fa00 f202 	lsl.w	r2, r0, r2
 8002072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000e100 	.word	0xe000e100

08002088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	6039      	str	r1, [r7, #0]
 8002092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002098:	2b00      	cmp	r3, #0
 800209a:	db0a      	blt.n	80020b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	490c      	ldr	r1, [pc, #48]	@ (80020d4 <__NVIC_SetPriority+0x4c>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	0112      	lsls	r2, r2, #4
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	440b      	add	r3, r1
 80020ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b0:	e00a      	b.n	80020c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4908      	ldr	r1, [pc, #32]	@ (80020d8 <__NVIC_SetPriority+0x50>)
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	3b04      	subs	r3, #4
 80020c0:	0112      	lsls	r2, r2, #4
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	440b      	add	r3, r1
 80020c6:	761a      	strb	r2, [r3, #24]
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000e100 	.word	0xe000e100
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b089      	sub	sp, #36	@ 0x24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f1c3 0307 	rsb	r3, r3, #7
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	bf28      	it	cs
 80020fa:	2304      	movcs	r3, #4
 80020fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3304      	adds	r3, #4
 8002102:	2b06      	cmp	r3, #6
 8002104:	d902      	bls.n	800210c <NVIC_EncodePriority+0x30>
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3b03      	subs	r3, #3
 800210a:	e000      	b.n	800210e <NVIC_EncodePriority+0x32>
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	f04f 32ff 	mov.w	r2, #4294967295
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43da      	mvns	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	401a      	ands	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002124:	f04f 31ff 	mov.w	r1, #4294967295
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	43d9      	mvns	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	4313      	orrs	r3, r2
         );
}
 8002136:	4618      	mov	r0, r3
 8002138:	3724      	adds	r7, #36	@ 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3b01      	subs	r3, #1
 8002150:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002154:	d301      	bcc.n	800215a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002156:	2301      	movs	r3, #1
 8002158:	e00f      	b.n	800217a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215a:	4a0a      	ldr	r2, [pc, #40]	@ (8002184 <SysTick_Config+0x40>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002162:	210f      	movs	r1, #15
 8002164:	f04f 30ff 	mov.w	r0, #4294967295
 8002168:	f7ff ff8e 	bl	8002088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800216c:	4b05      	ldr	r3, [pc, #20]	@ (8002184 <SysTick_Config+0x40>)
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002172:	4b04      	ldr	r3, [pc, #16]	@ (8002184 <SysTick_Config+0x40>)
 8002174:	2207      	movs	r2, #7
 8002176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	e000e010 	.word	0xe000e010

08002188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ff29 	bl	8001fe8 <__NVIC_SetPriorityGrouping>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219e:	b580      	push	{r7, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b0:	f7ff ff3e 	bl	8002030 <__NVIC_GetPriorityGrouping>
 80021b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	6978      	ldr	r0, [r7, #20]
 80021bc:	f7ff ff8e 	bl	80020dc <NVIC_EncodePriority>
 80021c0:	4602      	mov	r2, r0
 80021c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff5d 	bl	8002088 <__NVIC_SetPriority>
}
 80021ce:	bf00      	nop
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff31 	bl	800204c <__NVIC_EnableIRQ>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff ffa2 	bl	8002144 <SysTick_Config>
 8002200:	4603      	mov	r3, r0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	@ 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
 8002226:	e16b      	b.n	8002500 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002228:	2201      	movs	r2, #1
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	4013      	ands	r3, r2
 800223a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	429a      	cmp	r2, r3
 8002242:	f040 815a 	bne.w	80024fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	2b01      	cmp	r3, #1
 8002250:	d005      	beq.n	800225e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800225a:	2b02      	cmp	r3, #2
 800225c:	d130      	bne.n	80022c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	2203      	movs	r2, #3
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002294:	2201      	movs	r2, #1
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	f003 0201 	and.w	r2, r3, #1
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b03      	cmp	r3, #3
 80022ca:	d017      	beq.n	80022fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	2203      	movs	r2, #3
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 0303 	and.w	r3, r3, #3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d123      	bne.n	8002350 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	08da      	lsrs	r2, r3, #3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3208      	adds	r2, #8
 8002310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002314:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	220f      	movs	r2, #15
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	691a      	ldr	r2, [r3, #16]
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	08da      	lsrs	r2, r3, #3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3208      	adds	r2, #8
 800234a:	69b9      	ldr	r1, [r7, #24]
 800234c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	2203      	movs	r2, #3
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 0203 	and.w	r2, r3, #3
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 80b4 	beq.w	80024fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	4b60      	ldr	r3, [pc, #384]	@ (8002518 <HAL_GPIO_Init+0x30c>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239a:	4a5f      	ldr	r2, [pc, #380]	@ (8002518 <HAL_GPIO_Init+0x30c>)
 800239c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002518 <HAL_GPIO_Init+0x30c>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ae:	4a5b      	ldr	r2, [pc, #364]	@ (800251c <HAL_GPIO_Init+0x310>)
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	089b      	lsrs	r3, r3, #2
 80023b4:	3302      	adds	r3, #2
 80023b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	220f      	movs	r2, #15
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4013      	ands	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a52      	ldr	r2, [pc, #328]	@ (8002520 <HAL_GPIO_Init+0x314>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d02b      	beq.n	8002432 <HAL_GPIO_Init+0x226>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a51      	ldr	r2, [pc, #324]	@ (8002524 <HAL_GPIO_Init+0x318>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d025      	beq.n	800242e <HAL_GPIO_Init+0x222>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a50      	ldr	r2, [pc, #320]	@ (8002528 <HAL_GPIO_Init+0x31c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d01f      	beq.n	800242a <HAL_GPIO_Init+0x21e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a4f      	ldr	r2, [pc, #316]	@ (800252c <HAL_GPIO_Init+0x320>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d019      	beq.n	8002426 <HAL_GPIO_Init+0x21a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a4e      	ldr	r2, [pc, #312]	@ (8002530 <HAL_GPIO_Init+0x324>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d013      	beq.n	8002422 <HAL_GPIO_Init+0x216>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002534 <HAL_GPIO_Init+0x328>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d00d      	beq.n	800241e <HAL_GPIO_Init+0x212>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a4c      	ldr	r2, [pc, #304]	@ (8002538 <HAL_GPIO_Init+0x32c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d007      	beq.n	800241a <HAL_GPIO_Init+0x20e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a4b      	ldr	r2, [pc, #300]	@ (800253c <HAL_GPIO_Init+0x330>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d101      	bne.n	8002416 <HAL_GPIO_Init+0x20a>
 8002412:	2307      	movs	r3, #7
 8002414:	e00e      	b.n	8002434 <HAL_GPIO_Init+0x228>
 8002416:	2308      	movs	r3, #8
 8002418:	e00c      	b.n	8002434 <HAL_GPIO_Init+0x228>
 800241a:	2306      	movs	r3, #6
 800241c:	e00a      	b.n	8002434 <HAL_GPIO_Init+0x228>
 800241e:	2305      	movs	r3, #5
 8002420:	e008      	b.n	8002434 <HAL_GPIO_Init+0x228>
 8002422:	2304      	movs	r3, #4
 8002424:	e006      	b.n	8002434 <HAL_GPIO_Init+0x228>
 8002426:	2303      	movs	r3, #3
 8002428:	e004      	b.n	8002434 <HAL_GPIO_Init+0x228>
 800242a:	2302      	movs	r3, #2
 800242c:	e002      	b.n	8002434 <HAL_GPIO_Init+0x228>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_GPIO_Init+0x228>
 8002432:	2300      	movs	r3, #0
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	f002 0203 	and.w	r2, r2, #3
 800243a:	0092      	lsls	r2, r2, #2
 800243c:	4093      	lsls	r3, r2
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002444:	4935      	ldr	r1, [pc, #212]	@ (800251c <HAL_GPIO_Init+0x310>)
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	089b      	lsrs	r3, r3, #2
 800244a:	3302      	adds	r3, #2
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002452:	4b3b      	ldr	r3, [pc, #236]	@ (8002540 <HAL_GPIO_Init+0x334>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002476:	4a32      	ldr	r2, [pc, #200]	@ (8002540 <HAL_GPIO_Init+0x334>)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800247c:	4b30      	ldr	r3, [pc, #192]	@ (8002540 <HAL_GPIO_Init+0x334>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024a0:	4a27      	ldr	r2, [pc, #156]	@ (8002540 <HAL_GPIO_Init+0x334>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024a6:	4b26      	ldr	r3, [pc, #152]	@ (8002540 <HAL_GPIO_Init+0x334>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002540 <HAL_GPIO_Init+0x334>)
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002540 <HAL_GPIO_Init+0x334>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024f4:	4a12      	ldr	r2, [pc, #72]	@ (8002540 <HAL_GPIO_Init+0x334>)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3301      	adds	r3, #1
 80024fe:	61fb      	str	r3, [r7, #28]
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	2b0f      	cmp	r3, #15
 8002504:	f67f ae90 	bls.w	8002228 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	3724      	adds	r7, #36	@ 0x24
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40023800 	.word	0x40023800
 800251c:	40013800 	.word	0x40013800
 8002520:	40020000 	.word	0x40020000
 8002524:	40020400 	.word	0x40020400
 8002528:	40020800 	.word	0x40020800
 800252c:	40020c00 	.word	0x40020c00
 8002530:	40021000 	.word	0x40021000
 8002534:	40021400 	.word	0x40021400
 8002538:	40021800 	.word	0x40021800
 800253c:	40021c00 	.word	0x40021c00
 8002540:	40013c00 	.word	0x40013c00

08002544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	887b      	ldrh	r3, [r7, #2]
 8002556:	4013      	ands	r3, r2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
 8002560:	e001      	b.n	8002566 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002562:	2300      	movs	r3, #0
 8002564:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002566:	7bfb      	ldrb	r3, [r7, #15]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	807b      	strh	r3, [r7, #2]
 8002580:	4613      	mov	r3, r2
 8002582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002584:	787b      	ldrb	r3, [r7, #1]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800258a:	887a      	ldrh	r2, [r7, #2]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002590:	e003      	b.n	800259a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002592:	887b      	ldrh	r3, [r7, #2]
 8002594:	041a      	lsls	r2, r3, #16
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	619a      	str	r2, [r3, #24]
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025b2:	4b08      	ldr	r3, [pc, #32]	@ (80025d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025b4:	695a      	ldr	r2, [r3, #20]
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d006      	beq.n	80025cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025be:	4a05      	ldr	r2, [pc, #20]	@ (80025d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025c0:	88fb      	ldrh	r3, [r7, #6]
 80025c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025c4:	88fb      	ldrh	r3, [r7, #6]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe fee8 	bl	800139c <HAL_GPIO_EXTI_Callback>
  }
}
 80025cc:	bf00      	nop
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40013c00 	.word	0x40013c00

080025d8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e128      	b.n	800283c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a90      	ldr	r2, [pc, #576]	@ (8002844 <HAL_I2S_Init+0x26c>)
 8002602:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff fa87 	bl	8001b18 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2202      	movs	r2, #2
 800260e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002620:	f023 030f 	bic.w	r3, r3, #15
 8002624:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2202      	movs	r2, #2
 800262c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d060      	beq.n	80026f8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d102      	bne.n	8002644 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800263e:	2310      	movs	r3, #16
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	e001      	b.n	8002648 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002644:	2320      	movs	r3, #32
 8002646:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b20      	cmp	r3, #32
 800264e:	d802      	bhi.n	8002656 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002656:	2001      	movs	r0, #1
 8002658:	f001 face 	bl	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq>
 800265c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002666:	d125      	bne.n	80026b4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d010      	beq.n	8002692 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	fbb2 f2f3 	udiv	r2, r2, r3
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	461a      	mov	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	fbb2 f3f3 	udiv	r3, r2, r3
 800268c:	3305      	adds	r3, #5
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	e01f      	b.n	80026d2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	fbb2 f2f3 	udiv	r2, r2, r3
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	461a      	mov	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ae:	3305      	adds	r3, #5
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	e00e      	b.n	80026d2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	461a      	mov	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ce:	3305      	adds	r3, #5
 80026d0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4a5c      	ldr	r2, [pc, #368]	@ (8002848 <HAL_I2S_Init+0x270>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	08db      	lsrs	r3, r3, #3
 80026dc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	61bb      	str	r3, [r7, #24]
 80026f6:	e003      	b.n	8002700 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80026f8:	2302      	movs	r3, #2
 80026fa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d902      	bls.n	800270c <HAL_I2S_Init+0x134>
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	2bff      	cmp	r3, #255	@ 0xff
 800270a:	d907      	bls.n	800271c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002710:	f043 0210 	orr.w	r2, r3, #16
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e08f      	b.n	800283c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	ea42 0103 	orr.w	r1, r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	430a      	orrs	r2, r1
 800272e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800273a:	f023 030f 	bic.w	r3, r3, #15
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6851      	ldr	r1, [r2, #4]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6892      	ldr	r2, [r2, #8]
 8002746:	4311      	orrs	r1, r2
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	68d2      	ldr	r2, [r2, #12]
 800274c:	4311      	orrs	r1, r2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6992      	ldr	r2, [r2, #24]
 8002752:	430a      	orrs	r2, r1
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800275e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d161      	bne.n	800282c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a38      	ldr	r2, [pc, #224]	@ (800284c <HAL_I2S_Init+0x274>)
 800276c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a37      	ldr	r2, [pc, #220]	@ (8002850 <HAL_I2S_Init+0x278>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d101      	bne.n	800277c <HAL_I2S_Init+0x1a4>
 8002778:	4b36      	ldr	r3, [pc, #216]	@ (8002854 <HAL_I2S_Init+0x27c>)
 800277a:	e001      	b.n	8002780 <HAL_I2S_Init+0x1a8>
 800277c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	4932      	ldr	r1, [pc, #200]	@ (8002850 <HAL_I2S_Init+0x278>)
 8002788:	428a      	cmp	r2, r1
 800278a:	d101      	bne.n	8002790 <HAL_I2S_Init+0x1b8>
 800278c:	4a31      	ldr	r2, [pc, #196]	@ (8002854 <HAL_I2S_Init+0x27c>)
 800278e:	e001      	b.n	8002794 <HAL_I2S_Init+0x1bc>
 8002790:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002794:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002798:	f023 030f 	bic.w	r3, r3, #15
 800279c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a2b      	ldr	r2, [pc, #172]	@ (8002850 <HAL_I2S_Init+0x278>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d101      	bne.n	80027ac <HAL_I2S_Init+0x1d4>
 80027a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002854 <HAL_I2S_Init+0x27c>)
 80027aa:	e001      	b.n	80027b0 <HAL_I2S_Init+0x1d8>
 80027ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80027b0:	2202      	movs	r2, #2
 80027b2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a25      	ldr	r2, [pc, #148]	@ (8002850 <HAL_I2S_Init+0x278>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d101      	bne.n	80027c2 <HAL_I2S_Init+0x1ea>
 80027be:	4b25      	ldr	r3, [pc, #148]	@ (8002854 <HAL_I2S_Init+0x27c>)
 80027c0:	e001      	b.n	80027c6 <HAL_I2S_Init+0x1ee>
 80027c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027d2:	d003      	beq.n	80027dc <HAL_I2S_Init+0x204>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d103      	bne.n	80027e4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80027dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	e001      	b.n	80027e8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80027e4:	2300      	movs	r3, #0
 80027e6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80027f2:	4313      	orrs	r3, r2
 80027f4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80027fc:	4313      	orrs	r3, r2
 80027fe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002806:	4313      	orrs	r3, r2
 8002808:	b29a      	uxth	r2, r3
 800280a:	897b      	ldrh	r3, [r7, #10]
 800280c:	4313      	orrs	r3, r2
 800280e:	b29b      	uxth	r3, r3
 8002810:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002814:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a0d      	ldr	r2, [pc, #52]	@ (8002850 <HAL_I2S_Init+0x278>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d101      	bne.n	8002824 <HAL_I2S_Init+0x24c>
 8002820:	4b0c      	ldr	r3, [pc, #48]	@ (8002854 <HAL_I2S_Init+0x27c>)
 8002822:	e001      	b.n	8002828 <HAL_I2S_Init+0x250>
 8002824:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002828:	897a      	ldrh	r2, [r7, #10]
 800282a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3720      	adds	r7, #32
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	08002b31 	.word	0x08002b31
 8002848:	cccccccd 	.word	0xcccccccd
 800284c:	08002cb9 	.word	0x08002cb9
 8002850:	40003800 	.word	0x40003800
 8002854:	40003400 	.word	0x40003400

08002858 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	4613      	mov	r3, r2
 8002866:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <HAL_I2S_Transmit+0x1c>
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0dc      	b.n	8002a32 <HAL_I2S_Transmit+0x1da>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_I2S_Transmit+0x30>
 8002884:	2302      	movs	r3, #2
 8002886:	e0d4      	b.n	8002a32 <HAL_I2S_Transmit+0x1da>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b01      	cmp	r3, #1
 800289a:	d005      	beq.n	80028a8 <HAL_I2S_Transmit+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_BUSY;
 80028a4:	2302      	movs	r3, #2
 80028a6:	e0c4      	b.n	8002a32 <HAL_I2S_Transmit+0x1da>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2203      	movs	r2, #3
 80028ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d002      	beq.n	80028d4 <HAL_I2S_Transmit+0x7c>
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2b05      	cmp	r3, #5
 80028d2:	d10a      	bne.n	80028ea <HAL_I2S_Transmit+0x92>
  {
    hi2s->TxXferSize = (Size << 1U);
 80028d4:	88fb      	ldrh	r3, [r7, #6]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028e8:	e005      	b.n	80028f6 <HAL_I2S_Transmit+0x9e>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	88fa      	ldrh	r2, [r7, #6]
 80028ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	88fa      	ldrh	r2, [r7, #6]
 80028f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002908:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800290c:	d007      	beq.n	800291e <HAL_I2S_Transmit+0xc6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	69da      	ldr	r2, [r3, #28]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800291c:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2201      	movs	r2, #1
 8002922:	2102      	movs	r1, #2
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 f98d 	bl	8002c44 <I2S_WaitFlagStateUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d04e      	beq.n	80029ce <HAL_I2S_Transmit+0x176>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002934:	f043 0201 	orr.w	r2, r3, #1
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2s);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e070      	b.n	8002a32 <HAL_I2S_Transmit+0x1da>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002954:	881a      	ldrh	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002960:	1c9a      	adds	r2, r3, #2
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2s->TxXferCount--;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800296a:	b29b      	uxth	r3, r3
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	2201      	movs	r2, #1
 8002978:	2102      	movs	r1, #2
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 f962 	bl	8002c44 <I2S_WaitFlagStateUntilTimeout>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00f      	beq.n	80029a6 <HAL_I2S_Transmit+0x14e>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298a:	f043 0201 	orr.w	r2, r3, #1
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e045      	b.n	8002a32 <HAL_I2S_Transmit+0x1da>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d10c      	bne.n	80029ce <HAL_I2S_Transmit+0x176>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80029b4:	2300      	movs	r3, #0
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c6:	f043 0204 	orr.w	r2, r3, #4
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	645a      	str	r2, [r3, #68]	@ 0x44
  while (hi2s->TxXferCount > 0U)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1bb      	bne.n	8002950 <HAL_I2S_Transmit+0xf8>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <HAL_I2S_Transmit+0x196>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029ec:	d118      	bne.n	8002a20 <HAL_I2S_Transmit+0x1c8>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	2200      	movs	r2, #0
 80029f2:	2180      	movs	r1, #128	@ 0x80
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 f925 	bl	8002c44 <I2S_WaitFlagStateUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00f      	beq.n	8002a20 <HAL_I2S_Transmit+0x1c8>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a04:	f043 0201 	orr.w	r2, r3, #1
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e008      	b.n	8002a32 <HAL_I2S_Transmit+0x1da>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  __HAL_UNLOCK(hi2s);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a82:	881a      	ldrh	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8e:	1c9a      	adds	r2, r3, #2
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10e      	bne.n	8002aca <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002aba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff ffb8 	bl	8002a3a <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae4:	b292      	uxth	r2, r2
 8002ae6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aec:	1c9a      	adds	r2, r3, #2
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10e      	bne.n	8002b28 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b18:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff ff93 	bl	8002a4e <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d13a      	bne.n	8002bc2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d109      	bne.n	8002b6a <I2S_IRQHandler+0x3a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b60:	2b40      	cmp	r3, #64	@ 0x40
 8002b62:	d102      	bne.n	8002b6a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff ffb4 	bl	8002ad2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b70:	2b40      	cmp	r3, #64	@ 0x40
 8002b72:	d126      	bne.n	8002bc2 <I2S_IRQHandler+0x92>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	d11f      	bne.n	8002bc2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b90:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b92:	2300      	movs	r3, #0
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb4:	f043 0202 	orr.w	r2, r3, #2
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ff50 	bl	8002a62 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d136      	bne.n	8002c3c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d109      	bne.n	8002bec <I2S_IRQHandler+0xbc>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002be2:	2b80      	cmp	r3, #128	@ 0x80
 8002be4:	d102      	bne.n	8002bec <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff ff45 	bl	8002a76 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d122      	bne.n	8002c3c <I2S_IRQHandler+0x10c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b20      	cmp	r3, #32
 8002c02:	d11b      	bne.n	8002c3c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002c12:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2e:	f043 0204 	orr.w	r2, r3, #4
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff ff13 	bl	8002a62 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	4613      	mov	r3, r2
 8002c52:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c54:	f7ff f998 	bl	8001f88 <HAL_GetTick>
 8002c58:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002c5a:	e018      	b.n	8002c8e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c62:	d014      	beq.n	8002c8e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002c64:	f7ff f990 	bl	8001f88 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d902      	bls.n	8002c7a <I2S_WaitFlagStateUntilTimeout+0x36>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d109      	bne.n	8002c8e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e00f      	b.n	8002cae <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4013      	ands	r3, r2
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	bf0c      	ite	eq
 8002c9e:	2301      	moveq	r3, #1
 8002ca0:	2300      	movne	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d1d7      	bne.n	8002c5c <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a92      	ldr	r2, [pc, #584]	@ (8002f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002cd2:	4b92      	ldr	r3, [pc, #584]	@ (8002f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cd4:	e001      	b.n	8002cda <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002cd6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a8b      	ldr	r2, [pc, #556]	@ (8002f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d101      	bne.n	8002cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002cf0:	4b8a      	ldr	r3, [pc, #552]	@ (8002f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cf2:	e001      	b.n	8002cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002cf4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d04:	d004      	beq.n	8002d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f040 8099 	bne.w	8002e42 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d107      	bne.n	8002d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f925 	bl	8002f74 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d107      	bne.n	8002d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f9c8 	bl	80030d4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d4a:	2b40      	cmp	r3, #64	@ 0x40
 8002d4c:	d13a      	bne.n	8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d035      	beq.n	8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a6e      	ldr	r2, [pc, #440]	@ (8002f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d101      	bne.n	8002d66 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002d62:	4b6e      	ldr	r3, [pc, #440]	@ (8002f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d64:	e001      	b.n	8002d6a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002d66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4969      	ldr	r1, [pc, #420]	@ (8002f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d72:	428b      	cmp	r3, r1
 8002d74:	d101      	bne.n	8002d7a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002d76:	4b69      	ldr	r3, [pc, #420]	@ (8002f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d78:	e001      	b.n	8002d7e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002d7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d7e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d82:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002d92:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db6:	f043 0202 	orr.w	r2, r3, #2
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff fe4f 	bl	8002a62 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	f040 80c3 	bne.w	8002f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f003 0320 	and.w	r3, r3, #32
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 80bd 	beq.w	8002f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002dea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a49      	ldr	r2, [pc, #292]	@ (8002f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d101      	bne.n	8002dfa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002df6:	4b49      	ldr	r3, [pc, #292]	@ (8002f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002df8:	e001      	b.n	8002dfe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002dfa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4944      	ldr	r1, [pc, #272]	@ (8002f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e06:	428b      	cmp	r3, r1
 8002e08:	d101      	bne.n	8002e0e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002e0a:	4b44      	ldr	r3, [pc, #272]	@ (8002f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e0c:	e001      	b.n	8002e12 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002e0e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e12:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e16:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e32:	f043 0204 	orr.w	r2, r3, #4
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff fe11 	bl	8002a62 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e40:	e089      	b.n	8002f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d107      	bne.n	8002e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f8be 	bl	8002fd8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d107      	bne.n	8002e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f8fd 	bl	8003070 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e7c:	2b40      	cmp	r3, #64	@ 0x40
 8002e7e:	d12f      	bne.n	8002ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d02a      	beq.n	8002ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e98:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1e      	ldr	r2, [pc, #120]	@ (8002f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d101      	bne.n	8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ea6:	e001      	b.n	8002eac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002ea8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4919      	ldr	r1, [pc, #100]	@ (8002f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002eb4:	428b      	cmp	r3, r1
 8002eb6:	d101      	bne.n	8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002eb8:	4b18      	ldr	r3, [pc, #96]	@ (8002f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002eba:	e001      	b.n	8002ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002ebc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ec0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002ec4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed2:	f043 0202 	orr.w	r2, r3, #2
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff fdc1 	bl	8002a62 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d136      	bne.n	8002f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d031      	beq.n	8002f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a07      	ldr	r2, [pc, #28]	@ (8002f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d101      	bne.n	8002f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002efe:	4b07      	ldr	r3, [pc, #28]	@ (8002f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f00:	e001      	b.n	8002f06 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002f02:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4902      	ldr	r1, [pc, #8]	@ (8002f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f0e:	428b      	cmp	r3, r1
 8002f10:	d106      	bne.n	8002f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002f12:	4b02      	ldr	r3, [pc, #8]	@ (8002f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f14:	e006      	b.n	8002f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002f16:	bf00      	nop
 8002f18:	40003800 	.word	0x40003800
 8002f1c:	40003400 	.word	0x40003400
 8002f20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f24:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002f28:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002f38:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f46:	f043 0204 	orr.w	r2, r3, #4
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff fd87 	bl	8002a62 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f54:	e000      	b.n	8002f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f56:	bf00      	nop
}
 8002f58:	bf00      	nop
 8002f5a:	3720      	adds	r7, #32
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f80:	1c99      	adds	r1, r3, #2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6251      	str	r1, [r2, #36]	@ 0x24
 8002f86:	881a      	ldrh	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d113      	bne.n	8002fce <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002fb4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d106      	bne.n	8002fce <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff ffc9 	bl	8002f60 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe4:	1c99      	adds	r1, r3, #2
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6251      	str	r1, [r2, #36]	@ 0x24
 8002fea:	8819      	ldrh	r1, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8003068 <I2SEx_TxISR_I2SExt+0x90>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d101      	bne.n	8002ffa <I2SEx_TxISR_I2SExt+0x22>
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800306c <I2SEx_TxISR_I2SExt+0x94>)
 8002ff8:	e001      	b.n	8002ffe <I2SEx_TxISR_I2SExt+0x26>
 8002ffa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ffe:	460a      	mov	r2, r1
 8003000:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003006:	b29b      	uxth	r3, r3
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003014:	b29b      	uxth	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d121      	bne.n	800305e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a12      	ldr	r2, [pc, #72]	@ (8003068 <I2SEx_TxISR_I2SExt+0x90>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d101      	bne.n	8003028 <I2SEx_TxISR_I2SExt+0x50>
 8003024:	4b11      	ldr	r3, [pc, #68]	@ (800306c <I2SEx_TxISR_I2SExt+0x94>)
 8003026:	e001      	b.n	800302c <I2SEx_TxISR_I2SExt+0x54>
 8003028:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	490d      	ldr	r1, [pc, #52]	@ (8003068 <I2SEx_TxISR_I2SExt+0x90>)
 8003034:	428b      	cmp	r3, r1
 8003036:	d101      	bne.n	800303c <I2SEx_TxISR_I2SExt+0x64>
 8003038:	4b0c      	ldr	r3, [pc, #48]	@ (800306c <I2SEx_TxISR_I2SExt+0x94>)
 800303a:	e001      	b.n	8003040 <I2SEx_TxISR_I2SExt+0x68>
 800303c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003040:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003044:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d106      	bne.n	800305e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff ff81 	bl	8002f60 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40003800 	.word	0x40003800
 800306c:	40003400 	.word	0x40003400

08003070 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68d8      	ldr	r0, [r3, #12]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003082:	1c99      	adds	r1, r3, #2
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003088:	b282      	uxth	r2, r0
 800308a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800309e:	b29b      	uxth	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d113      	bne.n	80030cc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80030b2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff ff4a 	bl	8002f60 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030cc:	bf00      	nop
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a20      	ldr	r2, [pc, #128]	@ (8003164 <I2SEx_RxISR_I2SExt+0x90>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d101      	bne.n	80030ea <I2SEx_RxISR_I2SExt+0x16>
 80030e6:	4b20      	ldr	r3, [pc, #128]	@ (8003168 <I2SEx_RxISR_I2SExt+0x94>)
 80030e8:	e001      	b.n	80030ee <I2SEx_RxISR_I2SExt+0x1a>
 80030ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030ee:	68d8      	ldr	r0, [r3, #12]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f4:	1c99      	adds	r1, r3, #2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80030fa:	b282      	uxth	r2, r0
 80030fc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003102:	b29b      	uxth	r3, r3
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d121      	bne.n	800315a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a12      	ldr	r2, [pc, #72]	@ (8003164 <I2SEx_RxISR_I2SExt+0x90>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d101      	bne.n	8003124 <I2SEx_RxISR_I2SExt+0x50>
 8003120:	4b11      	ldr	r3, [pc, #68]	@ (8003168 <I2SEx_RxISR_I2SExt+0x94>)
 8003122:	e001      	b.n	8003128 <I2SEx_RxISR_I2SExt+0x54>
 8003124:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	490d      	ldr	r1, [pc, #52]	@ (8003164 <I2SEx_RxISR_I2SExt+0x90>)
 8003130:	428b      	cmp	r3, r1
 8003132:	d101      	bne.n	8003138 <I2SEx_RxISR_I2SExt+0x64>
 8003134:	4b0c      	ldr	r3, [pc, #48]	@ (8003168 <I2SEx_RxISR_I2SExt+0x94>)
 8003136:	e001      	b.n	800313c <I2SEx_RxISR_I2SExt+0x68>
 8003138:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800313c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003140:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d106      	bne.n	800315a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff ff03 	bl	8002f60 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800315a:	bf00      	nop
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40003800 	.word	0x40003800
 8003168:	40003400 	.word	0x40003400

0800316c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e267      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d075      	beq.n	8003276 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800318a:	4b88      	ldr	r3, [pc, #544]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
 8003192:	2b04      	cmp	r3, #4
 8003194:	d00c      	beq.n	80031b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003196:	4b85      	ldr	r3, [pc, #532]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d112      	bne.n	80031c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031a2:	4b82      	ldr	r3, [pc, #520]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031ae:	d10b      	bne.n	80031c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b0:	4b7e      	ldr	r3, [pc, #504]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d05b      	beq.n	8003274 <HAL_RCC_OscConfig+0x108>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d157      	bne.n	8003274 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e242      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031d0:	d106      	bne.n	80031e0 <HAL_RCC_OscConfig+0x74>
 80031d2:	4b76      	ldr	r3, [pc, #472]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a75      	ldr	r2, [pc, #468]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 80031d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	e01d      	b.n	800321c <HAL_RCC_OscConfig+0xb0>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031e8:	d10c      	bne.n	8003204 <HAL_RCC_OscConfig+0x98>
 80031ea:	4b70      	ldr	r3, [pc, #448]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a6f      	ldr	r2, [pc, #444]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 80031f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	4b6d      	ldr	r3, [pc, #436]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a6c      	ldr	r2, [pc, #432]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 80031fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	e00b      	b.n	800321c <HAL_RCC_OscConfig+0xb0>
 8003204:	4b69      	ldr	r3, [pc, #420]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a68      	ldr	r2, [pc, #416]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 800320a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	4b66      	ldr	r3, [pc, #408]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a65      	ldr	r2, [pc, #404]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 8003216:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800321a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d013      	beq.n	800324c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003224:	f7fe feb0 	bl	8001f88 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800322c:	f7fe feac 	bl	8001f88 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	@ 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e207      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323e:	4b5b      	ldr	r3, [pc, #364]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f0      	beq.n	800322c <HAL_RCC_OscConfig+0xc0>
 800324a:	e014      	b.n	8003276 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324c:	f7fe fe9c 	bl	8001f88 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003254:	f7fe fe98 	bl	8001f88 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b64      	cmp	r3, #100	@ 0x64
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e1f3      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003266:	4b51      	ldr	r3, [pc, #324]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0xe8>
 8003272:	e000      	b.n	8003276 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d063      	beq.n	800334a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003282:	4b4a      	ldr	r3, [pc, #296]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00b      	beq.n	80032a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800328e:	4b47      	ldr	r3, [pc, #284]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003296:	2b08      	cmp	r3, #8
 8003298:	d11c      	bne.n	80032d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800329a:	4b44      	ldr	r3, [pc, #272]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d116      	bne.n	80032d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032a6:	4b41      	ldr	r3, [pc, #260]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d005      	beq.n	80032be <HAL_RCC_OscConfig+0x152>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d001      	beq.n	80032be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e1c7      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032be:	4b3b      	ldr	r3, [pc, #236]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	4937      	ldr	r1, [pc, #220]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032d2:	e03a      	b.n	800334a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d020      	beq.n	800331e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032dc:	4b34      	ldr	r3, [pc, #208]	@ (80033b0 <HAL_RCC_OscConfig+0x244>)
 80032de:	2201      	movs	r2, #1
 80032e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e2:	f7fe fe51 	bl	8001f88 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ea:	f7fe fe4d 	bl	8001f88 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e1a8      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fc:	4b2b      	ldr	r3, [pc, #172]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0f0      	beq.n	80032ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003308:	4b28      	ldr	r3, [pc, #160]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	4925      	ldr	r1, [pc, #148]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 8003318:	4313      	orrs	r3, r2
 800331a:	600b      	str	r3, [r1, #0]
 800331c:	e015      	b.n	800334a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800331e:	4b24      	ldr	r3, [pc, #144]	@ (80033b0 <HAL_RCC_OscConfig+0x244>)
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003324:	f7fe fe30 	bl	8001f88 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800332c:	f7fe fe2c 	bl	8001f88 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e187      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800333e:	4b1b      	ldr	r3, [pc, #108]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d036      	beq.n	80033c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d016      	beq.n	800338c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800335e:	4b15      	ldr	r3, [pc, #84]	@ (80033b4 <HAL_RCC_OscConfig+0x248>)
 8003360:	2201      	movs	r2, #1
 8003362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003364:	f7fe fe10 	bl	8001f88 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800336c:	f7fe fe0c 	bl	8001f88 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e167      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800337e:	4b0b      	ldr	r3, [pc, #44]	@ (80033ac <HAL_RCC_OscConfig+0x240>)
 8003380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0x200>
 800338a:	e01b      	b.n	80033c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800338c:	4b09      	ldr	r3, [pc, #36]	@ (80033b4 <HAL_RCC_OscConfig+0x248>)
 800338e:	2200      	movs	r2, #0
 8003390:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003392:	f7fe fdf9 	bl	8001f88 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003398:	e00e      	b.n	80033b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800339a:	f7fe fdf5 	bl	8001f88 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d907      	bls.n	80033b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e150      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
 80033ac:	40023800 	.word	0x40023800
 80033b0:	42470000 	.word	0x42470000
 80033b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b8:	4b88      	ldr	r3, [pc, #544]	@ (80035dc <HAL_RCC_OscConfig+0x470>)
 80033ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1ea      	bne.n	800339a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 8097 	beq.w	8003500 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d2:	2300      	movs	r3, #0
 80033d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033d6:	4b81      	ldr	r3, [pc, #516]	@ (80035dc <HAL_RCC_OscConfig+0x470>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10f      	bne.n	8003402 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	4b7d      	ldr	r3, [pc, #500]	@ (80035dc <HAL_RCC_OscConfig+0x470>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	4a7c      	ldr	r2, [pc, #496]	@ (80035dc <HAL_RCC_OscConfig+0x470>)
 80033ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033f2:	4b7a      	ldr	r3, [pc, #488]	@ (80035dc <HAL_RCC_OscConfig+0x470>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033fa:	60bb      	str	r3, [r7, #8]
 80033fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033fe:	2301      	movs	r3, #1
 8003400:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003402:	4b77      	ldr	r3, [pc, #476]	@ (80035e0 <HAL_RCC_OscConfig+0x474>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d118      	bne.n	8003440 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800340e:	4b74      	ldr	r3, [pc, #464]	@ (80035e0 <HAL_RCC_OscConfig+0x474>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a73      	ldr	r2, [pc, #460]	@ (80035e0 <HAL_RCC_OscConfig+0x474>)
 8003414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800341a:	f7fe fdb5 	bl	8001f88 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003422:	f7fe fdb1 	bl	8001f88 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e10c      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003434:	4b6a      	ldr	r3, [pc, #424]	@ (80035e0 <HAL_RCC_OscConfig+0x474>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0f0      	beq.n	8003422 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d106      	bne.n	8003456 <HAL_RCC_OscConfig+0x2ea>
 8003448:	4b64      	ldr	r3, [pc, #400]	@ (80035dc <HAL_RCC_OscConfig+0x470>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344c:	4a63      	ldr	r2, [pc, #396]	@ (80035dc <HAL_RCC_OscConfig+0x470>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	6713      	str	r3, [r2, #112]	@ 0x70
 8003454:	e01c      	b.n	8003490 <HAL_RCC_OscConfig+0x324>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2b05      	cmp	r3, #5
 800345c:	d10c      	bne.n	8003478 <HAL_RCC_OscConfig+0x30c>
 800345e:	4b5f      	ldr	r3, [pc, #380]	@ (80035dc <HAL_RCC_OscConfig+0x470>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003462:	4a5e      	ldr	r2, [pc, #376]	@ (80035dc <HAL_RCC_OscConfig+0x470>)
 8003464:	f043 0304 	orr.w	r3, r3, #4
 8003468:	6713      	str	r3, [r2, #112]	@ 0x70
 800346a:	4b5c      	ldr	r3, [pc, #368]	@ (80035dc <HAL_RCC_OscConfig+0x470>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346e:	4a5b      	ldr	r2, [pc, #364]	@ (80035dc <HAL_RCC_OscConfig+0x470>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	6713      	str	r3, [r2, #112]	@ 0x70
 8003476:	e00b      	b.n	8003490 <HAL_RCC_OscConfig+0x324>
 8003478:	4b58      	ldr	r3, [pc, #352]	@ (80035dc <HAL_RCC_OscConfig+0x470>)
 800347a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800347c:	4a57      	ldr	r2, [pc, #348]	@ (80035dc <HAL_RCC_OscConfig+0x470>)
 800347e:	f023 0301 	bic.w	r3, r3, #1
 8003482:	6713      	str	r3, [r2, #112]	@ 0x70
 8003484:	4b55      	ldr	r3, [pc, #340]	@ (80035dc <HAL_RCC_OscConfig+0x470>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003488:	4a54      	ldr	r2, [pc, #336]	@ (80035dc <HAL_RCC_OscConfig+0x470>)
 800348a:	f023 0304 	bic.w	r3, r3, #4
 800348e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d015      	beq.n	80034c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003498:	f7fe fd76 	bl	8001f88 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349e:	e00a      	b.n	80034b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a0:	f7fe fd72 	bl	8001f88 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e0cb      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b6:	4b49      	ldr	r3, [pc, #292]	@ (80035dc <HAL_RCC_OscConfig+0x470>)
 80034b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0ee      	beq.n	80034a0 <HAL_RCC_OscConfig+0x334>
 80034c2:	e014      	b.n	80034ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c4:	f7fe fd60 	bl	8001f88 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ca:	e00a      	b.n	80034e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034cc:	f7fe fd5c 	bl	8001f88 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e0b5      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e2:	4b3e      	ldr	r3, [pc, #248]	@ (80035dc <HAL_RCC_OscConfig+0x470>)
 80034e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1ee      	bne.n	80034cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ee:	7dfb      	ldrb	r3, [r7, #23]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d105      	bne.n	8003500 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f4:	4b39      	ldr	r3, [pc, #228]	@ (80035dc <HAL_RCC_OscConfig+0x470>)
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	4a38      	ldr	r2, [pc, #224]	@ (80035dc <HAL_RCC_OscConfig+0x470>)
 80034fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 80a1 	beq.w	800364c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800350a:	4b34      	ldr	r3, [pc, #208]	@ (80035dc <HAL_RCC_OscConfig+0x470>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
 8003512:	2b08      	cmp	r3, #8
 8003514:	d05c      	beq.n	80035d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d141      	bne.n	80035a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351e:	4b31      	ldr	r3, [pc, #196]	@ (80035e4 <HAL_RCC_OscConfig+0x478>)
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003524:	f7fe fd30 	bl	8001f88 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800352c:	f7fe fd2c 	bl	8001f88 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e087      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353e:	4b27      	ldr	r3, [pc, #156]	@ (80035dc <HAL_RCC_OscConfig+0x470>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f0      	bne.n	800352c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69da      	ldr	r2, [r3, #28]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003558:	019b      	lsls	r3, r3, #6
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003560:	085b      	lsrs	r3, r3, #1
 8003562:	3b01      	subs	r3, #1
 8003564:	041b      	lsls	r3, r3, #16
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356c:	061b      	lsls	r3, r3, #24
 800356e:	491b      	ldr	r1, [pc, #108]	@ (80035dc <HAL_RCC_OscConfig+0x470>)
 8003570:	4313      	orrs	r3, r2
 8003572:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003574:	4b1b      	ldr	r3, [pc, #108]	@ (80035e4 <HAL_RCC_OscConfig+0x478>)
 8003576:	2201      	movs	r2, #1
 8003578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357a:	f7fe fd05 	bl	8001f88 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003582:	f7fe fd01 	bl	8001f88 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e05c      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003594:	4b11      	ldr	r3, [pc, #68]	@ (80035dc <HAL_RCC_OscConfig+0x470>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f0      	beq.n	8003582 <HAL_RCC_OscConfig+0x416>
 80035a0:	e054      	b.n	800364c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a2:	4b10      	ldr	r3, [pc, #64]	@ (80035e4 <HAL_RCC_OscConfig+0x478>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a8:	f7fe fcee 	bl	8001f88 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b0:	f7fe fcea 	bl	8001f88 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e045      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c2:	4b06      	ldr	r3, [pc, #24]	@ (80035dc <HAL_RCC_OscConfig+0x470>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0x444>
 80035ce:	e03d      	b.n	800364c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d107      	bne.n	80035e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e038      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
 80035dc:	40023800 	.word	0x40023800
 80035e0:	40007000 	.word	0x40007000
 80035e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003658 <HAL_RCC_OscConfig+0x4ec>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d028      	beq.n	8003648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003600:	429a      	cmp	r2, r3
 8003602:	d121      	bne.n	8003648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360e:	429a      	cmp	r2, r3
 8003610:	d11a      	bne.n	8003648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003618:	4013      	ands	r3, r2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800361e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003620:	4293      	cmp	r3, r2
 8003622:	d111      	bne.n	8003648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362e:	085b      	lsrs	r3, r3, #1
 8003630:	3b01      	subs	r3, #1
 8003632:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003634:	429a      	cmp	r2, r3
 8003636:	d107      	bne.n	8003648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003642:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003644:	429a      	cmp	r2, r3
 8003646:	d001      	beq.n	800364c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e000      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40023800 	.word	0x40023800

0800365c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0cc      	b.n	800380a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003670:	4b68      	ldr	r3, [pc, #416]	@ (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d90c      	bls.n	8003698 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367e:	4b65      	ldr	r3, [pc, #404]	@ (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003686:	4b63      	ldr	r3, [pc, #396]	@ (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0b8      	b.n	800380a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d020      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036b0:	4b59      	ldr	r3, [pc, #356]	@ (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	4a58      	ldr	r2, [pc, #352]	@ (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036c8:	4b53      	ldr	r3, [pc, #332]	@ (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	4a52      	ldr	r2, [pc, #328]	@ (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d4:	4b50      	ldr	r3, [pc, #320]	@ (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	494d      	ldr	r1, [pc, #308]	@ (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d044      	beq.n	800377c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d107      	bne.n	800370a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fa:	4b47      	ldr	r3, [pc, #284]	@ (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d119      	bne.n	800373a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e07f      	b.n	800380a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d003      	beq.n	800371a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003716:	2b03      	cmp	r3, #3
 8003718:	d107      	bne.n	800372a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800371a:	4b3f      	ldr	r3, [pc, #252]	@ (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d109      	bne.n	800373a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e06f      	b.n	800380a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800372a:	4b3b      	ldr	r3, [pc, #236]	@ (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e067      	b.n	800380a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800373a:	4b37      	ldr	r3, [pc, #220]	@ (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f023 0203 	bic.w	r2, r3, #3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	4934      	ldr	r1, [pc, #208]	@ (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 8003748:	4313      	orrs	r3, r2
 800374a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800374c:	f7fe fc1c 	bl	8001f88 <HAL_GetTick>
 8003750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003752:	e00a      	b.n	800376a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003754:	f7fe fc18 	bl	8001f88 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003762:	4293      	cmp	r3, r2
 8003764:	d901      	bls.n	800376a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e04f      	b.n	800380a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376a:	4b2b      	ldr	r3, [pc, #172]	@ (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 020c 	and.w	r2, r3, #12
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	429a      	cmp	r2, r3
 800377a:	d1eb      	bne.n	8003754 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800377c:	4b25      	ldr	r3, [pc, #148]	@ (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d20c      	bcs.n	80037a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378a:	4b22      	ldr	r3, [pc, #136]	@ (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003792:	4b20      	ldr	r3, [pc, #128]	@ (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e032      	b.n	800380a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037b0:	4b19      	ldr	r3, [pc, #100]	@ (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	4916      	ldr	r1, [pc, #88]	@ (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d009      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ce:	4b12      	ldr	r3, [pc, #72]	@ (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	490e      	ldr	r1, [pc, #56]	@ (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037e2:	f000 f821 	bl	8003828 <HAL_RCC_GetSysClockFreq>
 80037e6:	4602      	mov	r2, r0
 80037e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	091b      	lsrs	r3, r3, #4
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	490a      	ldr	r1, [pc, #40]	@ (800381c <HAL_RCC_ClockConfig+0x1c0>)
 80037f4:	5ccb      	ldrb	r3, [r1, r3]
 80037f6:	fa22 f303 	lsr.w	r3, r2, r3
 80037fa:	4a09      	ldr	r2, [pc, #36]	@ (8003820 <HAL_RCC_ClockConfig+0x1c4>)
 80037fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037fe:	4b09      	ldr	r3, [pc, #36]	@ (8003824 <HAL_RCC_ClockConfig+0x1c8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fe fb7c 	bl	8001f00 <HAL_InitTick>

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40023c00 	.word	0x40023c00
 8003818:	40023800 	.word	0x40023800
 800381c:	08004630 	.word	0x08004630
 8003820:	20000008 	.word	0x20000008
 8003824:	2000000c 	.word	0x2000000c

08003828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800382c:	b094      	sub	sp, #80	@ 0x50
 800382e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	647b      	str	r3, [r7, #68]	@ 0x44
 8003834:	2300      	movs	r3, #0
 8003836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003838:	2300      	movs	r3, #0
 800383a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003840:	4b79      	ldr	r3, [pc, #484]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 030c 	and.w	r3, r3, #12
 8003848:	2b08      	cmp	r3, #8
 800384a:	d00d      	beq.n	8003868 <HAL_RCC_GetSysClockFreq+0x40>
 800384c:	2b08      	cmp	r3, #8
 800384e:	f200 80e1 	bhi.w	8003a14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <HAL_RCC_GetSysClockFreq+0x34>
 8003856:	2b04      	cmp	r3, #4
 8003858:	d003      	beq.n	8003862 <HAL_RCC_GetSysClockFreq+0x3a>
 800385a:	e0db      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800385c:	4b73      	ldr	r3, [pc, #460]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x204>)
 800385e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003860:	e0db      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003862:	4b73      	ldr	r3, [pc, #460]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0x208>)
 8003864:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003866:	e0d8      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003868:	4b6f      	ldr	r3, [pc, #444]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x200>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003870:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003872:	4b6d      	ldr	r3, [pc, #436]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d063      	beq.n	8003946 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800387e:	4b6a      	ldr	r3, [pc, #424]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	099b      	lsrs	r3, r3, #6
 8003884:	2200      	movs	r2, #0
 8003886:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003888:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800388a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800388c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003890:	633b      	str	r3, [r7, #48]	@ 0x30
 8003892:	2300      	movs	r3, #0
 8003894:	637b      	str	r3, [r7, #52]	@ 0x34
 8003896:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800389a:	4622      	mov	r2, r4
 800389c:	462b      	mov	r3, r5
 800389e:	f04f 0000 	mov.w	r0, #0
 80038a2:	f04f 0100 	mov.w	r1, #0
 80038a6:	0159      	lsls	r1, r3, #5
 80038a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038ac:	0150      	lsls	r0, r2, #5
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4621      	mov	r1, r4
 80038b4:	1a51      	subs	r1, r2, r1
 80038b6:	6139      	str	r1, [r7, #16]
 80038b8:	4629      	mov	r1, r5
 80038ba:	eb63 0301 	sbc.w	r3, r3, r1
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038cc:	4659      	mov	r1, fp
 80038ce:	018b      	lsls	r3, r1, #6
 80038d0:	4651      	mov	r1, sl
 80038d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038d6:	4651      	mov	r1, sl
 80038d8:	018a      	lsls	r2, r1, #6
 80038da:	4651      	mov	r1, sl
 80038dc:	ebb2 0801 	subs.w	r8, r2, r1
 80038e0:	4659      	mov	r1, fp
 80038e2:	eb63 0901 	sbc.w	r9, r3, r1
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038fa:	4690      	mov	r8, r2
 80038fc:	4699      	mov	r9, r3
 80038fe:	4623      	mov	r3, r4
 8003900:	eb18 0303 	adds.w	r3, r8, r3
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	462b      	mov	r3, r5
 8003908:	eb49 0303 	adc.w	r3, r9, r3
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800391a:	4629      	mov	r1, r5
 800391c:	024b      	lsls	r3, r1, #9
 800391e:	4621      	mov	r1, r4
 8003920:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003924:	4621      	mov	r1, r4
 8003926:	024a      	lsls	r2, r1, #9
 8003928:	4610      	mov	r0, r2
 800392a:	4619      	mov	r1, r3
 800392c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800392e:	2200      	movs	r2, #0
 8003930:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003932:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003934:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003938:	f7fc fc9a 	bl	8000270 <__aeabi_uldivmod>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4613      	mov	r3, r2
 8003942:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003944:	e058      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003946:	4b38      	ldr	r3, [pc, #224]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	099b      	lsrs	r3, r3, #6
 800394c:	2200      	movs	r2, #0
 800394e:	4618      	mov	r0, r3
 8003950:	4611      	mov	r1, r2
 8003952:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003956:	623b      	str	r3, [r7, #32]
 8003958:	2300      	movs	r3, #0
 800395a:	627b      	str	r3, [r7, #36]	@ 0x24
 800395c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003960:	4642      	mov	r2, r8
 8003962:	464b      	mov	r3, r9
 8003964:	f04f 0000 	mov.w	r0, #0
 8003968:	f04f 0100 	mov.w	r1, #0
 800396c:	0159      	lsls	r1, r3, #5
 800396e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003972:	0150      	lsls	r0, r2, #5
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4641      	mov	r1, r8
 800397a:	ebb2 0a01 	subs.w	sl, r2, r1
 800397e:	4649      	mov	r1, r9
 8003980:	eb63 0b01 	sbc.w	fp, r3, r1
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003990:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003994:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003998:	ebb2 040a 	subs.w	r4, r2, sl
 800399c:	eb63 050b 	sbc.w	r5, r3, fp
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	00eb      	lsls	r3, r5, #3
 80039aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ae:	00e2      	lsls	r2, r4, #3
 80039b0:	4614      	mov	r4, r2
 80039b2:	461d      	mov	r5, r3
 80039b4:	4643      	mov	r3, r8
 80039b6:	18e3      	adds	r3, r4, r3
 80039b8:	603b      	str	r3, [r7, #0]
 80039ba:	464b      	mov	r3, r9
 80039bc:	eb45 0303 	adc.w	r3, r5, r3
 80039c0:	607b      	str	r3, [r7, #4]
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039ce:	4629      	mov	r1, r5
 80039d0:	028b      	lsls	r3, r1, #10
 80039d2:	4621      	mov	r1, r4
 80039d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039d8:	4621      	mov	r1, r4
 80039da:	028a      	lsls	r2, r1, #10
 80039dc:	4610      	mov	r0, r2
 80039de:	4619      	mov	r1, r3
 80039e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039e2:	2200      	movs	r2, #0
 80039e4:	61bb      	str	r3, [r7, #24]
 80039e6:	61fa      	str	r2, [r7, #28]
 80039e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039ec:	f7fc fc40 	bl	8000270 <__aeabi_uldivmod>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4613      	mov	r3, r2
 80039f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x200>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	0c1b      	lsrs	r3, r3, #16
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	3301      	adds	r3, #1
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003a08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a12:	e002      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a14:	4b05      	ldr	r3, [pc, #20]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3750      	adds	r7, #80	@ 0x50
 8003a20:	46bd      	mov	sp, r7
 8003a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a26:	bf00      	nop
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	00f42400 	.word	0x00f42400
 8003a30:	007a1200 	.word	0x007a1200

08003a34 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d105      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d035      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a5c:	4b62      	ldr	r3, [pc, #392]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a62:	f7fe fa91 	bl	8001f88 <HAL_GetTick>
 8003a66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a6a:	f7fe fa8d 	bl	8001f88 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e0b0      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a7c:	4b5b      	ldr	r3, [pc, #364]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1f0      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	019a      	lsls	r2, r3, #6
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	071b      	lsls	r3, r3, #28
 8003a94:	4955      	ldr	r1, [pc, #340]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a9c:	4b52      	ldr	r3, [pc, #328]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003aa2:	f7fe fa71 	bl	8001f88 <HAL_GetTick>
 8003aa6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003aa8:	e008      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003aaa:	f7fe fa6d 	bl	8001f88 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e090      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003abc:	4b4b      	ldr	r3, [pc, #300]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 8083 	beq.w	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	4b44      	ldr	r3, [pc, #272]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ade:	4a43      	ldr	r2, [pc, #268]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ae6:	4b41      	ldr	r3, [pc, #260]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003af2:	4b3f      	ldr	r3, [pc, #252]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a3e      	ldr	r2, [pc, #248]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003afc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003afe:	f7fe fa43 	bl	8001f88 <HAL_GetTick>
 8003b02:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b04:	e008      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b06:	f7fe fa3f 	bl	8001f88 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e062      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b18:	4b35      	ldr	r3, [pc, #212]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0f0      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b24:	4b31      	ldr	r3, [pc, #196]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b2c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d02f      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d028      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b42:	4b2a      	ldr	r3, [pc, #168]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b4a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b4c:	4b29      	ldr	r3, [pc, #164]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b52:	4b28      	ldr	r3, [pc, #160]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003b58:	4a24      	ldr	r2, [pc, #144]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b5e:	4b23      	ldr	r3, [pc, #140]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d114      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003b6a:	f7fe fa0d 	bl	8001f88 <HAL_GetTick>
 8003b6e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b70:	e00a      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b72:	f7fe fa09 	bl	8001f88 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e02a      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b88:	4b18      	ldr	r3, [pc, #96]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0ee      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ba0:	d10d      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003ba2:	4b12      	ldr	r3, [pc, #72]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003bb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bb6:	490d      	ldr	r1, [pc, #52]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	608b      	str	r3, [r1, #8]
 8003bbc:	e005      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bc4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003bc8:	6093      	str	r3, [r2, #8]
 8003bca:	4b08      	ldr	r3, [pc, #32]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bcc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd6:	4905      	ldr	r1, [pc, #20]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	42470068 	.word	0x42470068
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	40007000 	.word	0x40007000
 8003bf4:	42470e40 	.word	0x42470e40

08003bf8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d13f      	bne.n	8003c96 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003c16:	4b24      	ldr	r3, [pc, #144]	@ (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d006      	beq.n	8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c2c:	d12f      	bne.n	8003c8e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8003cac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003c30:	617b      	str	r3, [r7, #20]
          break;
 8003c32:	e02f      	b.n	8003c94 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c34:	4b1c      	ldr	r3, [pc, #112]	@ (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c40:	d108      	bne.n	8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c42:	4b19      	ldr	r3, [pc, #100]	@ (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c4a:	4a19      	ldr	r2, [pc, #100]	@ (8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	e007      	b.n	8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c54:	4b14      	ldr	r3, [pc, #80]	@ (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c5c:	4a15      	ldr	r2, [pc, #84]	@ (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c62:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003c64:	4b10      	ldr	r3, [pc, #64]	@ (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c6a:	099b      	lsrs	r3, r3, #6
 8003c6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	fb02 f303 	mul.w	r3, r2, r3
 8003c76:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003c78:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c7e:	0f1b      	lsrs	r3, r3, #28
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8a:	617b      	str	r3, [r7, #20]
          break;
 8003c8c:	e002      	b.n	8003c94 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]
          break;
 8003c92:	bf00      	nop
        }
      }
      break;
 8003c94:	e000      	b.n	8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8003c96:	bf00      	nop
    }
  }
  return frequency;
 8003c98:	697b      	ldr	r3, [r7, #20]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	371c      	adds	r7, #28
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	00bb8000 	.word	0x00bb8000
 8003cb0:	007a1200 	.word	0x007a1200
 8003cb4:	00f42400 	.word	0x00f42400

08003cb8 <siprintf>:
 8003cb8:	b40e      	push	{r1, r2, r3}
 8003cba:	b500      	push	{lr}
 8003cbc:	b09c      	sub	sp, #112	@ 0x70
 8003cbe:	ab1d      	add	r3, sp, #116	@ 0x74
 8003cc0:	9002      	str	r0, [sp, #8]
 8003cc2:	9006      	str	r0, [sp, #24]
 8003cc4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003cc8:	4809      	ldr	r0, [pc, #36]	@ (8003cf0 <siprintf+0x38>)
 8003cca:	9107      	str	r1, [sp, #28]
 8003ccc:	9104      	str	r1, [sp, #16]
 8003cce:	4909      	ldr	r1, [pc, #36]	@ (8003cf4 <siprintf+0x3c>)
 8003cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cd4:	9105      	str	r1, [sp, #20]
 8003cd6:	6800      	ldr	r0, [r0, #0]
 8003cd8:	9301      	str	r3, [sp, #4]
 8003cda:	a902      	add	r1, sp, #8
 8003cdc:	f000 f994 	bl	8004008 <_svfiprintf_r>
 8003ce0:	9b02      	ldr	r3, [sp, #8]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	701a      	strb	r2, [r3, #0]
 8003ce6:	b01c      	add	sp, #112	@ 0x70
 8003ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cec:	b003      	add	sp, #12
 8003cee:	4770      	bx	lr
 8003cf0:	20000014 	.word	0x20000014
 8003cf4:	ffff0208 	.word	0xffff0208

08003cf8 <memset>:
 8003cf8:	4402      	add	r2, r0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d100      	bne.n	8003d02 <memset+0xa>
 8003d00:	4770      	bx	lr
 8003d02:	f803 1b01 	strb.w	r1, [r3], #1
 8003d06:	e7f9      	b.n	8003cfc <memset+0x4>

08003d08 <__errno>:
 8003d08:	4b01      	ldr	r3, [pc, #4]	@ (8003d10 <__errno+0x8>)
 8003d0a:	6818      	ldr	r0, [r3, #0]
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20000014 	.word	0x20000014

08003d14 <__libc_init_array>:
 8003d14:	b570      	push	{r4, r5, r6, lr}
 8003d16:	4d0d      	ldr	r5, [pc, #52]	@ (8003d4c <__libc_init_array+0x38>)
 8003d18:	4c0d      	ldr	r4, [pc, #52]	@ (8003d50 <__libc_init_array+0x3c>)
 8003d1a:	1b64      	subs	r4, r4, r5
 8003d1c:	10a4      	asrs	r4, r4, #2
 8003d1e:	2600      	movs	r6, #0
 8003d20:	42a6      	cmp	r6, r4
 8003d22:	d109      	bne.n	8003d38 <__libc_init_array+0x24>
 8003d24:	4d0b      	ldr	r5, [pc, #44]	@ (8003d54 <__libc_init_array+0x40>)
 8003d26:	4c0c      	ldr	r4, [pc, #48]	@ (8003d58 <__libc_init_array+0x44>)
 8003d28:	f000 fc66 	bl	80045f8 <_init>
 8003d2c:	1b64      	subs	r4, r4, r5
 8003d2e:	10a4      	asrs	r4, r4, #2
 8003d30:	2600      	movs	r6, #0
 8003d32:	42a6      	cmp	r6, r4
 8003d34:	d105      	bne.n	8003d42 <__libc_init_array+0x2e>
 8003d36:	bd70      	pop	{r4, r5, r6, pc}
 8003d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d3c:	4798      	blx	r3
 8003d3e:	3601      	adds	r6, #1
 8003d40:	e7ee      	b.n	8003d20 <__libc_init_array+0xc>
 8003d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d46:	4798      	blx	r3
 8003d48:	3601      	adds	r6, #1
 8003d4a:	e7f2      	b.n	8003d32 <__libc_init_array+0x1e>
 8003d4c:	0800467c 	.word	0x0800467c
 8003d50:	0800467c 	.word	0x0800467c
 8003d54:	0800467c 	.word	0x0800467c
 8003d58:	08004680 	.word	0x08004680

08003d5c <__retarget_lock_acquire_recursive>:
 8003d5c:	4770      	bx	lr

08003d5e <__retarget_lock_release_recursive>:
 8003d5e:	4770      	bx	lr

08003d60 <_free_r>:
 8003d60:	b538      	push	{r3, r4, r5, lr}
 8003d62:	4605      	mov	r5, r0
 8003d64:	2900      	cmp	r1, #0
 8003d66:	d041      	beq.n	8003dec <_free_r+0x8c>
 8003d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d6c:	1f0c      	subs	r4, r1, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	bfb8      	it	lt
 8003d72:	18e4      	addlt	r4, r4, r3
 8003d74:	f000 f8e0 	bl	8003f38 <__malloc_lock>
 8003d78:	4a1d      	ldr	r2, [pc, #116]	@ (8003df0 <_free_r+0x90>)
 8003d7a:	6813      	ldr	r3, [r2, #0]
 8003d7c:	b933      	cbnz	r3, 8003d8c <_free_r+0x2c>
 8003d7e:	6063      	str	r3, [r4, #4]
 8003d80:	6014      	str	r4, [r2, #0]
 8003d82:	4628      	mov	r0, r5
 8003d84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d88:	f000 b8dc 	b.w	8003f44 <__malloc_unlock>
 8003d8c:	42a3      	cmp	r3, r4
 8003d8e:	d908      	bls.n	8003da2 <_free_r+0x42>
 8003d90:	6820      	ldr	r0, [r4, #0]
 8003d92:	1821      	adds	r1, r4, r0
 8003d94:	428b      	cmp	r3, r1
 8003d96:	bf01      	itttt	eq
 8003d98:	6819      	ldreq	r1, [r3, #0]
 8003d9a:	685b      	ldreq	r3, [r3, #4]
 8003d9c:	1809      	addeq	r1, r1, r0
 8003d9e:	6021      	streq	r1, [r4, #0]
 8003da0:	e7ed      	b.n	8003d7e <_free_r+0x1e>
 8003da2:	461a      	mov	r2, r3
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	b10b      	cbz	r3, 8003dac <_free_r+0x4c>
 8003da8:	42a3      	cmp	r3, r4
 8003daa:	d9fa      	bls.n	8003da2 <_free_r+0x42>
 8003dac:	6811      	ldr	r1, [r2, #0]
 8003dae:	1850      	adds	r0, r2, r1
 8003db0:	42a0      	cmp	r0, r4
 8003db2:	d10b      	bne.n	8003dcc <_free_r+0x6c>
 8003db4:	6820      	ldr	r0, [r4, #0]
 8003db6:	4401      	add	r1, r0
 8003db8:	1850      	adds	r0, r2, r1
 8003dba:	4283      	cmp	r3, r0
 8003dbc:	6011      	str	r1, [r2, #0]
 8003dbe:	d1e0      	bne.n	8003d82 <_free_r+0x22>
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	6053      	str	r3, [r2, #4]
 8003dc6:	4408      	add	r0, r1
 8003dc8:	6010      	str	r0, [r2, #0]
 8003dca:	e7da      	b.n	8003d82 <_free_r+0x22>
 8003dcc:	d902      	bls.n	8003dd4 <_free_r+0x74>
 8003dce:	230c      	movs	r3, #12
 8003dd0:	602b      	str	r3, [r5, #0]
 8003dd2:	e7d6      	b.n	8003d82 <_free_r+0x22>
 8003dd4:	6820      	ldr	r0, [r4, #0]
 8003dd6:	1821      	adds	r1, r4, r0
 8003dd8:	428b      	cmp	r3, r1
 8003dda:	bf04      	itt	eq
 8003ddc:	6819      	ldreq	r1, [r3, #0]
 8003dde:	685b      	ldreq	r3, [r3, #4]
 8003de0:	6063      	str	r3, [r4, #4]
 8003de2:	bf04      	itt	eq
 8003de4:	1809      	addeq	r1, r1, r0
 8003de6:	6021      	streq	r1, [r4, #0]
 8003de8:	6054      	str	r4, [r2, #4]
 8003dea:	e7ca      	b.n	8003d82 <_free_r+0x22>
 8003dec:	bd38      	pop	{r3, r4, r5, pc}
 8003dee:	bf00      	nop
 8003df0:	20000228 	.word	0x20000228

08003df4 <sbrk_aligned>:
 8003df4:	b570      	push	{r4, r5, r6, lr}
 8003df6:	4e0f      	ldr	r6, [pc, #60]	@ (8003e34 <sbrk_aligned+0x40>)
 8003df8:	460c      	mov	r4, r1
 8003dfa:	6831      	ldr	r1, [r6, #0]
 8003dfc:	4605      	mov	r5, r0
 8003dfe:	b911      	cbnz	r1, 8003e06 <sbrk_aligned+0x12>
 8003e00:	f000 fba6 	bl	8004550 <_sbrk_r>
 8003e04:	6030      	str	r0, [r6, #0]
 8003e06:	4621      	mov	r1, r4
 8003e08:	4628      	mov	r0, r5
 8003e0a:	f000 fba1 	bl	8004550 <_sbrk_r>
 8003e0e:	1c43      	adds	r3, r0, #1
 8003e10:	d103      	bne.n	8003e1a <sbrk_aligned+0x26>
 8003e12:	f04f 34ff 	mov.w	r4, #4294967295
 8003e16:	4620      	mov	r0, r4
 8003e18:	bd70      	pop	{r4, r5, r6, pc}
 8003e1a:	1cc4      	adds	r4, r0, #3
 8003e1c:	f024 0403 	bic.w	r4, r4, #3
 8003e20:	42a0      	cmp	r0, r4
 8003e22:	d0f8      	beq.n	8003e16 <sbrk_aligned+0x22>
 8003e24:	1a21      	subs	r1, r4, r0
 8003e26:	4628      	mov	r0, r5
 8003e28:	f000 fb92 	bl	8004550 <_sbrk_r>
 8003e2c:	3001      	adds	r0, #1
 8003e2e:	d1f2      	bne.n	8003e16 <sbrk_aligned+0x22>
 8003e30:	e7ef      	b.n	8003e12 <sbrk_aligned+0x1e>
 8003e32:	bf00      	nop
 8003e34:	20000224 	.word	0x20000224

08003e38 <_malloc_r>:
 8003e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e3c:	1ccd      	adds	r5, r1, #3
 8003e3e:	f025 0503 	bic.w	r5, r5, #3
 8003e42:	3508      	adds	r5, #8
 8003e44:	2d0c      	cmp	r5, #12
 8003e46:	bf38      	it	cc
 8003e48:	250c      	movcc	r5, #12
 8003e4a:	2d00      	cmp	r5, #0
 8003e4c:	4606      	mov	r6, r0
 8003e4e:	db01      	blt.n	8003e54 <_malloc_r+0x1c>
 8003e50:	42a9      	cmp	r1, r5
 8003e52:	d904      	bls.n	8003e5e <_malloc_r+0x26>
 8003e54:	230c      	movs	r3, #12
 8003e56:	6033      	str	r3, [r6, #0]
 8003e58:	2000      	movs	r0, #0
 8003e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f34 <_malloc_r+0xfc>
 8003e62:	f000 f869 	bl	8003f38 <__malloc_lock>
 8003e66:	f8d8 3000 	ldr.w	r3, [r8]
 8003e6a:	461c      	mov	r4, r3
 8003e6c:	bb44      	cbnz	r4, 8003ec0 <_malloc_r+0x88>
 8003e6e:	4629      	mov	r1, r5
 8003e70:	4630      	mov	r0, r6
 8003e72:	f7ff ffbf 	bl	8003df4 <sbrk_aligned>
 8003e76:	1c43      	adds	r3, r0, #1
 8003e78:	4604      	mov	r4, r0
 8003e7a:	d158      	bne.n	8003f2e <_malloc_r+0xf6>
 8003e7c:	f8d8 4000 	ldr.w	r4, [r8]
 8003e80:	4627      	mov	r7, r4
 8003e82:	2f00      	cmp	r7, #0
 8003e84:	d143      	bne.n	8003f0e <_malloc_r+0xd6>
 8003e86:	2c00      	cmp	r4, #0
 8003e88:	d04b      	beq.n	8003f22 <_malloc_r+0xea>
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	4639      	mov	r1, r7
 8003e8e:	4630      	mov	r0, r6
 8003e90:	eb04 0903 	add.w	r9, r4, r3
 8003e94:	f000 fb5c 	bl	8004550 <_sbrk_r>
 8003e98:	4581      	cmp	r9, r0
 8003e9a:	d142      	bne.n	8003f22 <_malloc_r+0xea>
 8003e9c:	6821      	ldr	r1, [r4, #0]
 8003e9e:	1a6d      	subs	r5, r5, r1
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	f7ff ffa6 	bl	8003df4 <sbrk_aligned>
 8003ea8:	3001      	adds	r0, #1
 8003eaa:	d03a      	beq.n	8003f22 <_malloc_r+0xea>
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	442b      	add	r3, r5
 8003eb0:	6023      	str	r3, [r4, #0]
 8003eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	bb62      	cbnz	r2, 8003f14 <_malloc_r+0xdc>
 8003eba:	f8c8 7000 	str.w	r7, [r8]
 8003ebe:	e00f      	b.n	8003ee0 <_malloc_r+0xa8>
 8003ec0:	6822      	ldr	r2, [r4, #0]
 8003ec2:	1b52      	subs	r2, r2, r5
 8003ec4:	d420      	bmi.n	8003f08 <_malloc_r+0xd0>
 8003ec6:	2a0b      	cmp	r2, #11
 8003ec8:	d917      	bls.n	8003efa <_malloc_r+0xc2>
 8003eca:	1961      	adds	r1, r4, r5
 8003ecc:	42a3      	cmp	r3, r4
 8003ece:	6025      	str	r5, [r4, #0]
 8003ed0:	bf18      	it	ne
 8003ed2:	6059      	strne	r1, [r3, #4]
 8003ed4:	6863      	ldr	r3, [r4, #4]
 8003ed6:	bf08      	it	eq
 8003ed8:	f8c8 1000 	streq.w	r1, [r8]
 8003edc:	5162      	str	r2, [r4, r5]
 8003ede:	604b      	str	r3, [r1, #4]
 8003ee0:	4630      	mov	r0, r6
 8003ee2:	f000 f82f 	bl	8003f44 <__malloc_unlock>
 8003ee6:	f104 000b 	add.w	r0, r4, #11
 8003eea:	1d23      	adds	r3, r4, #4
 8003eec:	f020 0007 	bic.w	r0, r0, #7
 8003ef0:	1ac2      	subs	r2, r0, r3
 8003ef2:	bf1c      	itt	ne
 8003ef4:	1a1b      	subne	r3, r3, r0
 8003ef6:	50a3      	strne	r3, [r4, r2]
 8003ef8:	e7af      	b.n	8003e5a <_malloc_r+0x22>
 8003efa:	6862      	ldr	r2, [r4, #4]
 8003efc:	42a3      	cmp	r3, r4
 8003efe:	bf0c      	ite	eq
 8003f00:	f8c8 2000 	streq.w	r2, [r8]
 8003f04:	605a      	strne	r2, [r3, #4]
 8003f06:	e7eb      	b.n	8003ee0 <_malloc_r+0xa8>
 8003f08:	4623      	mov	r3, r4
 8003f0a:	6864      	ldr	r4, [r4, #4]
 8003f0c:	e7ae      	b.n	8003e6c <_malloc_r+0x34>
 8003f0e:	463c      	mov	r4, r7
 8003f10:	687f      	ldr	r7, [r7, #4]
 8003f12:	e7b6      	b.n	8003e82 <_malloc_r+0x4a>
 8003f14:	461a      	mov	r2, r3
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	42a3      	cmp	r3, r4
 8003f1a:	d1fb      	bne.n	8003f14 <_malloc_r+0xdc>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	6053      	str	r3, [r2, #4]
 8003f20:	e7de      	b.n	8003ee0 <_malloc_r+0xa8>
 8003f22:	230c      	movs	r3, #12
 8003f24:	6033      	str	r3, [r6, #0]
 8003f26:	4630      	mov	r0, r6
 8003f28:	f000 f80c 	bl	8003f44 <__malloc_unlock>
 8003f2c:	e794      	b.n	8003e58 <_malloc_r+0x20>
 8003f2e:	6005      	str	r5, [r0, #0]
 8003f30:	e7d6      	b.n	8003ee0 <_malloc_r+0xa8>
 8003f32:	bf00      	nop
 8003f34:	20000228 	.word	0x20000228

08003f38 <__malloc_lock>:
 8003f38:	4801      	ldr	r0, [pc, #4]	@ (8003f40 <__malloc_lock+0x8>)
 8003f3a:	f7ff bf0f 	b.w	8003d5c <__retarget_lock_acquire_recursive>
 8003f3e:	bf00      	nop
 8003f40:	20000220 	.word	0x20000220

08003f44 <__malloc_unlock>:
 8003f44:	4801      	ldr	r0, [pc, #4]	@ (8003f4c <__malloc_unlock+0x8>)
 8003f46:	f7ff bf0a 	b.w	8003d5e <__retarget_lock_release_recursive>
 8003f4a:	bf00      	nop
 8003f4c:	20000220 	.word	0x20000220

08003f50 <__ssputs_r>:
 8003f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f54:	688e      	ldr	r6, [r1, #8]
 8003f56:	461f      	mov	r7, r3
 8003f58:	42be      	cmp	r6, r7
 8003f5a:	680b      	ldr	r3, [r1, #0]
 8003f5c:	4682      	mov	sl, r0
 8003f5e:	460c      	mov	r4, r1
 8003f60:	4690      	mov	r8, r2
 8003f62:	d82d      	bhi.n	8003fc0 <__ssputs_r+0x70>
 8003f64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f6c:	d026      	beq.n	8003fbc <__ssputs_r+0x6c>
 8003f6e:	6965      	ldr	r5, [r4, #20]
 8003f70:	6909      	ldr	r1, [r1, #16]
 8003f72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f76:	eba3 0901 	sub.w	r9, r3, r1
 8003f7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f7e:	1c7b      	adds	r3, r7, #1
 8003f80:	444b      	add	r3, r9
 8003f82:	106d      	asrs	r5, r5, #1
 8003f84:	429d      	cmp	r5, r3
 8003f86:	bf38      	it	cc
 8003f88:	461d      	movcc	r5, r3
 8003f8a:	0553      	lsls	r3, r2, #21
 8003f8c:	d527      	bpl.n	8003fde <__ssputs_r+0x8e>
 8003f8e:	4629      	mov	r1, r5
 8003f90:	f7ff ff52 	bl	8003e38 <_malloc_r>
 8003f94:	4606      	mov	r6, r0
 8003f96:	b360      	cbz	r0, 8003ff2 <__ssputs_r+0xa2>
 8003f98:	6921      	ldr	r1, [r4, #16]
 8003f9a:	464a      	mov	r2, r9
 8003f9c:	f000 fae8 	bl	8004570 <memcpy>
 8003fa0:	89a3      	ldrh	r3, [r4, #12]
 8003fa2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003faa:	81a3      	strh	r3, [r4, #12]
 8003fac:	6126      	str	r6, [r4, #16]
 8003fae:	6165      	str	r5, [r4, #20]
 8003fb0:	444e      	add	r6, r9
 8003fb2:	eba5 0509 	sub.w	r5, r5, r9
 8003fb6:	6026      	str	r6, [r4, #0]
 8003fb8:	60a5      	str	r5, [r4, #8]
 8003fba:	463e      	mov	r6, r7
 8003fbc:	42be      	cmp	r6, r7
 8003fbe:	d900      	bls.n	8003fc2 <__ssputs_r+0x72>
 8003fc0:	463e      	mov	r6, r7
 8003fc2:	6820      	ldr	r0, [r4, #0]
 8003fc4:	4632      	mov	r2, r6
 8003fc6:	4641      	mov	r1, r8
 8003fc8:	f000 faa8 	bl	800451c <memmove>
 8003fcc:	68a3      	ldr	r3, [r4, #8]
 8003fce:	1b9b      	subs	r3, r3, r6
 8003fd0:	60a3      	str	r3, [r4, #8]
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	4433      	add	r3, r6
 8003fd6:	6023      	str	r3, [r4, #0]
 8003fd8:	2000      	movs	r0, #0
 8003fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fde:	462a      	mov	r2, r5
 8003fe0:	f000 fad4 	bl	800458c <_realloc_r>
 8003fe4:	4606      	mov	r6, r0
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	d1e0      	bne.n	8003fac <__ssputs_r+0x5c>
 8003fea:	6921      	ldr	r1, [r4, #16]
 8003fec:	4650      	mov	r0, sl
 8003fee:	f7ff feb7 	bl	8003d60 <_free_r>
 8003ff2:	230c      	movs	r3, #12
 8003ff4:	f8ca 3000 	str.w	r3, [sl]
 8003ff8:	89a3      	ldrh	r3, [r4, #12]
 8003ffa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ffe:	81a3      	strh	r3, [r4, #12]
 8004000:	f04f 30ff 	mov.w	r0, #4294967295
 8004004:	e7e9      	b.n	8003fda <__ssputs_r+0x8a>
	...

08004008 <_svfiprintf_r>:
 8004008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800400c:	4698      	mov	r8, r3
 800400e:	898b      	ldrh	r3, [r1, #12]
 8004010:	061b      	lsls	r3, r3, #24
 8004012:	b09d      	sub	sp, #116	@ 0x74
 8004014:	4607      	mov	r7, r0
 8004016:	460d      	mov	r5, r1
 8004018:	4614      	mov	r4, r2
 800401a:	d510      	bpl.n	800403e <_svfiprintf_r+0x36>
 800401c:	690b      	ldr	r3, [r1, #16]
 800401e:	b973      	cbnz	r3, 800403e <_svfiprintf_r+0x36>
 8004020:	2140      	movs	r1, #64	@ 0x40
 8004022:	f7ff ff09 	bl	8003e38 <_malloc_r>
 8004026:	6028      	str	r0, [r5, #0]
 8004028:	6128      	str	r0, [r5, #16]
 800402a:	b930      	cbnz	r0, 800403a <_svfiprintf_r+0x32>
 800402c:	230c      	movs	r3, #12
 800402e:	603b      	str	r3, [r7, #0]
 8004030:	f04f 30ff 	mov.w	r0, #4294967295
 8004034:	b01d      	add	sp, #116	@ 0x74
 8004036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800403a:	2340      	movs	r3, #64	@ 0x40
 800403c:	616b      	str	r3, [r5, #20]
 800403e:	2300      	movs	r3, #0
 8004040:	9309      	str	r3, [sp, #36]	@ 0x24
 8004042:	2320      	movs	r3, #32
 8004044:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004048:	f8cd 800c 	str.w	r8, [sp, #12]
 800404c:	2330      	movs	r3, #48	@ 0x30
 800404e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80041ec <_svfiprintf_r+0x1e4>
 8004052:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004056:	f04f 0901 	mov.w	r9, #1
 800405a:	4623      	mov	r3, r4
 800405c:	469a      	mov	sl, r3
 800405e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004062:	b10a      	cbz	r2, 8004068 <_svfiprintf_r+0x60>
 8004064:	2a25      	cmp	r2, #37	@ 0x25
 8004066:	d1f9      	bne.n	800405c <_svfiprintf_r+0x54>
 8004068:	ebba 0b04 	subs.w	fp, sl, r4
 800406c:	d00b      	beq.n	8004086 <_svfiprintf_r+0x7e>
 800406e:	465b      	mov	r3, fp
 8004070:	4622      	mov	r2, r4
 8004072:	4629      	mov	r1, r5
 8004074:	4638      	mov	r0, r7
 8004076:	f7ff ff6b 	bl	8003f50 <__ssputs_r>
 800407a:	3001      	adds	r0, #1
 800407c:	f000 80a7 	beq.w	80041ce <_svfiprintf_r+0x1c6>
 8004080:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004082:	445a      	add	r2, fp
 8004084:	9209      	str	r2, [sp, #36]	@ 0x24
 8004086:	f89a 3000 	ldrb.w	r3, [sl]
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 809f 	beq.w	80041ce <_svfiprintf_r+0x1c6>
 8004090:	2300      	movs	r3, #0
 8004092:	f04f 32ff 	mov.w	r2, #4294967295
 8004096:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800409a:	f10a 0a01 	add.w	sl, sl, #1
 800409e:	9304      	str	r3, [sp, #16]
 80040a0:	9307      	str	r3, [sp, #28]
 80040a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80040a8:	4654      	mov	r4, sl
 80040aa:	2205      	movs	r2, #5
 80040ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040b0:	484e      	ldr	r0, [pc, #312]	@ (80041ec <_svfiprintf_r+0x1e4>)
 80040b2:	f7fc f88d 	bl	80001d0 <memchr>
 80040b6:	9a04      	ldr	r2, [sp, #16]
 80040b8:	b9d8      	cbnz	r0, 80040f2 <_svfiprintf_r+0xea>
 80040ba:	06d0      	lsls	r0, r2, #27
 80040bc:	bf44      	itt	mi
 80040be:	2320      	movmi	r3, #32
 80040c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040c4:	0711      	lsls	r1, r2, #28
 80040c6:	bf44      	itt	mi
 80040c8:	232b      	movmi	r3, #43	@ 0x2b
 80040ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040ce:	f89a 3000 	ldrb.w	r3, [sl]
 80040d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80040d4:	d015      	beq.n	8004102 <_svfiprintf_r+0xfa>
 80040d6:	9a07      	ldr	r2, [sp, #28]
 80040d8:	4654      	mov	r4, sl
 80040da:	2000      	movs	r0, #0
 80040dc:	f04f 0c0a 	mov.w	ip, #10
 80040e0:	4621      	mov	r1, r4
 80040e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040e6:	3b30      	subs	r3, #48	@ 0x30
 80040e8:	2b09      	cmp	r3, #9
 80040ea:	d94b      	bls.n	8004184 <_svfiprintf_r+0x17c>
 80040ec:	b1b0      	cbz	r0, 800411c <_svfiprintf_r+0x114>
 80040ee:	9207      	str	r2, [sp, #28]
 80040f0:	e014      	b.n	800411c <_svfiprintf_r+0x114>
 80040f2:	eba0 0308 	sub.w	r3, r0, r8
 80040f6:	fa09 f303 	lsl.w	r3, r9, r3
 80040fa:	4313      	orrs	r3, r2
 80040fc:	9304      	str	r3, [sp, #16]
 80040fe:	46a2      	mov	sl, r4
 8004100:	e7d2      	b.n	80040a8 <_svfiprintf_r+0xa0>
 8004102:	9b03      	ldr	r3, [sp, #12]
 8004104:	1d19      	adds	r1, r3, #4
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	9103      	str	r1, [sp, #12]
 800410a:	2b00      	cmp	r3, #0
 800410c:	bfbb      	ittet	lt
 800410e:	425b      	neglt	r3, r3
 8004110:	f042 0202 	orrlt.w	r2, r2, #2
 8004114:	9307      	strge	r3, [sp, #28]
 8004116:	9307      	strlt	r3, [sp, #28]
 8004118:	bfb8      	it	lt
 800411a:	9204      	strlt	r2, [sp, #16]
 800411c:	7823      	ldrb	r3, [r4, #0]
 800411e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004120:	d10a      	bne.n	8004138 <_svfiprintf_r+0x130>
 8004122:	7863      	ldrb	r3, [r4, #1]
 8004124:	2b2a      	cmp	r3, #42	@ 0x2a
 8004126:	d132      	bne.n	800418e <_svfiprintf_r+0x186>
 8004128:	9b03      	ldr	r3, [sp, #12]
 800412a:	1d1a      	adds	r2, r3, #4
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	9203      	str	r2, [sp, #12]
 8004130:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004134:	3402      	adds	r4, #2
 8004136:	9305      	str	r3, [sp, #20]
 8004138:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80041fc <_svfiprintf_r+0x1f4>
 800413c:	7821      	ldrb	r1, [r4, #0]
 800413e:	2203      	movs	r2, #3
 8004140:	4650      	mov	r0, sl
 8004142:	f7fc f845 	bl	80001d0 <memchr>
 8004146:	b138      	cbz	r0, 8004158 <_svfiprintf_r+0x150>
 8004148:	9b04      	ldr	r3, [sp, #16]
 800414a:	eba0 000a 	sub.w	r0, r0, sl
 800414e:	2240      	movs	r2, #64	@ 0x40
 8004150:	4082      	lsls	r2, r0
 8004152:	4313      	orrs	r3, r2
 8004154:	3401      	adds	r4, #1
 8004156:	9304      	str	r3, [sp, #16]
 8004158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800415c:	4824      	ldr	r0, [pc, #144]	@ (80041f0 <_svfiprintf_r+0x1e8>)
 800415e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004162:	2206      	movs	r2, #6
 8004164:	f7fc f834 	bl	80001d0 <memchr>
 8004168:	2800      	cmp	r0, #0
 800416a:	d036      	beq.n	80041da <_svfiprintf_r+0x1d2>
 800416c:	4b21      	ldr	r3, [pc, #132]	@ (80041f4 <_svfiprintf_r+0x1ec>)
 800416e:	bb1b      	cbnz	r3, 80041b8 <_svfiprintf_r+0x1b0>
 8004170:	9b03      	ldr	r3, [sp, #12]
 8004172:	3307      	adds	r3, #7
 8004174:	f023 0307 	bic.w	r3, r3, #7
 8004178:	3308      	adds	r3, #8
 800417a:	9303      	str	r3, [sp, #12]
 800417c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800417e:	4433      	add	r3, r6
 8004180:	9309      	str	r3, [sp, #36]	@ 0x24
 8004182:	e76a      	b.n	800405a <_svfiprintf_r+0x52>
 8004184:	fb0c 3202 	mla	r2, ip, r2, r3
 8004188:	460c      	mov	r4, r1
 800418a:	2001      	movs	r0, #1
 800418c:	e7a8      	b.n	80040e0 <_svfiprintf_r+0xd8>
 800418e:	2300      	movs	r3, #0
 8004190:	3401      	adds	r4, #1
 8004192:	9305      	str	r3, [sp, #20]
 8004194:	4619      	mov	r1, r3
 8004196:	f04f 0c0a 	mov.w	ip, #10
 800419a:	4620      	mov	r0, r4
 800419c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041a0:	3a30      	subs	r2, #48	@ 0x30
 80041a2:	2a09      	cmp	r2, #9
 80041a4:	d903      	bls.n	80041ae <_svfiprintf_r+0x1a6>
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0c6      	beq.n	8004138 <_svfiprintf_r+0x130>
 80041aa:	9105      	str	r1, [sp, #20]
 80041ac:	e7c4      	b.n	8004138 <_svfiprintf_r+0x130>
 80041ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80041b2:	4604      	mov	r4, r0
 80041b4:	2301      	movs	r3, #1
 80041b6:	e7f0      	b.n	800419a <_svfiprintf_r+0x192>
 80041b8:	ab03      	add	r3, sp, #12
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	462a      	mov	r2, r5
 80041be:	4b0e      	ldr	r3, [pc, #56]	@ (80041f8 <_svfiprintf_r+0x1f0>)
 80041c0:	a904      	add	r1, sp, #16
 80041c2:	4638      	mov	r0, r7
 80041c4:	f3af 8000 	nop.w
 80041c8:	1c42      	adds	r2, r0, #1
 80041ca:	4606      	mov	r6, r0
 80041cc:	d1d6      	bne.n	800417c <_svfiprintf_r+0x174>
 80041ce:	89ab      	ldrh	r3, [r5, #12]
 80041d0:	065b      	lsls	r3, r3, #25
 80041d2:	f53f af2d 	bmi.w	8004030 <_svfiprintf_r+0x28>
 80041d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041d8:	e72c      	b.n	8004034 <_svfiprintf_r+0x2c>
 80041da:	ab03      	add	r3, sp, #12
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	462a      	mov	r2, r5
 80041e0:	4b05      	ldr	r3, [pc, #20]	@ (80041f8 <_svfiprintf_r+0x1f0>)
 80041e2:	a904      	add	r1, sp, #16
 80041e4:	4638      	mov	r0, r7
 80041e6:	f000 f879 	bl	80042dc <_printf_i>
 80041ea:	e7ed      	b.n	80041c8 <_svfiprintf_r+0x1c0>
 80041ec:	08004640 	.word	0x08004640
 80041f0:	0800464a 	.word	0x0800464a
 80041f4:	00000000 	.word	0x00000000
 80041f8:	08003f51 	.word	0x08003f51
 80041fc:	08004646 	.word	0x08004646

08004200 <_printf_common>:
 8004200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004204:	4616      	mov	r6, r2
 8004206:	4698      	mov	r8, r3
 8004208:	688a      	ldr	r2, [r1, #8]
 800420a:	690b      	ldr	r3, [r1, #16]
 800420c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004210:	4293      	cmp	r3, r2
 8004212:	bfb8      	it	lt
 8004214:	4613      	movlt	r3, r2
 8004216:	6033      	str	r3, [r6, #0]
 8004218:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800421c:	4607      	mov	r7, r0
 800421e:	460c      	mov	r4, r1
 8004220:	b10a      	cbz	r2, 8004226 <_printf_common+0x26>
 8004222:	3301      	adds	r3, #1
 8004224:	6033      	str	r3, [r6, #0]
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	0699      	lsls	r1, r3, #26
 800422a:	bf42      	ittt	mi
 800422c:	6833      	ldrmi	r3, [r6, #0]
 800422e:	3302      	addmi	r3, #2
 8004230:	6033      	strmi	r3, [r6, #0]
 8004232:	6825      	ldr	r5, [r4, #0]
 8004234:	f015 0506 	ands.w	r5, r5, #6
 8004238:	d106      	bne.n	8004248 <_printf_common+0x48>
 800423a:	f104 0a19 	add.w	sl, r4, #25
 800423e:	68e3      	ldr	r3, [r4, #12]
 8004240:	6832      	ldr	r2, [r6, #0]
 8004242:	1a9b      	subs	r3, r3, r2
 8004244:	42ab      	cmp	r3, r5
 8004246:	dc26      	bgt.n	8004296 <_printf_common+0x96>
 8004248:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800424c:	6822      	ldr	r2, [r4, #0]
 800424e:	3b00      	subs	r3, #0
 8004250:	bf18      	it	ne
 8004252:	2301      	movne	r3, #1
 8004254:	0692      	lsls	r2, r2, #26
 8004256:	d42b      	bmi.n	80042b0 <_printf_common+0xb0>
 8004258:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800425c:	4641      	mov	r1, r8
 800425e:	4638      	mov	r0, r7
 8004260:	47c8      	blx	r9
 8004262:	3001      	adds	r0, #1
 8004264:	d01e      	beq.n	80042a4 <_printf_common+0xa4>
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	6922      	ldr	r2, [r4, #16]
 800426a:	f003 0306 	and.w	r3, r3, #6
 800426e:	2b04      	cmp	r3, #4
 8004270:	bf02      	ittt	eq
 8004272:	68e5      	ldreq	r5, [r4, #12]
 8004274:	6833      	ldreq	r3, [r6, #0]
 8004276:	1aed      	subeq	r5, r5, r3
 8004278:	68a3      	ldr	r3, [r4, #8]
 800427a:	bf0c      	ite	eq
 800427c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004280:	2500      	movne	r5, #0
 8004282:	4293      	cmp	r3, r2
 8004284:	bfc4      	itt	gt
 8004286:	1a9b      	subgt	r3, r3, r2
 8004288:	18ed      	addgt	r5, r5, r3
 800428a:	2600      	movs	r6, #0
 800428c:	341a      	adds	r4, #26
 800428e:	42b5      	cmp	r5, r6
 8004290:	d11a      	bne.n	80042c8 <_printf_common+0xc8>
 8004292:	2000      	movs	r0, #0
 8004294:	e008      	b.n	80042a8 <_printf_common+0xa8>
 8004296:	2301      	movs	r3, #1
 8004298:	4652      	mov	r2, sl
 800429a:	4641      	mov	r1, r8
 800429c:	4638      	mov	r0, r7
 800429e:	47c8      	blx	r9
 80042a0:	3001      	adds	r0, #1
 80042a2:	d103      	bne.n	80042ac <_printf_common+0xac>
 80042a4:	f04f 30ff 	mov.w	r0, #4294967295
 80042a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ac:	3501      	adds	r5, #1
 80042ae:	e7c6      	b.n	800423e <_printf_common+0x3e>
 80042b0:	18e1      	adds	r1, r4, r3
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	2030      	movs	r0, #48	@ 0x30
 80042b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042ba:	4422      	add	r2, r4
 80042bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042c4:	3302      	adds	r3, #2
 80042c6:	e7c7      	b.n	8004258 <_printf_common+0x58>
 80042c8:	2301      	movs	r3, #1
 80042ca:	4622      	mov	r2, r4
 80042cc:	4641      	mov	r1, r8
 80042ce:	4638      	mov	r0, r7
 80042d0:	47c8      	blx	r9
 80042d2:	3001      	adds	r0, #1
 80042d4:	d0e6      	beq.n	80042a4 <_printf_common+0xa4>
 80042d6:	3601      	adds	r6, #1
 80042d8:	e7d9      	b.n	800428e <_printf_common+0x8e>
	...

080042dc <_printf_i>:
 80042dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042e0:	7e0f      	ldrb	r7, [r1, #24]
 80042e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042e4:	2f78      	cmp	r7, #120	@ 0x78
 80042e6:	4691      	mov	r9, r2
 80042e8:	4680      	mov	r8, r0
 80042ea:	460c      	mov	r4, r1
 80042ec:	469a      	mov	sl, r3
 80042ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042f2:	d807      	bhi.n	8004304 <_printf_i+0x28>
 80042f4:	2f62      	cmp	r7, #98	@ 0x62
 80042f6:	d80a      	bhi.n	800430e <_printf_i+0x32>
 80042f8:	2f00      	cmp	r7, #0
 80042fa:	f000 80d2 	beq.w	80044a2 <_printf_i+0x1c6>
 80042fe:	2f58      	cmp	r7, #88	@ 0x58
 8004300:	f000 80b9 	beq.w	8004476 <_printf_i+0x19a>
 8004304:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004308:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800430c:	e03a      	b.n	8004384 <_printf_i+0xa8>
 800430e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004312:	2b15      	cmp	r3, #21
 8004314:	d8f6      	bhi.n	8004304 <_printf_i+0x28>
 8004316:	a101      	add	r1, pc, #4	@ (adr r1, 800431c <_printf_i+0x40>)
 8004318:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800431c:	08004375 	.word	0x08004375
 8004320:	08004389 	.word	0x08004389
 8004324:	08004305 	.word	0x08004305
 8004328:	08004305 	.word	0x08004305
 800432c:	08004305 	.word	0x08004305
 8004330:	08004305 	.word	0x08004305
 8004334:	08004389 	.word	0x08004389
 8004338:	08004305 	.word	0x08004305
 800433c:	08004305 	.word	0x08004305
 8004340:	08004305 	.word	0x08004305
 8004344:	08004305 	.word	0x08004305
 8004348:	08004489 	.word	0x08004489
 800434c:	080043b3 	.word	0x080043b3
 8004350:	08004443 	.word	0x08004443
 8004354:	08004305 	.word	0x08004305
 8004358:	08004305 	.word	0x08004305
 800435c:	080044ab 	.word	0x080044ab
 8004360:	08004305 	.word	0x08004305
 8004364:	080043b3 	.word	0x080043b3
 8004368:	08004305 	.word	0x08004305
 800436c:	08004305 	.word	0x08004305
 8004370:	0800444b 	.word	0x0800444b
 8004374:	6833      	ldr	r3, [r6, #0]
 8004376:	1d1a      	adds	r2, r3, #4
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6032      	str	r2, [r6, #0]
 800437c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004380:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004384:	2301      	movs	r3, #1
 8004386:	e09d      	b.n	80044c4 <_printf_i+0x1e8>
 8004388:	6833      	ldr	r3, [r6, #0]
 800438a:	6820      	ldr	r0, [r4, #0]
 800438c:	1d19      	adds	r1, r3, #4
 800438e:	6031      	str	r1, [r6, #0]
 8004390:	0606      	lsls	r6, r0, #24
 8004392:	d501      	bpl.n	8004398 <_printf_i+0xbc>
 8004394:	681d      	ldr	r5, [r3, #0]
 8004396:	e003      	b.n	80043a0 <_printf_i+0xc4>
 8004398:	0645      	lsls	r5, r0, #25
 800439a:	d5fb      	bpl.n	8004394 <_printf_i+0xb8>
 800439c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043a0:	2d00      	cmp	r5, #0
 80043a2:	da03      	bge.n	80043ac <_printf_i+0xd0>
 80043a4:	232d      	movs	r3, #45	@ 0x2d
 80043a6:	426d      	negs	r5, r5
 80043a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043ac:	4859      	ldr	r0, [pc, #356]	@ (8004514 <_printf_i+0x238>)
 80043ae:	230a      	movs	r3, #10
 80043b0:	e011      	b.n	80043d6 <_printf_i+0xfa>
 80043b2:	6821      	ldr	r1, [r4, #0]
 80043b4:	6833      	ldr	r3, [r6, #0]
 80043b6:	0608      	lsls	r0, r1, #24
 80043b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80043bc:	d402      	bmi.n	80043c4 <_printf_i+0xe8>
 80043be:	0649      	lsls	r1, r1, #25
 80043c0:	bf48      	it	mi
 80043c2:	b2ad      	uxthmi	r5, r5
 80043c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80043c6:	4853      	ldr	r0, [pc, #332]	@ (8004514 <_printf_i+0x238>)
 80043c8:	6033      	str	r3, [r6, #0]
 80043ca:	bf14      	ite	ne
 80043cc:	230a      	movne	r3, #10
 80043ce:	2308      	moveq	r3, #8
 80043d0:	2100      	movs	r1, #0
 80043d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043d6:	6866      	ldr	r6, [r4, #4]
 80043d8:	60a6      	str	r6, [r4, #8]
 80043da:	2e00      	cmp	r6, #0
 80043dc:	bfa2      	ittt	ge
 80043de:	6821      	ldrge	r1, [r4, #0]
 80043e0:	f021 0104 	bicge.w	r1, r1, #4
 80043e4:	6021      	strge	r1, [r4, #0]
 80043e6:	b90d      	cbnz	r5, 80043ec <_printf_i+0x110>
 80043e8:	2e00      	cmp	r6, #0
 80043ea:	d04b      	beq.n	8004484 <_printf_i+0x1a8>
 80043ec:	4616      	mov	r6, r2
 80043ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80043f2:	fb03 5711 	mls	r7, r3, r1, r5
 80043f6:	5dc7      	ldrb	r7, [r0, r7]
 80043f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043fc:	462f      	mov	r7, r5
 80043fe:	42bb      	cmp	r3, r7
 8004400:	460d      	mov	r5, r1
 8004402:	d9f4      	bls.n	80043ee <_printf_i+0x112>
 8004404:	2b08      	cmp	r3, #8
 8004406:	d10b      	bne.n	8004420 <_printf_i+0x144>
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	07df      	lsls	r7, r3, #31
 800440c:	d508      	bpl.n	8004420 <_printf_i+0x144>
 800440e:	6923      	ldr	r3, [r4, #16]
 8004410:	6861      	ldr	r1, [r4, #4]
 8004412:	4299      	cmp	r1, r3
 8004414:	bfde      	ittt	le
 8004416:	2330      	movle	r3, #48	@ 0x30
 8004418:	f806 3c01 	strble.w	r3, [r6, #-1]
 800441c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004420:	1b92      	subs	r2, r2, r6
 8004422:	6122      	str	r2, [r4, #16]
 8004424:	f8cd a000 	str.w	sl, [sp]
 8004428:	464b      	mov	r3, r9
 800442a:	aa03      	add	r2, sp, #12
 800442c:	4621      	mov	r1, r4
 800442e:	4640      	mov	r0, r8
 8004430:	f7ff fee6 	bl	8004200 <_printf_common>
 8004434:	3001      	adds	r0, #1
 8004436:	d14a      	bne.n	80044ce <_printf_i+0x1f2>
 8004438:	f04f 30ff 	mov.w	r0, #4294967295
 800443c:	b004      	add	sp, #16
 800443e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	f043 0320 	orr.w	r3, r3, #32
 8004448:	6023      	str	r3, [r4, #0]
 800444a:	4833      	ldr	r0, [pc, #204]	@ (8004518 <_printf_i+0x23c>)
 800444c:	2778      	movs	r7, #120	@ 0x78
 800444e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	6831      	ldr	r1, [r6, #0]
 8004456:	061f      	lsls	r7, r3, #24
 8004458:	f851 5b04 	ldr.w	r5, [r1], #4
 800445c:	d402      	bmi.n	8004464 <_printf_i+0x188>
 800445e:	065f      	lsls	r7, r3, #25
 8004460:	bf48      	it	mi
 8004462:	b2ad      	uxthmi	r5, r5
 8004464:	6031      	str	r1, [r6, #0]
 8004466:	07d9      	lsls	r1, r3, #31
 8004468:	bf44      	itt	mi
 800446a:	f043 0320 	orrmi.w	r3, r3, #32
 800446e:	6023      	strmi	r3, [r4, #0]
 8004470:	b11d      	cbz	r5, 800447a <_printf_i+0x19e>
 8004472:	2310      	movs	r3, #16
 8004474:	e7ac      	b.n	80043d0 <_printf_i+0xf4>
 8004476:	4827      	ldr	r0, [pc, #156]	@ (8004514 <_printf_i+0x238>)
 8004478:	e7e9      	b.n	800444e <_printf_i+0x172>
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	f023 0320 	bic.w	r3, r3, #32
 8004480:	6023      	str	r3, [r4, #0]
 8004482:	e7f6      	b.n	8004472 <_printf_i+0x196>
 8004484:	4616      	mov	r6, r2
 8004486:	e7bd      	b.n	8004404 <_printf_i+0x128>
 8004488:	6833      	ldr	r3, [r6, #0]
 800448a:	6825      	ldr	r5, [r4, #0]
 800448c:	6961      	ldr	r1, [r4, #20]
 800448e:	1d18      	adds	r0, r3, #4
 8004490:	6030      	str	r0, [r6, #0]
 8004492:	062e      	lsls	r6, r5, #24
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	d501      	bpl.n	800449c <_printf_i+0x1c0>
 8004498:	6019      	str	r1, [r3, #0]
 800449a:	e002      	b.n	80044a2 <_printf_i+0x1c6>
 800449c:	0668      	lsls	r0, r5, #25
 800449e:	d5fb      	bpl.n	8004498 <_printf_i+0x1bc>
 80044a0:	8019      	strh	r1, [r3, #0]
 80044a2:	2300      	movs	r3, #0
 80044a4:	6123      	str	r3, [r4, #16]
 80044a6:	4616      	mov	r6, r2
 80044a8:	e7bc      	b.n	8004424 <_printf_i+0x148>
 80044aa:	6833      	ldr	r3, [r6, #0]
 80044ac:	1d1a      	adds	r2, r3, #4
 80044ae:	6032      	str	r2, [r6, #0]
 80044b0:	681e      	ldr	r6, [r3, #0]
 80044b2:	6862      	ldr	r2, [r4, #4]
 80044b4:	2100      	movs	r1, #0
 80044b6:	4630      	mov	r0, r6
 80044b8:	f7fb fe8a 	bl	80001d0 <memchr>
 80044bc:	b108      	cbz	r0, 80044c2 <_printf_i+0x1e6>
 80044be:	1b80      	subs	r0, r0, r6
 80044c0:	6060      	str	r0, [r4, #4]
 80044c2:	6863      	ldr	r3, [r4, #4]
 80044c4:	6123      	str	r3, [r4, #16]
 80044c6:	2300      	movs	r3, #0
 80044c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044cc:	e7aa      	b.n	8004424 <_printf_i+0x148>
 80044ce:	6923      	ldr	r3, [r4, #16]
 80044d0:	4632      	mov	r2, r6
 80044d2:	4649      	mov	r1, r9
 80044d4:	4640      	mov	r0, r8
 80044d6:	47d0      	blx	sl
 80044d8:	3001      	adds	r0, #1
 80044da:	d0ad      	beq.n	8004438 <_printf_i+0x15c>
 80044dc:	6823      	ldr	r3, [r4, #0]
 80044de:	079b      	lsls	r3, r3, #30
 80044e0:	d413      	bmi.n	800450a <_printf_i+0x22e>
 80044e2:	68e0      	ldr	r0, [r4, #12]
 80044e4:	9b03      	ldr	r3, [sp, #12]
 80044e6:	4298      	cmp	r0, r3
 80044e8:	bfb8      	it	lt
 80044ea:	4618      	movlt	r0, r3
 80044ec:	e7a6      	b.n	800443c <_printf_i+0x160>
 80044ee:	2301      	movs	r3, #1
 80044f0:	4632      	mov	r2, r6
 80044f2:	4649      	mov	r1, r9
 80044f4:	4640      	mov	r0, r8
 80044f6:	47d0      	blx	sl
 80044f8:	3001      	adds	r0, #1
 80044fa:	d09d      	beq.n	8004438 <_printf_i+0x15c>
 80044fc:	3501      	adds	r5, #1
 80044fe:	68e3      	ldr	r3, [r4, #12]
 8004500:	9903      	ldr	r1, [sp, #12]
 8004502:	1a5b      	subs	r3, r3, r1
 8004504:	42ab      	cmp	r3, r5
 8004506:	dcf2      	bgt.n	80044ee <_printf_i+0x212>
 8004508:	e7eb      	b.n	80044e2 <_printf_i+0x206>
 800450a:	2500      	movs	r5, #0
 800450c:	f104 0619 	add.w	r6, r4, #25
 8004510:	e7f5      	b.n	80044fe <_printf_i+0x222>
 8004512:	bf00      	nop
 8004514:	08004651 	.word	0x08004651
 8004518:	08004662 	.word	0x08004662

0800451c <memmove>:
 800451c:	4288      	cmp	r0, r1
 800451e:	b510      	push	{r4, lr}
 8004520:	eb01 0402 	add.w	r4, r1, r2
 8004524:	d902      	bls.n	800452c <memmove+0x10>
 8004526:	4284      	cmp	r4, r0
 8004528:	4623      	mov	r3, r4
 800452a:	d807      	bhi.n	800453c <memmove+0x20>
 800452c:	1e43      	subs	r3, r0, #1
 800452e:	42a1      	cmp	r1, r4
 8004530:	d008      	beq.n	8004544 <memmove+0x28>
 8004532:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004536:	f803 2f01 	strb.w	r2, [r3, #1]!
 800453a:	e7f8      	b.n	800452e <memmove+0x12>
 800453c:	4402      	add	r2, r0
 800453e:	4601      	mov	r1, r0
 8004540:	428a      	cmp	r2, r1
 8004542:	d100      	bne.n	8004546 <memmove+0x2a>
 8004544:	bd10      	pop	{r4, pc}
 8004546:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800454a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800454e:	e7f7      	b.n	8004540 <memmove+0x24>

08004550 <_sbrk_r>:
 8004550:	b538      	push	{r3, r4, r5, lr}
 8004552:	4d06      	ldr	r5, [pc, #24]	@ (800456c <_sbrk_r+0x1c>)
 8004554:	2300      	movs	r3, #0
 8004556:	4604      	mov	r4, r0
 8004558:	4608      	mov	r0, r1
 800455a:	602b      	str	r3, [r5, #0]
 800455c:	f7fd fb9a 	bl	8001c94 <_sbrk>
 8004560:	1c43      	adds	r3, r0, #1
 8004562:	d102      	bne.n	800456a <_sbrk_r+0x1a>
 8004564:	682b      	ldr	r3, [r5, #0]
 8004566:	b103      	cbz	r3, 800456a <_sbrk_r+0x1a>
 8004568:	6023      	str	r3, [r4, #0]
 800456a:	bd38      	pop	{r3, r4, r5, pc}
 800456c:	2000021c 	.word	0x2000021c

08004570 <memcpy>:
 8004570:	440a      	add	r2, r1
 8004572:	4291      	cmp	r1, r2
 8004574:	f100 33ff 	add.w	r3, r0, #4294967295
 8004578:	d100      	bne.n	800457c <memcpy+0xc>
 800457a:	4770      	bx	lr
 800457c:	b510      	push	{r4, lr}
 800457e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004582:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004586:	4291      	cmp	r1, r2
 8004588:	d1f9      	bne.n	800457e <memcpy+0xe>
 800458a:	bd10      	pop	{r4, pc}

0800458c <_realloc_r>:
 800458c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004590:	4680      	mov	r8, r0
 8004592:	4615      	mov	r5, r2
 8004594:	460c      	mov	r4, r1
 8004596:	b921      	cbnz	r1, 80045a2 <_realloc_r+0x16>
 8004598:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800459c:	4611      	mov	r1, r2
 800459e:	f7ff bc4b 	b.w	8003e38 <_malloc_r>
 80045a2:	b92a      	cbnz	r2, 80045b0 <_realloc_r+0x24>
 80045a4:	f7ff fbdc 	bl	8003d60 <_free_r>
 80045a8:	2400      	movs	r4, #0
 80045aa:	4620      	mov	r0, r4
 80045ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045b0:	f000 f81a 	bl	80045e8 <_malloc_usable_size_r>
 80045b4:	4285      	cmp	r5, r0
 80045b6:	4606      	mov	r6, r0
 80045b8:	d802      	bhi.n	80045c0 <_realloc_r+0x34>
 80045ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80045be:	d8f4      	bhi.n	80045aa <_realloc_r+0x1e>
 80045c0:	4629      	mov	r1, r5
 80045c2:	4640      	mov	r0, r8
 80045c4:	f7ff fc38 	bl	8003e38 <_malloc_r>
 80045c8:	4607      	mov	r7, r0
 80045ca:	2800      	cmp	r0, #0
 80045cc:	d0ec      	beq.n	80045a8 <_realloc_r+0x1c>
 80045ce:	42b5      	cmp	r5, r6
 80045d0:	462a      	mov	r2, r5
 80045d2:	4621      	mov	r1, r4
 80045d4:	bf28      	it	cs
 80045d6:	4632      	movcs	r2, r6
 80045d8:	f7ff ffca 	bl	8004570 <memcpy>
 80045dc:	4621      	mov	r1, r4
 80045de:	4640      	mov	r0, r8
 80045e0:	f7ff fbbe 	bl	8003d60 <_free_r>
 80045e4:	463c      	mov	r4, r7
 80045e6:	e7e0      	b.n	80045aa <_realloc_r+0x1e>

080045e8 <_malloc_usable_size_r>:
 80045e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045ec:	1f18      	subs	r0, r3, #4
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	bfbc      	itt	lt
 80045f2:	580b      	ldrlt	r3, [r1, r0]
 80045f4:	18c0      	addlt	r0, r0, r3
 80045f6:	4770      	bx	lr

080045f8 <_init>:
 80045f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fa:	bf00      	nop
 80045fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045fe:	bc08      	pop	{r3}
 8004600:	469e      	mov	lr, r3
 8004602:	4770      	bx	lr

08004604 <_fini>:
 8004604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004606:	bf00      	nop
 8004608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460a:	bc08      	pop	{r3}
 800460c:	469e      	mov	lr, r3
 800460e:	4770      	bx	lr
