
vol_detection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002a74  08002a74  00003a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ad8  08002ad8  00004060  2**0
                  CONTENTS
  4 .ARM          00000008  08002ad8  08002ad8  00003ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ae0  08002ae0  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ae0  08002ae0  00003ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ae4  08002ae4  00003ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08002ae8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004060  2**0
                  CONTENTS
 10 .bss          00000170  20000060  20000060  00004060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d0  200001d0  00004060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004828  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001260  00000000  00000000  000088b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004c0  00000000  00000000  00009b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000036f  00000000  00000000  00009fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f489  00000000  00000000  0000a347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000062c7  00000000  00000000  000297d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bec9e  00000000  00000000  0002fa97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ee735  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000165c  00000000  00000000  000ee778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  000efdd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002a5c 	.word	0x08002a5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08002a5c 	.word	0x08002a5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000562:	b091      	sub	sp, #68	@ 0x44
 8000564:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fe2b 	bl	80011c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f881 	bl	8000670 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  TimeTypeDef time = {0};  // HAL_RTC_DST_Add1Hour(&hrtc)
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2100      	movs	r1, #0
 8000574:	460a      	mov	r2, r1
 8000576:	801a      	strh	r2, [r3, #0]
 8000578:	460a      	mov	r2, r1
 800057a:	709a      	strb	r2, [r3, #2]
  DateTypeDef date = {0};
 800057c:	f107 031c 	add.w	r3, r7, #28
 8000580:	2100      	movs	r1, #0
 8000582:	460a      	mov	r2, r1
 8000584:	801a      	strh	r2, [r3, #0]
 8000586:	460a      	mov	r2, r1
 8000588:	709a      	strb	r2, [r3, #2]
  char time_string[20];
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f8db 	bl	8000744 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  init_rtc();
 800058e:	f000 fa37 	bl	8000a00 <init_rtc>
  init_rtc3();
 8000592:	f000 fad9 	bl	8000b48 <init_rtc3>
  init_usart_int();
 8000596:	f000 fd37 	bl	8001008 <init_usart_int>
		PWR->CR &= ~PWR_CR_DBP;
  	}
*/
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t data = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t time_tab[5] = {0};
 80005a0:	2300      	movs	r3, #0
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	2300      	movs	r3, #0
 80005a6:	713b      	strb	r3, [r7, #4]
  int input_nb = 5;
 80005a8:	2305      	movs	r3, #5
 80005aa:	627b      	str	r3, [r7, #36]	@ 0x24
  for(int i = 0; i < input_nb; i++){
 80005ac:	2300      	movs	r3, #0
 80005ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80005b0:	e019      	b.n	80005e6 <main+0x86>
	  while(!(USART2->SR & USART_SR_RXNE)){};
 80005b2:	bf00      	nop
 80005b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000660 <main+0x100>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f003 0320 	and.w	r3, r3, #32
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d0f9      	beq.n	80005b4 <main+0x54>
	  data = USART2->DR;
 80005c0:	4b27      	ldr	r3, [pc, #156]	@ (8000660 <main+0x100>)
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	  time_tab[i] = data - '0'; // Convert ASCII value to numerical value
 80005c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80005cc:	3b30      	subs	r3, #48	@ 0x30
 80005ce:	b2d9      	uxtb	r1, r3
 80005d0:	463a      	mov	r2, r7
 80005d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005d4:	4413      	add	r3, r2
 80005d6:	460a      	mov	r2, r1
 80005d8:	701a      	strb	r2, [r3, #0]
	  USART2->DR = 'A';
 80005da:	4b21      	ldr	r3, [pc, #132]	@ (8000660 <main+0x100>)
 80005dc:	2241      	movs	r2, #65	@ 0x41
 80005de:	605a      	str	r2, [r3, #4]
  for(int i = 0; i < input_nb; i++){
 80005e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005e2:	3301      	adds	r3, #1
 80005e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80005e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80005e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ea:	429a      	cmp	r2, r3
 80005ec:	dbe1      	blt.n	80005b2 <main+0x52>
  }
  */
  while (1)
  {
    /* USER CODE END WHILE */
	  btn_poussoir_state = HAL_GPIO_ReadPin(portA, GPIO_PIN_0);
 80005ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000664 <main+0x104>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2101      	movs	r1, #1
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 f8fb 	bl	80017f0 <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	461a      	mov	r2, r3
 80005fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000668 <main+0x108>)
 8000600:	701a      	strb	r2, [r3, #0]
	  if(btn_poussoir_state == GPIO_PIN_SET)
 8000602:	4b19      	ldr	r3, [pc, #100]	@ (8000668 <main+0x108>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d11f      	bne.n	800064a <main+0xea>
	  {
		  sprintf(time_string, "%02d-%02d-%04d %02d:%02d:%02d\r\n", date.Date, date.Month, 2000 + date.Year, time.Hours, time.Minutes, time.Seconds);
 800060a:	7fbb      	ldrb	r3, [r7, #30]
 800060c:	461d      	mov	r5, r3
 800060e:	7f7b      	ldrb	r3, [r7, #29]
 8000610:	461e      	mov	r6, r3
 8000612:	7f3b      	ldrb	r3, [r7, #28]
 8000614:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000618:	f897 2020 	ldrb.w	r2, [r7, #32]
 800061c:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8000620:	f897 0022 	ldrb.w	r0, [r7, #34]	@ 0x22
 8000624:	4604      	mov	r4, r0
 8000626:	f107 0008 	add.w	r0, r7, #8
 800062a:	9403      	str	r4, [sp, #12]
 800062c:	9102      	str	r1, [sp, #8]
 800062e:	9201      	str	r2, [sp, #4]
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	4633      	mov	r3, r6
 8000634:	462a      	mov	r2, r5
 8000636:	490d      	ldr	r1, [pc, #52]	@ (800066c <main+0x10c>)
 8000638:	f001 fd70 	bl	800211c <siprintf>
		  serial_puts(&time_string);
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	4618      	mov	r0, r3
 8000642:	f000 fd6d 	bl	8001120 <serial_puts>
		  newLine();
 8000646:	f000 fd87 	bl	8001158 <newLine>
	  }
	  get_time(&time);
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	4618      	mov	r0, r3
 8000650:	f000 fb5a 	bl	8000d08 <get_time>
	  get_date(&date);
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4618      	mov	r0, r3
 800065a:	f000 fb05 	bl	8000c68 <get_date>
	  btn_poussoir_state = HAL_GPIO_ReadPin(portA, GPIO_PIN_0);
 800065e:	e7c6      	b.n	80005ee <main+0x8e>
 8000660:	40004400 	.word	0x40004400
 8000664:	20000000 	.word	0x20000000
 8000668:	2000007c 	.word	0x2000007c
 800066c:	08002a74 	.word	0x08002a74

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	@ 0x50
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	2230      	movs	r2, #48	@ 0x30
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f001 fd6c 	bl	800215c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	4b28      	ldr	r3, [pc, #160]	@ (800073c <SystemClock_Config+0xcc>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069c:	4a27      	ldr	r2, [pc, #156]	@ (800073c <SystemClock_Config+0xcc>)
 800069e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a4:	4b25      	ldr	r3, [pc, #148]	@ (800073c <SystemClock_Config+0xcc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b0:	2300      	movs	r3, #0
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	4b22      	ldr	r3, [pc, #136]	@ (8000740 <SystemClock_Config+0xd0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a21      	ldr	r2, [pc, #132]	@ (8000740 <SystemClock_Config+0xd0>)
 80006ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000740 <SystemClock_Config+0xd0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006cc:	2302      	movs	r3, #2
 80006ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d4:	2310      	movs	r3, #16
 80006d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d8:	2302      	movs	r3, #2
 80006da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e0:	2308      	movs	r3, #8
 80006e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006e4:	2332      	movs	r3, #50	@ 0x32
 80006e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006e8:	2304      	movs	r3, #4
 80006ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ec:	2307      	movs	r3, #7
 80006ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f0:	f107 0320 	add.w	r3, r7, #32
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 f8ad 	bl	8001854 <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000700:	f000 fb52 	bl	8000da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	230f      	movs	r3, #15
 8000706:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000708:	2302      	movs	r3, #2
 800070a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000710:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000714:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000716:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800071a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f001 fb0e 	bl	8001d44 <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800072e:	f000 fb3b 	bl	8000da8 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	3750      	adds	r7, #80	@ 0x50
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_GPIO_Init>:
  * @param None
  * @retval None
  */

static void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08c      	sub	sp, #48	@ 0x30
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
 800075e:	4ba2      	ldr	r3, [pc, #648]	@ (80009e8 <MX_GPIO_Init+0x2a4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4aa1      	ldr	r2, [pc, #644]	@ (80009e8 <MX_GPIO_Init+0x2a4>)
 8000764:	f043 0310 	orr.w	r3, r3, #16
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b9f      	ldr	r3, [pc, #636]	@ (80009e8 <MX_GPIO_Init+0x2a4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0310 	and.w	r3, r3, #16
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	4b9b      	ldr	r3, [pc, #620]	@ (80009e8 <MX_GPIO_Init+0x2a4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a9a      	ldr	r2, [pc, #616]	@ (80009e8 <MX_GPIO_Init+0x2a4>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b98      	ldr	r3, [pc, #608]	@ (80009e8 <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b94      	ldr	r3, [pc, #592]	@ (80009e8 <MX_GPIO_Init+0x2a4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a93      	ldr	r2, [pc, #588]	@ (80009e8 <MX_GPIO_Init+0x2a4>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b91      	ldr	r3, [pc, #580]	@ (80009e8 <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b8d      	ldr	r3, [pc, #564]	@ (80009e8 <MX_GPIO_Init+0x2a4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a8c      	ldr	r2, [pc, #560]	@ (80009e8 <MX_GPIO_Init+0x2a4>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b8a      	ldr	r3, [pc, #552]	@ (80009e8 <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b86      	ldr	r3, [pc, #536]	@ (80009e8 <MX_GPIO_Init+0x2a4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a85      	ldr	r2, [pc, #532]	@ (80009e8 <MX_GPIO_Init+0x2a4>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b83      	ldr	r3, [pc, #524]	@ (80009e8 <MX_GPIO_Init+0x2a4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b7f      	ldr	r3, [pc, #508]	@ (80009e8 <MX_GPIO_Init+0x2a4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a7e      	ldr	r2, [pc, #504]	@ (80009e8 <MX_GPIO_Init+0x2a4>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b7c      	ldr	r3, [pc, #496]	@ (80009e8 <MX_GPIO_Init+0x2a4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2108      	movs	r1, #8
 8000806:	4879      	ldr	r0, [pc, #484]	@ (80009ec <MX_GPIO_Init+0x2a8>)
 8000808:	f001 f80a 	bl	8001820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	2101      	movs	r1, #1
 8000810:	4877      	ldr	r0, [pc, #476]	@ (80009f0 <MX_GPIO_Init+0x2ac>)
 8000812:	f001 f805 	bl	8001820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000816:	2200      	movs	r2, #0
 8000818:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800081c:	4875      	ldr	r0, [pc, #468]	@ (80009f4 <MX_GPIO_Init+0x2b0>)
 800081e:	f000 ffff 	bl	8001820 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000822:	2308      	movs	r3, #8
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	486c      	ldr	r0, [pc, #432]	@ (80009ec <MX_GPIO_Init+0x2a8>)
 800083a:	f000 fe3d 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800083e:	2301      	movs	r3, #1
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	4866      	ldr	r0, [pc, #408]	@ (80009f0 <MX_GPIO_Init+0x2ac>)
 8000856:	f000 fe2f 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800085a:	2308      	movs	r3, #8
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800086a:	2305      	movs	r3, #5
 800086c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	485e      	ldr	r0, [pc, #376]	@ (80009f0 <MX_GPIO_Init+0x2ac>)
 8000876:	f000 fe1f 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087a:	2301      	movs	r3, #1
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	485a      	ldr	r0, [pc, #360]	@ (80009f8 <MX_GPIO_Init+0x2b4>)
 8000890:	f000 fe12 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000894:	2310      	movs	r3, #16
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008a4:	2306      	movs	r3, #6
 80008a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4852      	ldr	r0, [pc, #328]	@ (80009f8 <MX_GPIO_Init+0x2b4>)
 80008b0:	f000 fe02 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008b4:	23e0      	movs	r3, #224	@ 0xe0
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008c4:	2305      	movs	r3, #5
 80008c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	484a      	ldr	r0, [pc, #296]	@ (80009f8 <MX_GPIO_Init+0x2b4>)
 80008d0:	f000 fdf2 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008d4:	2304      	movs	r3, #4
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4845      	ldr	r0, [pc, #276]	@ (80009fc <MX_GPIO_Init+0x2b8>)
 80008e8:	f000 fde6 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008fe:	2305      	movs	r3, #5
 8000900:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	483c      	ldr	r0, [pc, #240]	@ (80009fc <MX_GPIO_Init+0x2b8>)
 800090a:	f000 fdd5 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800090e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000912:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4833      	ldr	r0, [pc, #204]	@ (80009f4 <MX_GPIO_Init+0x2b0>)
 8000928:	f000 fdc6 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800092c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800093e:	2306      	movs	r3, #6
 8000940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4829      	ldr	r0, [pc, #164]	@ (80009f0 <MX_GPIO_Init+0x2ac>)
 800094a:	f000 fdb5 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800094e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4825      	ldr	r0, [pc, #148]	@ (80009f8 <MX_GPIO_Init+0x2b4>)
 8000964:	f000 fda8 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000968:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800097a:	230a      	movs	r3, #10
 800097c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	481c      	ldr	r0, [pc, #112]	@ (80009f8 <MX_GPIO_Init+0x2b4>)
 8000986:	f000 fd97 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800098a:	2320      	movs	r3, #32
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4815      	ldr	r0, [pc, #84]	@ (80009f4 <MX_GPIO_Init+0x2b0>)
 800099e:	f000 fd8b 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009a2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a8:	2312      	movs	r3, #18
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009b4:	2304      	movs	r3, #4
 80009b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	480f      	ldr	r0, [pc, #60]	@ (80009fc <MX_GPIO_Init+0x2b8>)
 80009c0:	f000 fd7a 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009c8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4804      	ldr	r0, [pc, #16]	@ (80009ec <MX_GPIO_Init+0x2a8>)
 80009da:	f000 fd6d 	bl	80014b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009de:	bf00      	nop
 80009e0:	3730      	adds	r7, #48	@ 0x30
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40020800 	.word	0x40020800
 80009f4:	40020c00 	.word	0x40020c00
 80009f8:	40020000 	.word	0x40020000
 80009fc:	40020400 	.word	0x40020400

08000a00 <init_rtc>:


/* USER CODE BEGIN 4 */
static void init_rtc(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
	uint8_t asynch_factor = 0x7F; // 0111.1111
 8000a06:	237f      	movs	r3, #127	@ 0x7f
 8000a08:	71fb      	strb	r3, [r7, #7]
	uint8_t synch_factor = 0xFF; // 1111.1111 255
 8000a0a:	23ff      	movs	r3, #255	@ 0xff
 8000a0c:	71bb      	strb	r3, [r7, #6]
	// Low Speed Clock config
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000a0e:	4b40      	ldr	r3, [pc, #256]	@ (8000b10 <init_rtc+0x110>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a3f      	ldr	r2, [pc, #252]	@ (8000b10 <init_rtc+0x110>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_DBP;
 8000a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b14 <init_rtc+0x114>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a3d      	ldr	r2, [pc, #244]	@ (8000b14 <init_rtc+0x114>)
 8000a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a24:	6013      	str	r3, [r2, #0]
	RCC->CSR |= RCC_CSR_LSION;
 8000a26:	4b3a      	ldr	r3, [pc, #232]	@ (8000b10 <init_rtc+0x110>)
 8000a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000a2a:	4a39      	ldr	r2, [pc, #228]	@ (8000b10 <init_rtc+0x110>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6753      	str	r3, [r2, #116]	@ 0x74
	while(!(RCC->CSR & RCC_CSR_LSIRDY)){};
 8000a32:	bf00      	nop
 8000a34:	4b36      	ldr	r3, [pc, #216]	@ (8000b10 <init_rtc+0x110>)
 8000a36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000a38:	f003 0302 	and.w	r3, r3, #2
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d0f9      	beq.n	8000a34 <init_rtc+0x34>
	RCC->BDCR |= 0x8200;
 8000a40:	4b33      	ldr	r3, [pc, #204]	@ (8000b10 <init_rtc+0x110>)
 8000a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000a44:	4a32      	ldr	r2, [pc, #200]	@ (8000b10 <init_rtc+0x110>)
 8000a46:	f443 4302 	orr.w	r3, r3, #33280	@ 0x8200
 8000a4a:	6713      	str	r3, [r2, #112]	@ 0x70

	// enable RTC write
	RTC->WPR = 0xCA;
 8000a4c:	4b32      	ldr	r3, [pc, #200]	@ (8000b18 <init_rtc+0x118>)
 8000a4e:	22ca      	movs	r2, #202	@ 0xca
 8000a50:	625a      	str	r2, [r3, #36]	@ 0x24
	RTC->WPR = 0x53;
 8000a52:	4b31      	ldr	r3, [pc, #196]	@ (8000b18 <init_rtc+0x118>)
 8000a54:	2253      	movs	r2, #83	@ 0x53
 8000a56:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable init mode
	RTC->ISR |= (1<<ISR_IN_BIT);
 8000a58:	4b2f      	ldr	r3, [pc, #188]	@ (8000b18 <init_rtc+0x118>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	4a2e      	ldr	r2, [pc, #184]	@ (8000b18 <init_rtc+0x118>)
 8000a5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a62:	60d3      	str	r3, [r2, #12]
	while(!( RTC->ISR & (1<<ISR_INITF_BIT) )){};
 8000a64:	bf00      	nop
 8000a66:	4b2c      	ldr	r3, [pc, #176]	@ (8000b18 <init_rtc+0x118>)
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d0f9      	beq.n	8000a66 <init_rtc+0x66>


	// program first the asynchronous prescaler factor in RTC_PRER register
	RTC->PRER &= ~(RTC_PRER_ASYNC_MASK<<RTC_PRER_ASYNC_LSB);
 8000a72:	4b29      	ldr	r3, [pc, #164]	@ (8000b18 <init_rtc+0x118>)
 8000a74:	691b      	ldr	r3, [r3, #16]
 8000a76:	4a28      	ldr	r2, [pc, #160]	@ (8000b18 <init_rtc+0x118>)
 8000a78:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8000a7c:	6113      	str	r3, [r2, #16]
	RTC->PRER |= asynch_factor<<RTC_PRER_ASYNC_LSB;
 8000a7e:	4b26      	ldr	r3, [pc, #152]	@ (8000b18 <init_rtc+0x118>)
 8000a80:	691a      	ldr	r2, [r3, #16]
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	041b      	lsls	r3, r3, #16
 8000a86:	4924      	ldr	r1, [pc, #144]	@ (8000b18 <init_rtc+0x118>)
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	610b      	str	r3, [r1, #16]

	//  program the synchronous prescaler factor
	RTC->PRER &= ~RTC_PRER_SYNC_MASK;
 8000a8c:	4b22      	ldr	r3, [pc, #136]	@ (8000b18 <init_rtc+0x118>)
 8000a8e:	691b      	ldr	r3, [r3, #16]
 8000a90:	4a21      	ldr	r2, [pc, #132]	@ (8000b18 <init_rtc+0x118>)
 8000a92:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000a96:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000a9a:	6113      	str	r3, [r2, #16]
	RTC->PRER |= synch_factor;
 8000a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b18 <init_rtc+0x118>)
 8000a9e:	691a      	ldr	r2, [r3, #16]
 8000aa0:	79bb      	ldrb	r3, [r7, #6]
 8000aa2:	491d      	ldr	r1, [pc, #116]	@ (8000b18 <init_rtc+0x118>)
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	610b      	str	r3, [r1, #16]

	// default time
	RTC->TR &= 0xFF808080;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b18 <init_rtc+0x118>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a1a      	ldr	r2, [pc, #104]	@ (8000b18 <init_rtc+0x118>)
 8000aae:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
 8000ab2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8000ab6:	6013      	str	r3, [r2, #0]
	RTC->TR |=(11<<16) | (0x10<<8);
 8000ab8:	4b17      	ldr	r3, [pc, #92]	@ (8000b18 <init_rtc+0x118>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a16      	ldr	r2, [pc, #88]	@ (8000b18 <init_rtc+0x118>)
 8000abe:	f443 2331 	orr.w	r3, r3, #724992	@ 0xb1000
 8000ac2:	6013      	str	r3, [r2, #0]

	// default date
	RTC->DR &= 0xFF0020C0;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	@ (8000b18 <init_rtc+0x118>)
 8000ac6:	685a      	ldr	r2, [r3, #4]
 8000ac8:	4913      	ldr	r1, [pc, #76]	@ (8000b18 <init_rtc+0x118>)
 8000aca:	4b14      	ldr	r3, [pc, #80]	@ (8000b1c <init_rtc+0x11c>)
 8000acc:	4013      	ands	r3, r2
 8000ace:	604b      	str	r3, [r1, #4]
	RTC->DR |= (0x24<<16) | (3<<8) | (0x30);
 8000ad0:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <init_rtc+0x118>)
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	4a10      	ldr	r2, [pc, #64]	@ (8000b18 <init_rtc+0x118>)
 8000ad6:	f443 1310 	orr.w	r3, r3, #2359296	@ 0x240000
 8000ada:	f443 734c 	orr.w	r3, r3, #816	@ 0x330
 8000ade:	6053      	str	r3, [r2, #4]

	// disable init mode
	RTC->CR |= RTC_CR_BYPSHAD;
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <init_rtc+0x118>)
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8000b18 <init_rtc+0x118>)
 8000ae6:	f043 0320 	orr.w	r3, r3, #32
 8000aea:	6093      	str	r3, [r2, #8]
	RTC->ISR &= ~RTC_ISR_INIT;
 8000aec:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <init_rtc+0x118>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	4a09      	ldr	r2, [pc, #36]	@ (8000b18 <init_rtc+0x118>)
 8000af2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000af6:	60d3      	str	r3, [r2, #12]
	PWR->CR &= ~PWR_CR_DBP;
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <init_rtc+0x114>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a05      	ldr	r2, [pc, #20]	@ (8000b14 <init_rtc+0x114>)
 8000afe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000b02:	6013      	str	r3, [r2, #0]

}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40007000 	.word	0x40007000
 8000b18:	40002800 	.word	0x40002800
 8000b1c:	ff0020c0 	.word	0xff0020c0

08000b20 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
    if (USART2->SR & USART_SR_RXNE) // If data is received
 8000b26:	4b07      	ldr	r3, [pc, #28]	@ (8000b44 <USART2_IRQHandler+0x24>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f003 0320 	and.w	r3, r3, #32
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d002      	beq.n	8000b38 <USART2_IRQHandler+0x18>
    {
        // Read the received data
        uint8_t data = USART2->DR;
 8000b32:	4b04      	ldr	r3, [pc, #16]	@ (8000b44 <USART2_IRQHandler+0x24>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	71fb      	strb	r3, [r7, #7]

        // TODO: Parse the received data and set the RTC
    }
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	40004400 	.word	0x40004400

08000b48 <init_rtc3>:

/* USER CODE BEGIN 4 */
static void init_rtc3(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
	uint8_t asynch_factor = 0x7F; // 0111.1111
 8000b4e:	237f      	movs	r3, #127	@ 0x7f
 8000b50:	71fb      	strb	r3, [r7, #7]
	uint8_t synch_factor = 0xFF; // 1111.1111 255
 8000b52:	23ff      	movs	r3, #255	@ 0xff
 8000b54:	71bb      	strb	r3, [r7, #6]
	// Low Speed Clock config
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000b56:	4b40      	ldr	r3, [pc, #256]	@ (8000c58 <init_rtc3+0x110>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5a:	4a3f      	ldr	r2, [pc, #252]	@ (8000c58 <init_rtc3+0x110>)
 8000b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b60:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_DBP;
 8000b62:	4b3e      	ldr	r3, [pc, #248]	@ (8000c5c <init_rtc3+0x114>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a3d      	ldr	r2, [pc, #244]	@ (8000c5c <init_rtc3+0x114>)
 8000b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b6c:	6013      	str	r3, [r2, #0]
	RCC->CSR |= RCC_CSR_LSION;
 8000b6e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c58 <init_rtc3+0x110>)
 8000b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000b72:	4a39      	ldr	r2, [pc, #228]	@ (8000c58 <init_rtc3+0x110>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6753      	str	r3, [r2, #116]	@ 0x74
	while(!(RCC->CSR & RCC_CSR_LSIRDY)){};
 8000b7a:	bf00      	nop
 8000b7c:	4b36      	ldr	r3, [pc, #216]	@ (8000c58 <init_rtc3+0x110>)
 8000b7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000b80:	f003 0302 	and.w	r3, r3, #2
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d0f9      	beq.n	8000b7c <init_rtc3+0x34>
	RCC->BDCR |= 0x8200;
 8000b88:	4b33      	ldr	r3, [pc, #204]	@ (8000c58 <init_rtc3+0x110>)
 8000b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000b8c:	4a32      	ldr	r2, [pc, #200]	@ (8000c58 <init_rtc3+0x110>)
 8000b8e:	f443 4302 	orr.w	r3, r3, #33280	@ 0x8200
 8000b92:	6713      	str	r3, [r2, #112]	@ 0x70

	// enable RTC write
	RTC->WPR = 0xCA;
 8000b94:	4b32      	ldr	r3, [pc, #200]	@ (8000c60 <init_rtc3+0x118>)
 8000b96:	22ca      	movs	r2, #202	@ 0xca
 8000b98:	625a      	str	r2, [r3, #36]	@ 0x24
	RTC->WPR = 0x53;
 8000b9a:	4b31      	ldr	r3, [pc, #196]	@ (8000c60 <init_rtc3+0x118>)
 8000b9c:	2253      	movs	r2, #83	@ 0x53
 8000b9e:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable init mode
	RTC->ISR |= (1<<ISR_IN_BIT);
 8000ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8000c60 <init_rtc3+0x118>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	4a2e      	ldr	r2, [pc, #184]	@ (8000c60 <init_rtc3+0x118>)
 8000ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000baa:	60d3      	str	r3, [r2, #12]
	while(!( RTC->ISR & (1<<ISR_INITF_BIT) )){};
 8000bac:	bf00      	nop
 8000bae:	4b2c      	ldr	r3, [pc, #176]	@ (8000c60 <init_rtc3+0x118>)
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0f9      	beq.n	8000bae <init_rtc3+0x66>


	// program first the asynchronous prescaler factor in RTC_PRER register
	RTC->PRER &= ~(RTC_PRER_ASYNC_MASK<<RTC_PRER_ASYNC_LSB);
 8000bba:	4b29      	ldr	r3, [pc, #164]	@ (8000c60 <init_rtc3+0x118>)
 8000bbc:	691b      	ldr	r3, [r3, #16]
 8000bbe:	4a28      	ldr	r2, [pc, #160]	@ (8000c60 <init_rtc3+0x118>)
 8000bc0:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8000bc4:	6113      	str	r3, [r2, #16]
	RTC->PRER |= asynch_factor<<RTC_PRER_ASYNC_LSB;
 8000bc6:	4b26      	ldr	r3, [pc, #152]	@ (8000c60 <init_rtc3+0x118>)
 8000bc8:	691a      	ldr	r2, [r3, #16]
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	041b      	lsls	r3, r3, #16
 8000bce:	4924      	ldr	r1, [pc, #144]	@ (8000c60 <init_rtc3+0x118>)
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	610b      	str	r3, [r1, #16]

	//  program the synchronous prescaler factor
	RTC->PRER &= ~RTC_PRER_SYNC_MASK;
 8000bd4:	4b22      	ldr	r3, [pc, #136]	@ (8000c60 <init_rtc3+0x118>)
 8000bd6:	691b      	ldr	r3, [r3, #16]
 8000bd8:	4a21      	ldr	r2, [pc, #132]	@ (8000c60 <init_rtc3+0x118>)
 8000bda:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000bde:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000be2:	6113      	str	r3, [r2, #16]
	RTC->PRER |= synch_factor;
 8000be4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c60 <init_rtc3+0x118>)
 8000be6:	691a      	ldr	r2, [r3, #16]
 8000be8:	79bb      	ldrb	r3, [r7, #6]
 8000bea:	491d      	ldr	r1, [pc, #116]	@ (8000c60 <init_rtc3+0x118>)
 8000bec:	4313      	orrs	r3, r2
 8000bee:	610b      	str	r3, [r1, #16]

	// default time
	RTC->TR &= 0xFF808080;
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c60 <init_rtc3+0x118>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a1a      	ldr	r2, [pc, #104]	@ (8000c60 <init_rtc3+0x118>)
 8000bf6:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
 8000bfa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8000bfe:	6013      	str	r3, [r2, #0]
	RTC->TR |=(14<<16) | (0x10<<8);
 8000c00:	4b17      	ldr	r3, [pc, #92]	@ (8000c60 <init_rtc3+0x118>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a16      	ldr	r2, [pc, #88]	@ (8000c60 <init_rtc3+0x118>)
 8000c06:	f443 2361 	orr.w	r3, r3, #921600	@ 0xe1000
 8000c0a:	6013      	str	r3, [r2, #0]

	// default date
	RTC->DR &= 0xFF0020C0;
 8000c0c:	4b14      	ldr	r3, [pc, #80]	@ (8000c60 <init_rtc3+0x118>)
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	4913      	ldr	r1, [pc, #76]	@ (8000c60 <init_rtc3+0x118>)
 8000c12:	4b14      	ldr	r3, [pc, #80]	@ (8000c64 <init_rtc3+0x11c>)
 8000c14:	4013      	ands	r3, r2
 8000c16:	604b      	str	r3, [r1, #4]
	RTC->DR |= (0x24<<16) | (3<<8) | (0x30);
 8000c18:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <init_rtc3+0x118>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	4a10      	ldr	r2, [pc, #64]	@ (8000c60 <init_rtc3+0x118>)
 8000c1e:	f443 1310 	orr.w	r3, r3, #2359296	@ 0x240000
 8000c22:	f443 734c 	orr.w	r3, r3, #816	@ 0x330
 8000c26:	6053      	str	r3, [r2, #4]

	// disable init mode
	RTC->CR |= RTC_CR_BYPSHAD;
 8000c28:	4b0d      	ldr	r3, [pc, #52]	@ (8000c60 <init_rtc3+0x118>)
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c60 <init_rtc3+0x118>)
 8000c2e:	f043 0320 	orr.w	r3, r3, #32
 8000c32:	6093      	str	r3, [r2, #8]
	RTC->ISR &= ~RTC_ISR_INIT;
 8000c34:	4b0a      	ldr	r3, [pc, #40]	@ (8000c60 <init_rtc3+0x118>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	4a09      	ldr	r2, [pc, #36]	@ (8000c60 <init_rtc3+0x118>)
 8000c3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000c3e:	60d3      	str	r3, [r2, #12]
	PWR->CR &= ~PWR_CR_DBP;
 8000c40:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <init_rtc3+0x114>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a05      	ldr	r2, [pc, #20]	@ (8000c5c <init_rtc3+0x114>)
 8000c46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000c4a:	6013      	str	r3, [r2, #0]

}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40007000 	.word	0x40007000
 8000c60:	40002800 	.word	0x40002800
 8000c64:	ff0020c0 	.word	0xff0020c0

08000c68 <get_date>:
	RTC->ISR &= ~RTC_ISR_INIT;
	PWR->CR &= ~PWR_CR_DBP;

}

void get_date(DateTypeDef *date){
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

	date->Year = (((RTC->DR >> 20)&0xF)*10) + ((RTC->DR >> 16)&0xF);
 8000c70:	4b24      	ldr	r3, [pc, #144]	@ (8000d04 <get_date+0x9c>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	0d1b      	lsrs	r3, r3, #20
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	f003 030f 	and.w	r3, r3, #15
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	461a      	mov	r2, r3
 8000c80:	0092      	lsls	r2, r2, #2
 8000c82:	4413      	add	r3, r2
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b1e      	ldr	r3, [pc, #120]	@ (8000d04 <get_date+0x9c>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	0c1b      	lsrs	r3, r3, #16
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	f003 030f 	and.w	r3, r3, #15
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	4413      	add	r3, r2
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	701a      	strb	r2, [r3, #0]
	date->Month = (10*((RTC->DR >> 12)&1)) + ((RTC->DR >> 8)&0xF);
 8000c9e:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <get_date+0x9c>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	0b1b      	lsrs	r3, r3, #12
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	461a      	mov	r2, r3
 8000cae:	0092      	lsls	r2, r2, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4b13      	ldr	r3, [pc, #76]	@ (8000d04 <get_date+0x9c>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	0a1b      	lsrs	r3, r3, #8
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	4413      	add	r3, r2
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	705a      	strb	r2, [r3, #1]
	date->Date = (10*((RTC->DR >> 4)&3)) + (RTC->DR & 0xF);
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d04 <get_date+0x9c>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	091b      	lsrs	r3, r3, #4
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	461a      	mov	r2, r3
 8000cdc:	0092      	lsls	r2, r2, #2
 8000cde:	4413      	add	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	4b07      	ldr	r3, [pc, #28]	@ (8000d04 <get_date+0x9c>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	4413      	add	r3, r2
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	709a      	strb	r2, [r3, #2]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	40002800 	.word	0x40002800

08000d08 <get_time>:

void get_time(TimeTypeDef *time){
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	time->Seconds = (RTC->TR & 0xF) + 10*((RTC->TR >> 4)&7);
 8000d10:	4b24      	ldr	r3, [pc, #144]	@ (8000da4 <get_time+0x9c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	4b21      	ldr	r3, [pc, #132]	@ (8000da4 <get_time+0x9c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	091b      	lsrs	r3, r3, #4
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	f003 0307 	and.w	r3, r3, #7
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	0089      	lsls	r1, r1, #2
 8000d2e:	440b      	add	r3, r1
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	4413      	add	r3, r2
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	709a      	strb	r2, [r3, #2]
	time->Minutes = ((RTC->TR >> 8)&0xF) + 10*((RTC->TR >> 12)&7);
 8000d3c:	4b19      	ldr	r3, [pc, #100]	@ (8000da4 <get_time+0x9c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	f003 030f 	and.w	r3, r3, #15
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b16      	ldr	r3, [pc, #88]	@ (8000da4 <get_time+0x9c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	0b1b      	lsrs	r3, r3, #12
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	4619      	mov	r1, r3
 8000d5a:	0089      	lsls	r1, r1, #2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	4413      	add	r3, r2
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	705a      	strb	r2, [r3, #1]
	time->Hours = ((RTC->TR >> 16)&0xF) + 10*(((RTC->TR >> 20)&3));
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <get_time+0x9c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	0c1b      	lsrs	r3, r3, #16
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <get_time+0x9c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	0d1b      	lsrs	r3, r3, #20
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	f003 0303 	and.w	r3, r3, #3
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	4619      	mov	r1, r3
 8000d88:	0089      	lsls	r1, r1, #2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	4413      	add	r3, r2
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	701a      	strb	r2, [r3, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	40002800 	.word	0x40002800

08000da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dac:	b672      	cpsid	i
}
 8000dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <Error_Handler+0x8>

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <HAL_MspInit+0x4c>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc2:	4a0f      	ldr	r2, [pc, #60]	@ (8000e00 <HAL_MspInit+0x4c>)
 8000dc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dca:	4b0d      	ldr	r3, [pc, #52]	@ (8000e00 <HAL_MspInit+0x4c>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <HAL_MspInit+0x4c>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dde:	4a08      	ldr	r2, [pc, #32]	@ (8000e00 <HAL_MspInit+0x4c>)
 8000de0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de6:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <HAL_MspInit+0x4c>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000df2:	2007      	movs	r0, #7
 8000df4:	f000 fb2c 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40023800 	.word	0x40023800

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <NMI_Handler+0x4>

08000e0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <HardFault_Handler+0x4>

08000e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <MemManage_Handler+0x4>

08000e1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <BusFault_Handler+0x4>

08000e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <UsageFault_Handler+0x4>

08000e2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e5a:	f000 fa03 	bl	8001264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e6c:	4a14      	ldr	r2, [pc, #80]	@ (8000ec0 <_sbrk+0x5c>)
 8000e6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <_sbrk+0x60>)
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e78:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d102      	bne.n	8000e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e80:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <_sbrk+0x64>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	@ (8000ecc <_sbrk+0x68>)
 8000e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e86:	4b10      	ldr	r3, [pc, #64]	@ (8000ec8 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d207      	bcs.n	8000ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e94:	f001 f96a 	bl	800216c <__errno>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea2:	e009      	b.n	8000eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea4:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eaa:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <_sbrk+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	4a05      	ldr	r2, [pc, #20]	@ (8000ec8 <_sbrk+0x64>)
 8000eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20020000 	.word	0x20020000
 8000ec4:	00000400 	.word	0x00000400
 8000ec8:	20000080 	.word	0x20000080
 8000ecc:	200001d0 	.word	0x200001d0

08000ed0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed4:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <SystemInit+0x20>)
 8000ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eda:	4a05      	ldr	r2, [pc, #20]	@ (8000ef0 <SystemInit+0x20>)
 8000edc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ee0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef8:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <__NVIC_GetPriorityGrouping+0x18>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	f003 0307 	and.w	r3, r3, #7
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	db0b      	blt.n	8000f3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	f003 021f 	and.w	r2, r3, #31
 8000f28:	4907      	ldr	r1, [pc, #28]	@ (8000f48 <__NVIC_EnableIRQ+0x38>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	095b      	lsrs	r3, r3, #5
 8000f30:	2001      	movs	r0, #1
 8000f32:	fa00 f202 	lsl.w	r2, r0, r2
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000e100 	.word	0xe000e100

08000f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db0a      	blt.n	8000f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	490c      	ldr	r1, [pc, #48]	@ (8000f98 <__NVIC_SetPriority+0x4c>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	0112      	lsls	r2, r2, #4
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	440b      	add	r3, r1
 8000f70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f74:	e00a      	b.n	8000f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4908      	ldr	r1, [pc, #32]	@ (8000f9c <__NVIC_SetPriority+0x50>)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	3b04      	subs	r3, #4
 8000f84:	0112      	lsls	r2, r2, #4
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	440b      	add	r3, r1
 8000f8a:	761a      	strb	r2, [r3, #24]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000e100 	.word	0xe000e100
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	@ 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f1c3 0307 	rsb	r3, r3, #7
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	bf28      	it	cs
 8000fbe:	2304      	movcs	r3, #4
 8000fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	d902      	bls.n	8000fd0 <NVIC_EncodePriority+0x30>
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3b03      	subs	r3, #3
 8000fce:	e000      	b.n	8000fd2 <NVIC_EncodePriority+0x32>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43d9      	mvns	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	4313      	orrs	r3, r2
         );
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3724      	adds	r7, #36	@ 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <init_usart_int>:

	HAL_Delay(1);
}

// USART2 Initialization with Rx interrupt
void init_usart_int(void){
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0

	//Initialize PA2 as USART2_TX and PA3 as USART2_RX
	//Activate A port
	SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIOAEN);
 800100c:	4b31      	ldr	r3, [pc, #196]	@ (80010d4 <init_usart_int+0xcc>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001010:	4a30      	ldr	r2, [pc, #192]	@ (80010d4 <init_usart_int+0xcc>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	6313      	str	r3, [r2, #48]	@ 0x30
    /* Setup PA2 and PA3 as Alternate Function */
	GPIOA->MODER |= 0x000000A0;
 8001018:	4b2f      	ldr	r3, [pc, #188]	@ (80010d8 <init_usart_int+0xd0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a2e      	ldr	r2, [pc, #184]	@ (80010d8 <init_usart_int+0xd0>)
 800101e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001022:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= 0xFFFFFFAF;
 8001024:	4b2c      	ldr	r3, [pc, #176]	@ (80010d8 <init_usart_int+0xd0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a2b      	ldr	r2, [pc, #172]	@ (80010d8 <init_usart_int+0xd0>)
 800102a:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 800102e:	6013      	str	r3, [r2, #0]
	/* Setup Alternate function as USART2 */
	GPIOA->AFR[0] &= 0xFFFF77FF;
 8001030:	4b29      	ldr	r3, [pc, #164]	@ (80010d8 <init_usart_int+0xd0>)
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	4a28      	ldr	r2, [pc, #160]	@ (80010d8 <init_usart_int+0xd0>)
 8001036:	f423 4308 	bic.w	r3, r3, #34816	@ 0x8800
 800103a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 0x00007700;
 800103c:	4b26      	ldr	r3, [pc, #152]	@ (80010d8 <init_usart_int+0xd0>)
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	4a25      	ldr	r2, [pc, #148]	@ (80010d8 <init_usart_int+0xd0>)
 8001042:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8001046:	6213      	str	r3, [r2, #32]
	/* Push pull output */
	GPIOA->OTYPER &= 0xFFFFFFF3;
 8001048:	4b23      	ldr	r3, [pc, #140]	@ (80010d8 <init_usart_int+0xd0>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	4a22      	ldr	r2, [pc, #136]	@ (80010d8 <init_usart_int+0xd0>)
 800104e:	f023 030c 	bic.w	r3, r3, #12
 8001052:	6053      	str	r3, [r2, #4]
	/* Pull up resistor on */
	GPIOA->PUPDR &= 0xFFFFFF5F;
 8001054:	4b20      	ldr	r3, [pc, #128]	@ (80010d8 <init_usart_int+0xd0>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	4a1f      	ldr	r2, [pc, #124]	@ (80010d8 <init_usart_int+0xd0>)
 800105a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800105e:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 0x00000050;
 8001060:	4b1d      	ldr	r3, [pc, #116]	@ (80010d8 <init_usart_int+0xd0>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	4a1c      	ldr	r2, [pc, #112]	@ (80010d8 <init_usart_int+0xd0>)
 8001066:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800106a:	60d3      	str	r3, [r2, #12]
	/* Output speed set to VeryHigh */
	GPIOA->OSPEEDR |= 0x000000F0;
 800106c:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <init_usart_int+0xd0>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	4a19      	ldr	r2, [pc, #100]	@ (80010d8 <init_usart_int+0xd0>)
 8001072:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8001076:	6093      	str	r3, [r2, #8]


	//Activate USART2 Clock
	SET_BIT(RCC->APB1ENR,RCC_APB1ENR_USART2EN);
 8001078:	4b16      	ldr	r3, [pc, #88]	@ (80010d4 <init_usart_int+0xcc>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107c:	4a15      	ldr	r2, [pc, #84]	@ (80010d4 <init_usart_int+0xcc>)
 800107e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001082:	6413      	str	r3, [r2, #64]	@ 0x40
	//Enable USART, no TE no RE yet, Oversampling = 8, 8bit mode, no parity, Rx interrupt enable
	//Enable Tx and Rx
	USART2->CR1 = 0x0000802C;
 8001084:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <init_usart_int+0xd4>)
 8001086:	f248 022c 	movw	r2, #32812	@ 0x802c
 800108a:	60da      	str	r2, [r3, #12]
	// No LIN mode, No clock output (synchronous mode)
	USART2->CR2 = 0x00000000;
 800108c:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <init_usart_int+0xd4>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
	// No control mode, 3 sample point,
	USART2->CR3 = 0x00000000;
 8001092:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <init_usart_int+0xd4>)
 8001094:	2200      	movs	r2, #0
 8001096:	615a      	str	r2, [r3, #20]
	// 19200bauds -> USARTDIV = 273.4375 -> Mantissa = 273d=0x111 , Fraction = 0.4375*16 = 7d = 0x7
	USART2->BRR = 0x00001117;
 8001098:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <init_usart_int+0xd4>)
 800109a:	f241 1217 	movw	r2, #4375	@ 0x1117
 800109e:	609a      	str	r2, [r3, #8]
	//Enable UART
	USART2->CR1 = 0x0000A02C;
 80010a0:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <init_usart_int+0xd4>)
 80010a2:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 80010a6:	60da      	str	r2, [r3, #12]
	//SET_BIT(USART2->CR1, USART_CR1_UE );

	HAL_Delay(1);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f000 f8fb 	bl	80012a4 <HAL_Delay>

	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80010ae:	f7ff ff21 	bl	8000ef4 <__NVIC_GetPriorityGrouping>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2200      	movs	r2, #0
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff71 	bl	8000fa0 <NVIC_EncodePriority>
 80010be:	4603      	mov	r3, r0
 80010c0:	4619      	mov	r1, r3
 80010c2:	2026      	movs	r0, #38	@ 0x26
 80010c4:	f7ff ff42 	bl	8000f4c <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 80010c8:	2026      	movs	r0, #38	@ 0x26
 80010ca:	f7ff ff21 	bl	8000f10 <__NVIC_EnableIRQ>
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020000 	.word	0x40020000
 80010dc:	40004400 	.word	0x40004400

080010e0 <serial_putc>:

void serial_putc(char c)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	//Load data to register
	USART2->DR = c;
 80010ea:	4a0c      	ldr	r2, [pc, #48]	@ (800111c <serial_putc+0x3c>)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	6053      	str	r3, [r2, #4]
	while(!(USART2->SR & 0x00000080));
 80010f0:	bf00      	nop
 80010f2:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <serial_putc+0x3c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0f9      	beq.n	80010f2 <serial_putc+0x12>
	while(!(USART2->SR & 0x00000040));
 80010fe:	bf00      	nop
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <serial_putc+0x3c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0f9      	beq.n	8001100 <serial_putc+0x20>
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40004400 	.word	0x40004400

08001120 <serial_puts>:

void serial_puts( char *msg)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	int cnt = 0;;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 800112c:	e009      	b.n	8001142 <serial_puts+0x22>
		serial_putc(msg[cnt]);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	4413      	add	r3, r2
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ffd2 	bl	80010e0 <serial_putc>
		cnt++;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3301      	adds	r3, #1
 8001140:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	4413      	add	r3, r2
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1ef      	bne.n	800112e <serial_puts+0xe>
	}
}
 800114e:	bf00      	nop
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <newLine>:

void newLine()
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	serial_putc(10); // nouvelle ligne
 800115c:	200a      	movs	r0, #10
 800115e:	f7ff ffbf 	bl	80010e0 <serial_putc>
	serial_putc(13); // retour chariot
 8001162:	200d      	movs	r0, #13
 8001164:	f7ff ffbc 	bl	80010e0 <serial_putc>
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800116c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001170:	f7ff feae 	bl	8000ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001174:	480c      	ldr	r0, [pc, #48]	@ (80011a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001176:	490d      	ldr	r1, [pc, #52]	@ (80011ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001178:	4a0d      	ldr	r2, [pc, #52]	@ (80011b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800117c:	e002      	b.n	8001184 <LoopCopyDataInit>

0800117e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001182:	3304      	adds	r3, #4

08001184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001188:	d3f9      	bcc.n	800117e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118a:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800118c:	4c0a      	ldr	r4, [pc, #40]	@ (80011b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001190:	e001      	b.n	8001196 <LoopFillZerobss>

08001192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001194:	3204      	adds	r2, #4

08001196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001198:	d3fb      	bcc.n	8001192 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800119a:	f000 ffed 	bl	8002178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800119e:	f7ff f9df 	bl	8000560 <main>
  bx  lr    
 80011a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ac:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80011b0:	08002ae8 	.word	0x08002ae8
  ldr r2, =_sbss
 80011b4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80011b8:	200001d0 	.word	0x200001d0

080011bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC_IRQHandler>
	...

080011c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <HAL_Init+0x40>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001200 <HAL_Init+0x40>)
 80011ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <HAL_Init+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001200 <HAL_Init+0x40>)
 80011d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011dc:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a07      	ldr	r2, [pc, #28]	@ (8001200 <HAL_Init+0x40>)
 80011e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e8:	2003      	movs	r0, #3
 80011ea:	f000 f931 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ee:	2000      	movs	r0, #0
 80011f0:	f000 f808 	bl	8001204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f4:	f7ff fdde 	bl	8000db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023c00 	.word	0x40023c00

08001204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <HAL_InitTick+0x54>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <HAL_InitTick+0x58>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f93b 	bl	800149e <HAL_SYSTICK_Config>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00e      	b.n	8001250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d80a      	bhi.n	800124e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f000 f911 	bl	8001466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001244:	4a06      	ldr	r2, [pc, #24]	@ (8001260 <HAL_InitTick+0x5c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000004 	.word	0x20000004
 800125c:	2000000c 	.word	0x2000000c
 8001260:	20000008 	.word	0x20000008

08001264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_IncTick+0x20>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <HAL_IncTick+0x24>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a04      	ldr	r2, [pc, #16]	@ (8001288 <HAL_IncTick+0x24>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	2000000c 	.word	0x2000000c
 8001288:	20000084 	.word	0x20000084

0800128c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b03      	ldr	r3, [pc, #12]	@ (80012a0 <HAL_GetTick+0x14>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000084 	.word	0x20000084

080012a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ac:	f7ff ffee 	bl	800128c <HAL_GetTick>
 80012b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012bc:	d005      	beq.n	80012ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012be:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <HAL_Delay+0x44>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ca:	bf00      	nop
 80012cc:	f7ff ffde 	bl	800128c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d8f7      	bhi.n	80012cc <HAL_Delay+0x28>
  {
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000000c 	.word	0x2000000c

080012ec <__NVIC_SetPriorityGrouping>:
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001308:	4013      	ands	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001314:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001318:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800131c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131e:	4a04      	ldr	r2, [pc, #16]	@ (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	60d3      	str	r3, [r2, #12]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_GetPriorityGrouping>:
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001338:	4b04      	ldr	r3, [pc, #16]	@ (800134c <__NVIC_GetPriorityGrouping+0x18>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	f003 0307 	and.w	r3, r3, #7
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_SetPriority>:
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0a      	blt.n	800137a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	490c      	ldr	r1, [pc, #48]	@ (800139c <__NVIC_SetPriority+0x4c>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	440b      	add	r3, r1
 8001374:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001378:	e00a      	b.n	8001390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4908      	ldr	r1, [pc, #32]	@ (80013a0 <__NVIC_SetPriority+0x50>)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	3b04      	subs	r3, #4
 8001388:	0112      	lsls	r2, r2, #4
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	440b      	add	r3, r1
 800138e:	761a      	strb	r2, [r3, #24]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000e100 	.word	0xe000e100
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <NVIC_EncodePriority>:
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	@ 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f1c3 0307 	rsb	r3, r3, #7
 80013be:	2b04      	cmp	r3, #4
 80013c0:	bf28      	it	cs
 80013c2:	2304      	movcs	r3, #4
 80013c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3304      	adds	r3, #4
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d902      	bls.n	80013d4 <NVIC_EncodePriority+0x30>
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3b03      	subs	r3, #3
 80013d2:	e000      	b.n	80013d6 <NVIC_EncodePriority+0x32>
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ec:	f04f 31ff 	mov.w	r1, #4294967295
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	43d9      	mvns	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	4313      	orrs	r3, r2
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3724      	adds	r7, #36	@ 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800141c:	d301      	bcc.n	8001422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141e:	2301      	movs	r3, #1
 8001420:	e00f      	b.n	8001442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001422:	4a0a      	ldr	r2, [pc, #40]	@ (800144c <SysTick_Config+0x40>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142a:	210f      	movs	r1, #15
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f7ff ff8e 	bl	8001350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001434:	4b05      	ldr	r3, [pc, #20]	@ (800144c <SysTick_Config+0x40>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143a:	4b04      	ldr	r3, [pc, #16]	@ (800144c <SysTick_Config+0x40>)
 800143c:	2207      	movs	r2, #7
 800143e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	e000e010 	.word	0xe000e010

08001450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff47 	bl	80012ec <__NVIC_SetPriorityGrouping>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001478:	f7ff ff5c 	bl	8001334 <__NVIC_GetPriorityGrouping>
 800147c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	6978      	ldr	r0, [r7, #20]
 8001484:	f7ff ff8e 	bl	80013a4 <NVIC_EncodePriority>
 8001488:	4602      	mov	r2, r0
 800148a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff5d 	bl	8001350 <__NVIC_SetPriority>
}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ffb0 	bl	800140c <SysTick_Config>
 80014ac:	4603      	mov	r3, r0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	@ 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
 80014d2:	e16b      	b.n	80017ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014d4:	2201      	movs	r2, #1
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	f040 815a 	bne.w	80017a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d005      	beq.n	800150a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001506:	2b02      	cmp	r3, #2
 8001508:	d130      	bne.n	800156c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	2203      	movs	r2, #3
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	68da      	ldr	r2, [r3, #12]
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001540:	2201      	movs	r2, #1
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	091b      	lsrs	r3, r3, #4
 8001556:	f003 0201 	and.w	r2, r3, #1
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b03      	cmp	r3, #3
 8001576:	d017      	beq.n	80015a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2203      	movs	r2, #3
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d123      	bne.n	80015fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	08da      	lsrs	r2, r3, #3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3208      	adds	r2, #8
 80015bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	220f      	movs	r2, #15
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	691a      	ldr	r2, [r3, #16]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	08da      	lsrs	r2, r3, #3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3208      	adds	r2, #8
 80015f6:	69b9      	ldr	r1, [r7, #24]
 80015f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	2203      	movs	r2, #3
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0203 	and.w	r2, r3, #3
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 80b4 	beq.w	80017a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b60      	ldr	r3, [pc, #384]	@ (80017c4 <HAL_GPIO_Init+0x30c>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001646:	4a5f      	ldr	r2, [pc, #380]	@ (80017c4 <HAL_GPIO_Init+0x30c>)
 8001648:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800164c:	6453      	str	r3, [r2, #68]	@ 0x44
 800164e:	4b5d      	ldr	r3, [pc, #372]	@ (80017c4 <HAL_GPIO_Init+0x30c>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001652:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800165a:	4a5b      	ldr	r2, [pc, #364]	@ (80017c8 <HAL_GPIO_Init+0x310>)
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	3302      	adds	r3, #2
 8001662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	220f      	movs	r2, #15
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4013      	ands	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a52      	ldr	r2, [pc, #328]	@ (80017cc <HAL_GPIO_Init+0x314>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d02b      	beq.n	80016de <HAL_GPIO_Init+0x226>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a51      	ldr	r2, [pc, #324]	@ (80017d0 <HAL_GPIO_Init+0x318>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d025      	beq.n	80016da <HAL_GPIO_Init+0x222>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a50      	ldr	r2, [pc, #320]	@ (80017d4 <HAL_GPIO_Init+0x31c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d01f      	beq.n	80016d6 <HAL_GPIO_Init+0x21e>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4f      	ldr	r2, [pc, #316]	@ (80017d8 <HAL_GPIO_Init+0x320>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d019      	beq.n	80016d2 <HAL_GPIO_Init+0x21a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4e      	ldr	r2, [pc, #312]	@ (80017dc <HAL_GPIO_Init+0x324>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d013      	beq.n	80016ce <HAL_GPIO_Init+0x216>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4d      	ldr	r2, [pc, #308]	@ (80017e0 <HAL_GPIO_Init+0x328>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d00d      	beq.n	80016ca <HAL_GPIO_Init+0x212>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4c      	ldr	r2, [pc, #304]	@ (80017e4 <HAL_GPIO_Init+0x32c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d007      	beq.n	80016c6 <HAL_GPIO_Init+0x20e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4b      	ldr	r2, [pc, #300]	@ (80017e8 <HAL_GPIO_Init+0x330>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d101      	bne.n	80016c2 <HAL_GPIO_Init+0x20a>
 80016be:	2307      	movs	r3, #7
 80016c0:	e00e      	b.n	80016e0 <HAL_GPIO_Init+0x228>
 80016c2:	2308      	movs	r3, #8
 80016c4:	e00c      	b.n	80016e0 <HAL_GPIO_Init+0x228>
 80016c6:	2306      	movs	r3, #6
 80016c8:	e00a      	b.n	80016e0 <HAL_GPIO_Init+0x228>
 80016ca:	2305      	movs	r3, #5
 80016cc:	e008      	b.n	80016e0 <HAL_GPIO_Init+0x228>
 80016ce:	2304      	movs	r3, #4
 80016d0:	e006      	b.n	80016e0 <HAL_GPIO_Init+0x228>
 80016d2:	2303      	movs	r3, #3
 80016d4:	e004      	b.n	80016e0 <HAL_GPIO_Init+0x228>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e002      	b.n	80016e0 <HAL_GPIO_Init+0x228>
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <HAL_GPIO_Init+0x228>
 80016de:	2300      	movs	r3, #0
 80016e0:	69fa      	ldr	r2, [r7, #28]
 80016e2:	f002 0203 	and.w	r2, r2, #3
 80016e6:	0092      	lsls	r2, r2, #2
 80016e8:	4093      	lsls	r3, r2
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016f0:	4935      	ldr	r1, [pc, #212]	@ (80017c8 <HAL_GPIO_Init+0x310>)
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	089b      	lsrs	r3, r3, #2
 80016f6:	3302      	adds	r3, #2
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016fe:	4b3b      	ldr	r3, [pc, #236]	@ (80017ec <HAL_GPIO_Init+0x334>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001722:	4a32      	ldr	r2, [pc, #200]	@ (80017ec <HAL_GPIO_Init+0x334>)
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001728:	4b30      	ldr	r3, [pc, #192]	@ (80017ec <HAL_GPIO_Init+0x334>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800174c:	4a27      	ldr	r2, [pc, #156]	@ (80017ec <HAL_GPIO_Init+0x334>)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001752:	4b26      	ldr	r3, [pc, #152]	@ (80017ec <HAL_GPIO_Init+0x334>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001776:	4a1d      	ldr	r2, [pc, #116]	@ (80017ec <HAL_GPIO_Init+0x334>)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800177c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ec <HAL_GPIO_Init+0x334>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017a0:	4a12      	ldr	r2, [pc, #72]	@ (80017ec <HAL_GPIO_Init+0x334>)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3301      	adds	r3, #1
 80017aa:	61fb      	str	r3, [r7, #28]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	2b0f      	cmp	r3, #15
 80017b0:	f67f ae90 	bls.w	80014d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3724      	adds	r7, #36	@ 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40013800 	.word	0x40013800
 80017cc:	40020000 	.word	0x40020000
 80017d0:	40020400 	.word	0x40020400
 80017d4:	40020800 	.word	0x40020800
 80017d8:	40020c00 	.word	0x40020c00
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40021400 	.word	0x40021400
 80017e4:	40021800 	.word	0x40021800
 80017e8:	40021c00 	.word	0x40021c00
 80017ec:	40013c00 	.word	0x40013c00

080017f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691a      	ldr	r2, [r3, #16]
 8001800:	887b      	ldrh	r3, [r7, #2]
 8001802:	4013      	ands	r3, r2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
 800180c:	e001      	b.n	8001812 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001812:	7bfb      	ldrb	r3, [r7, #15]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	807b      	strh	r3, [r7, #2]
 800182c:	4613      	mov	r3, r2
 800182e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001830:	787b      	ldrb	r3, [r7, #1]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001836:	887a      	ldrh	r2, [r7, #2]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800183c:	e003      	b.n	8001846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800183e:	887b      	ldrh	r3, [r7, #2]
 8001840:	041a      	lsls	r2, r3, #16
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	619a      	str	r2, [r3, #24]
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e267      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d075      	beq.n	800195e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001872:	4b88      	ldr	r3, [pc, #544]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b04      	cmp	r3, #4
 800187c:	d00c      	beq.n	8001898 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800187e:	4b85      	ldr	r3, [pc, #532]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001886:	2b08      	cmp	r3, #8
 8001888:	d112      	bne.n	80018b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800188a:	4b82      	ldr	r3, [pc, #520]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001892:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001896:	d10b      	bne.n	80018b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	4b7e      	ldr	r3, [pc, #504]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d05b      	beq.n	800195c <HAL_RCC_OscConfig+0x108>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d157      	bne.n	800195c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e242      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018b8:	d106      	bne.n	80018c8 <HAL_RCC_OscConfig+0x74>
 80018ba:	4b76      	ldr	r3, [pc, #472]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a75      	ldr	r2, [pc, #468]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e01d      	b.n	8001904 <HAL_RCC_OscConfig+0xb0>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0x98>
 80018d2:	4b70      	ldr	r3, [pc, #448]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a6f      	ldr	r2, [pc, #444]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80018d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b6d      	ldr	r3, [pc, #436]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a6c      	ldr	r2, [pc, #432]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80018e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e00b      	b.n	8001904 <HAL_RCC_OscConfig+0xb0>
 80018ec:	4b69      	ldr	r3, [pc, #420]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a68      	ldr	r2, [pc, #416]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80018f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	4b66      	ldr	r3, [pc, #408]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a65      	ldr	r2, [pc, #404]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80018fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d013      	beq.n	8001934 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff fcbe 	bl	800128c <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001914:	f7ff fcba 	bl	800128c <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	@ 0x64
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e207      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	4b5b      	ldr	r3, [pc, #364]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0xc0>
 8001932:	e014      	b.n	800195e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff fcaa 	bl	800128c <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800193c:	f7ff fca6 	bl	800128c <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	@ 0x64
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e1f3      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194e:	4b51      	ldr	r3, [pc, #324]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0xe8>
 800195a:	e000      	b.n	800195e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d063      	beq.n	8001a32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800196a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00b      	beq.n	800198e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001976:	4b47      	ldr	r3, [pc, #284]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800197e:	2b08      	cmp	r3, #8
 8001980:	d11c      	bne.n	80019bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001982:	4b44      	ldr	r3, [pc, #272]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d116      	bne.n	80019bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198e:	4b41      	ldr	r3, [pc, #260]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d005      	beq.n	80019a6 <HAL_RCC_OscConfig+0x152>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d001      	beq.n	80019a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e1c7      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4937      	ldr	r1, [pc, #220]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ba:	e03a      	b.n	8001a32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d020      	beq.n	8001a06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c4:	4b34      	ldr	r3, [pc, #208]	@ (8001a98 <HAL_RCC_OscConfig+0x244>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ca:	f7ff fc5f 	bl	800128c <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d2:	f7ff fc5b 	bl	800128c <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e1a8      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f0:	4b28      	ldr	r3, [pc, #160]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	4925      	ldr	r1, [pc, #148]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]
 8001a04:	e015      	b.n	8001a32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a06:	4b24      	ldr	r3, [pc, #144]	@ (8001a98 <HAL_RCC_OscConfig+0x244>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fc3e 	bl	800128c <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a14:	f7ff fc3a 	bl	800128c <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e187      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a26:	4b1b      	ldr	r3, [pc, #108]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d036      	beq.n	8001aac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d016      	beq.n	8001a74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a46:	4b15      	ldr	r3, [pc, #84]	@ (8001a9c <HAL_RCC_OscConfig+0x248>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fc1e 	bl	800128c <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a54:	f7ff fc1a 	bl	800128c <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e167      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a66:	4b0b      	ldr	r3, [pc, #44]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 8001a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0x200>
 8001a72:	e01b      	b.n	8001aac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a74:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <HAL_RCC_OscConfig+0x248>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7a:	f7ff fc07 	bl	800128c <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a80:	e00e      	b.n	8001aa0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a82:	f7ff fc03 	bl	800128c <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d907      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e150      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
 8001a94:	40023800 	.word	0x40023800
 8001a98:	42470000 	.word	0x42470000
 8001a9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa0:	4b88      	ldr	r3, [pc, #544]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001aa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1ea      	bne.n	8001a82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 8097 	beq.w	8001be8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001abe:	4b81      	ldr	r3, [pc, #516]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10f      	bne.n	8001aea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	4b7d      	ldr	r3, [pc, #500]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	4a7c      	ldr	r2, [pc, #496]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ada:	4b7a      	ldr	r3, [pc, #488]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aea:	4b77      	ldr	r3, [pc, #476]	@ (8001cc8 <HAL_RCC_OscConfig+0x474>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d118      	bne.n	8001b28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001af6:	4b74      	ldr	r3, [pc, #464]	@ (8001cc8 <HAL_RCC_OscConfig+0x474>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a73      	ldr	r2, [pc, #460]	@ (8001cc8 <HAL_RCC_OscConfig+0x474>)
 8001afc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b02:	f7ff fbc3 	bl	800128c <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b0a:	f7ff fbbf 	bl	800128c <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e10c      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1c:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc8 <HAL_RCC_OscConfig+0x474>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d106      	bne.n	8001b3e <HAL_RCC_OscConfig+0x2ea>
 8001b30:	4b64      	ldr	r3, [pc, #400]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b34:	4a63      	ldr	r2, [pc, #396]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b3c:	e01c      	b.n	8001b78 <HAL_RCC_OscConfig+0x324>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b05      	cmp	r3, #5
 8001b44:	d10c      	bne.n	8001b60 <HAL_RCC_OscConfig+0x30c>
 8001b46:	4b5f      	ldr	r3, [pc, #380]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b4a:	4a5e      	ldr	r2, [pc, #376]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001b4c:	f043 0304 	orr.w	r3, r3, #4
 8001b50:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b52:	4b5c      	ldr	r3, [pc, #368]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b56:	4a5b      	ldr	r2, [pc, #364]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b5e:	e00b      	b.n	8001b78 <HAL_RCC_OscConfig+0x324>
 8001b60:	4b58      	ldr	r3, [pc, #352]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b64:	4a57      	ldr	r2, [pc, #348]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001b66:	f023 0301 	bic.w	r3, r3, #1
 8001b6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b6c:	4b55      	ldr	r3, [pc, #340]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b70:	4a54      	ldr	r2, [pc, #336]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001b72:	f023 0304 	bic.w	r3, r3, #4
 8001b76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d015      	beq.n	8001bac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b80:	f7ff fb84 	bl	800128c <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b86:	e00a      	b.n	8001b9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b88:	f7ff fb80 	bl	800128c <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e0cb      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9e:	4b49      	ldr	r3, [pc, #292]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0ee      	beq.n	8001b88 <HAL_RCC_OscConfig+0x334>
 8001baa:	e014      	b.n	8001bd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bac:	f7ff fb6e 	bl	800128c <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb2:	e00a      	b.n	8001bca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb4:	f7ff fb6a 	bl	800128c <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e0b5      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bca:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1ee      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bd6:	7dfb      	ldrb	r3, [r7, #23]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d105      	bne.n	8001be8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bdc:	4b39      	ldr	r3, [pc, #228]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be0:	4a38      	ldr	r2, [pc, #224]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001be2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001be6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80a1 	beq.w	8001d34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bf2:	4b34      	ldr	r3, [pc, #208]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d05c      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d141      	bne.n	8001c8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c06:	4b31      	ldr	r3, [pc, #196]	@ (8001ccc <HAL_RCC_OscConfig+0x478>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fb3e 	bl	800128c <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c14:	f7ff fb3a 	bl	800128c <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e087      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c26:	4b27      	ldr	r3, [pc, #156]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69da      	ldr	r2, [r3, #28]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c40:	019b      	lsls	r3, r3, #6
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c48:	085b      	lsrs	r3, r3, #1
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	041b      	lsls	r3, r3, #16
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c54:	061b      	lsls	r3, r3, #24
 8001c56:	491b      	ldr	r1, [pc, #108]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <HAL_RCC_OscConfig+0x478>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7ff fb13 	bl	800128c <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7ff fb0f 	bl	800128c <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e05c      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7c:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x416>
 8001c88:	e054      	b.n	8001d34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8a:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <HAL_RCC_OscConfig+0x478>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7ff fafc 	bl	800128c <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c98:	f7ff faf8 	bl	800128c <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e045      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001caa:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x444>
 8001cb6:	e03d      	b.n	8001d34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d107      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e038      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40007000 	.word	0x40007000
 8001ccc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d40 <HAL_RCC_OscConfig+0x4ec>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d028      	beq.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d121      	bne.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d11a      	bne.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d00:	4013      	ands	r3, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d111      	bne.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d16:	085b      	lsrs	r3, r3, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d107      	bne.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800

08001d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0cc      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d58:	4b68      	ldr	r3, [pc, #416]	@ (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d90c      	bls.n	8001d80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b65      	ldr	r3, [pc, #404]	@ (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6e:	4b63      	ldr	r3, [pc, #396]	@ (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0b8      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d020      	beq.n	8001dce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d98:	4b59      	ldr	r3, [pc, #356]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	4a58      	ldr	r2, [pc, #352]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001da2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001db0:	4b53      	ldr	r3, [pc, #332]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	4a52      	ldr	r2, [pc, #328]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001dba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dbc:	4b50      	ldr	r3, [pc, #320]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	494d      	ldr	r1, [pc, #308]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d044      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d107      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de2:	4b47      	ldr	r3, [pc, #284]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d119      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e07f      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d003      	beq.n	8001e02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d107      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e02:	4b3f      	ldr	r3, [pc, #252]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d109      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e06f      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e12:	4b3b      	ldr	r3, [pc, #236]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e067      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e22:	4b37      	ldr	r3, [pc, #220]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f023 0203 	bic.w	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4934      	ldr	r1, [pc, #208]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e34:	f7ff fa2a 	bl	800128c <HAL_GetTick>
 8001e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3a:	e00a      	b.n	8001e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3c:	f7ff fa26 	bl	800128c <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e04f      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e52:	4b2b      	ldr	r3, [pc, #172]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 020c 	and.w	r2, r3, #12
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d1eb      	bne.n	8001e3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e64:	4b25      	ldr	r3, [pc, #148]	@ (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d20c      	bcs.n	8001e8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e72:	4b22      	ldr	r3, [pc, #136]	@ (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	4b20      	ldr	r3, [pc, #128]	@ (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e032      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d008      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e98:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4916      	ldr	r1, [pc, #88]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d009      	beq.n	8001eca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eb6:	4b12      	ldr	r3, [pc, #72]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	490e      	ldr	r1, [pc, #56]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eca:	f000 f821 	bl	8001f10 <HAL_RCC_GetSysClockFreq>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	490a      	ldr	r1, [pc, #40]	@ (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001edc:	5ccb      	ldrb	r3, [r1, r3]
 8001ede:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee2:	4a09      	ldr	r2, [pc, #36]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ee6:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f98a 	bl	8001204 <HAL_InitTick>

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023c00 	.word	0x40023c00
 8001f00:	40023800 	.word	0x40023800
 8001f04:	08002a94 	.word	0x08002a94
 8001f08:	20000004 	.word	0x20000004
 8001f0c:	20000008 	.word	0x20000008

08001f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f14:	b094      	sub	sp, #80	@ 0x50
 8001f16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f20:	2300      	movs	r3, #0
 8001f22:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f28:	4b79      	ldr	r3, [pc, #484]	@ (8002110 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 030c 	and.w	r3, r3, #12
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d00d      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0x40>
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	f200 80e1 	bhi.w	80020fc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d002      	beq.n	8001f44 <HAL_RCC_GetSysClockFreq+0x34>
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d003      	beq.n	8001f4a <HAL_RCC_GetSysClockFreq+0x3a>
 8001f42:	e0db      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f44:	4b73      	ldr	r3, [pc, #460]	@ (8002114 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f46:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001f48:	e0db      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f4a:	4b73      	ldr	r3, [pc, #460]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f4e:	e0d8      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f50:	4b6f      	ldr	r3, [pc, #444]	@ (8002110 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f58:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f5a:	4b6d      	ldr	r3, [pc, #436]	@ (8002110 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d063      	beq.n	800202e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f66:	4b6a      	ldr	r3, [pc, #424]	@ (8002110 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	099b      	lsrs	r3, r3, #6
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f78:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f82:	4622      	mov	r2, r4
 8001f84:	462b      	mov	r3, r5
 8001f86:	f04f 0000 	mov.w	r0, #0
 8001f8a:	f04f 0100 	mov.w	r1, #0
 8001f8e:	0159      	lsls	r1, r3, #5
 8001f90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f94:	0150      	lsls	r0, r2, #5
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4621      	mov	r1, r4
 8001f9c:	1a51      	subs	r1, r2, r1
 8001f9e:	6139      	str	r1, [r7, #16]
 8001fa0:	4629      	mov	r1, r5
 8001fa2:	eb63 0301 	sbc.w	r3, r3, r1
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	f04f 0300 	mov.w	r3, #0
 8001fb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fb4:	4659      	mov	r1, fp
 8001fb6:	018b      	lsls	r3, r1, #6
 8001fb8:	4651      	mov	r1, sl
 8001fba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fbe:	4651      	mov	r1, sl
 8001fc0:	018a      	lsls	r2, r1, #6
 8001fc2:	4651      	mov	r1, sl
 8001fc4:	ebb2 0801 	subs.w	r8, r2, r1
 8001fc8:	4659      	mov	r1, fp
 8001fca:	eb63 0901 	sbc.w	r9, r3, r1
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fe2:	4690      	mov	r8, r2
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	4623      	mov	r3, r4
 8001fe8:	eb18 0303 	adds.w	r3, r8, r3
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	462b      	mov	r3, r5
 8001ff0:	eb49 0303 	adc.w	r3, r9, r3
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002002:	4629      	mov	r1, r5
 8002004:	024b      	lsls	r3, r1, #9
 8002006:	4621      	mov	r1, r4
 8002008:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800200c:	4621      	mov	r1, r4
 800200e:	024a      	lsls	r2, r1, #9
 8002010:	4610      	mov	r0, r2
 8002012:	4619      	mov	r1, r3
 8002014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002016:	2200      	movs	r2, #0
 8002018:	62bb      	str	r3, [r7, #40]	@ 0x28
 800201a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800201c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002020:	f7fe f926 	bl	8000270 <__aeabi_uldivmod>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4613      	mov	r3, r2
 800202a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800202c:	e058      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800202e:	4b38      	ldr	r3, [pc, #224]	@ (8002110 <HAL_RCC_GetSysClockFreq+0x200>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	099b      	lsrs	r3, r3, #6
 8002034:	2200      	movs	r2, #0
 8002036:	4618      	mov	r0, r3
 8002038:	4611      	mov	r1, r2
 800203a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800203e:	623b      	str	r3, [r7, #32]
 8002040:	2300      	movs	r3, #0
 8002042:	627b      	str	r3, [r7, #36]	@ 0x24
 8002044:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002048:	4642      	mov	r2, r8
 800204a:	464b      	mov	r3, r9
 800204c:	f04f 0000 	mov.w	r0, #0
 8002050:	f04f 0100 	mov.w	r1, #0
 8002054:	0159      	lsls	r1, r3, #5
 8002056:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800205a:	0150      	lsls	r0, r2, #5
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4641      	mov	r1, r8
 8002062:	ebb2 0a01 	subs.w	sl, r2, r1
 8002066:	4649      	mov	r1, r9
 8002068:	eb63 0b01 	sbc.w	fp, r3, r1
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002078:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800207c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002080:	ebb2 040a 	subs.w	r4, r2, sl
 8002084:	eb63 050b 	sbc.w	r5, r3, fp
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	f04f 0300 	mov.w	r3, #0
 8002090:	00eb      	lsls	r3, r5, #3
 8002092:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002096:	00e2      	lsls	r2, r4, #3
 8002098:	4614      	mov	r4, r2
 800209a:	461d      	mov	r5, r3
 800209c:	4643      	mov	r3, r8
 800209e:	18e3      	adds	r3, r4, r3
 80020a0:	603b      	str	r3, [r7, #0]
 80020a2:	464b      	mov	r3, r9
 80020a4:	eb45 0303 	adc.w	r3, r5, r3
 80020a8:	607b      	str	r3, [r7, #4]
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	f04f 0300 	mov.w	r3, #0
 80020b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020b6:	4629      	mov	r1, r5
 80020b8:	028b      	lsls	r3, r1, #10
 80020ba:	4621      	mov	r1, r4
 80020bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020c0:	4621      	mov	r1, r4
 80020c2:	028a      	lsls	r2, r1, #10
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020ca:	2200      	movs	r2, #0
 80020cc:	61bb      	str	r3, [r7, #24]
 80020ce:	61fa      	str	r2, [r7, #28]
 80020d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020d4:	f7fe f8cc 	bl	8000270 <__aeabi_uldivmod>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4613      	mov	r3, r2
 80020de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <HAL_RCC_GetSysClockFreq+0x200>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	0c1b      	lsrs	r3, r3, #16
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	3301      	adds	r3, #1
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80020f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020fa:	e002      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020fc:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <HAL_RCC_GetSysClockFreq+0x204>)
 80020fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002100:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002102:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002104:	4618      	mov	r0, r3
 8002106:	3750      	adds	r7, #80	@ 0x50
 8002108:	46bd      	mov	sp, r7
 800210a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800
 8002114:	00f42400 	.word	0x00f42400
 8002118:	007a1200 	.word	0x007a1200

0800211c <siprintf>:
 800211c:	b40e      	push	{r1, r2, r3}
 800211e:	b500      	push	{lr}
 8002120:	b09c      	sub	sp, #112	@ 0x70
 8002122:	ab1d      	add	r3, sp, #116	@ 0x74
 8002124:	9002      	str	r0, [sp, #8]
 8002126:	9006      	str	r0, [sp, #24]
 8002128:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800212c:	4809      	ldr	r0, [pc, #36]	@ (8002154 <siprintf+0x38>)
 800212e:	9107      	str	r1, [sp, #28]
 8002130:	9104      	str	r1, [sp, #16]
 8002132:	4909      	ldr	r1, [pc, #36]	@ (8002158 <siprintf+0x3c>)
 8002134:	f853 2b04 	ldr.w	r2, [r3], #4
 8002138:	9105      	str	r1, [sp, #20]
 800213a:	6800      	ldr	r0, [r0, #0]
 800213c:	9301      	str	r3, [sp, #4]
 800213e:	a902      	add	r1, sp, #8
 8002140:	f000 f994 	bl	800246c <_svfiprintf_r>
 8002144:	9b02      	ldr	r3, [sp, #8]
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
 800214a:	b01c      	add	sp, #112	@ 0x70
 800214c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002150:	b003      	add	sp, #12
 8002152:	4770      	bx	lr
 8002154:	20000010 	.word	0x20000010
 8002158:	ffff0208 	.word	0xffff0208

0800215c <memset>:
 800215c:	4402      	add	r2, r0
 800215e:	4603      	mov	r3, r0
 8002160:	4293      	cmp	r3, r2
 8002162:	d100      	bne.n	8002166 <memset+0xa>
 8002164:	4770      	bx	lr
 8002166:	f803 1b01 	strb.w	r1, [r3], #1
 800216a:	e7f9      	b.n	8002160 <memset+0x4>

0800216c <__errno>:
 800216c:	4b01      	ldr	r3, [pc, #4]	@ (8002174 <__errno+0x8>)
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000010 	.word	0x20000010

08002178 <__libc_init_array>:
 8002178:	b570      	push	{r4, r5, r6, lr}
 800217a:	4d0d      	ldr	r5, [pc, #52]	@ (80021b0 <__libc_init_array+0x38>)
 800217c:	4c0d      	ldr	r4, [pc, #52]	@ (80021b4 <__libc_init_array+0x3c>)
 800217e:	1b64      	subs	r4, r4, r5
 8002180:	10a4      	asrs	r4, r4, #2
 8002182:	2600      	movs	r6, #0
 8002184:	42a6      	cmp	r6, r4
 8002186:	d109      	bne.n	800219c <__libc_init_array+0x24>
 8002188:	4d0b      	ldr	r5, [pc, #44]	@ (80021b8 <__libc_init_array+0x40>)
 800218a:	4c0c      	ldr	r4, [pc, #48]	@ (80021bc <__libc_init_array+0x44>)
 800218c:	f000 fc66 	bl	8002a5c <_init>
 8002190:	1b64      	subs	r4, r4, r5
 8002192:	10a4      	asrs	r4, r4, #2
 8002194:	2600      	movs	r6, #0
 8002196:	42a6      	cmp	r6, r4
 8002198:	d105      	bne.n	80021a6 <__libc_init_array+0x2e>
 800219a:	bd70      	pop	{r4, r5, r6, pc}
 800219c:	f855 3b04 	ldr.w	r3, [r5], #4
 80021a0:	4798      	blx	r3
 80021a2:	3601      	adds	r6, #1
 80021a4:	e7ee      	b.n	8002184 <__libc_init_array+0xc>
 80021a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80021aa:	4798      	blx	r3
 80021ac:	3601      	adds	r6, #1
 80021ae:	e7f2      	b.n	8002196 <__libc_init_array+0x1e>
 80021b0:	08002ae0 	.word	0x08002ae0
 80021b4:	08002ae0 	.word	0x08002ae0
 80021b8:	08002ae0 	.word	0x08002ae0
 80021bc:	08002ae4 	.word	0x08002ae4

080021c0 <__retarget_lock_acquire_recursive>:
 80021c0:	4770      	bx	lr

080021c2 <__retarget_lock_release_recursive>:
 80021c2:	4770      	bx	lr

080021c4 <_free_r>:
 80021c4:	b538      	push	{r3, r4, r5, lr}
 80021c6:	4605      	mov	r5, r0
 80021c8:	2900      	cmp	r1, #0
 80021ca:	d041      	beq.n	8002250 <_free_r+0x8c>
 80021cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021d0:	1f0c      	subs	r4, r1, #4
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	bfb8      	it	lt
 80021d6:	18e4      	addlt	r4, r4, r3
 80021d8:	f000 f8e0 	bl	800239c <__malloc_lock>
 80021dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002254 <_free_r+0x90>)
 80021de:	6813      	ldr	r3, [r2, #0]
 80021e0:	b933      	cbnz	r3, 80021f0 <_free_r+0x2c>
 80021e2:	6063      	str	r3, [r4, #4]
 80021e4:	6014      	str	r4, [r2, #0]
 80021e6:	4628      	mov	r0, r5
 80021e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021ec:	f000 b8dc 	b.w	80023a8 <__malloc_unlock>
 80021f0:	42a3      	cmp	r3, r4
 80021f2:	d908      	bls.n	8002206 <_free_r+0x42>
 80021f4:	6820      	ldr	r0, [r4, #0]
 80021f6:	1821      	adds	r1, r4, r0
 80021f8:	428b      	cmp	r3, r1
 80021fa:	bf01      	itttt	eq
 80021fc:	6819      	ldreq	r1, [r3, #0]
 80021fe:	685b      	ldreq	r3, [r3, #4]
 8002200:	1809      	addeq	r1, r1, r0
 8002202:	6021      	streq	r1, [r4, #0]
 8002204:	e7ed      	b.n	80021e2 <_free_r+0x1e>
 8002206:	461a      	mov	r2, r3
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	b10b      	cbz	r3, 8002210 <_free_r+0x4c>
 800220c:	42a3      	cmp	r3, r4
 800220e:	d9fa      	bls.n	8002206 <_free_r+0x42>
 8002210:	6811      	ldr	r1, [r2, #0]
 8002212:	1850      	adds	r0, r2, r1
 8002214:	42a0      	cmp	r0, r4
 8002216:	d10b      	bne.n	8002230 <_free_r+0x6c>
 8002218:	6820      	ldr	r0, [r4, #0]
 800221a:	4401      	add	r1, r0
 800221c:	1850      	adds	r0, r2, r1
 800221e:	4283      	cmp	r3, r0
 8002220:	6011      	str	r1, [r2, #0]
 8002222:	d1e0      	bne.n	80021e6 <_free_r+0x22>
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	6053      	str	r3, [r2, #4]
 800222a:	4408      	add	r0, r1
 800222c:	6010      	str	r0, [r2, #0]
 800222e:	e7da      	b.n	80021e6 <_free_r+0x22>
 8002230:	d902      	bls.n	8002238 <_free_r+0x74>
 8002232:	230c      	movs	r3, #12
 8002234:	602b      	str	r3, [r5, #0]
 8002236:	e7d6      	b.n	80021e6 <_free_r+0x22>
 8002238:	6820      	ldr	r0, [r4, #0]
 800223a:	1821      	adds	r1, r4, r0
 800223c:	428b      	cmp	r3, r1
 800223e:	bf04      	itt	eq
 8002240:	6819      	ldreq	r1, [r3, #0]
 8002242:	685b      	ldreq	r3, [r3, #4]
 8002244:	6063      	str	r3, [r4, #4]
 8002246:	bf04      	itt	eq
 8002248:	1809      	addeq	r1, r1, r0
 800224a:	6021      	streq	r1, [r4, #0]
 800224c:	6054      	str	r4, [r2, #4]
 800224e:	e7ca      	b.n	80021e6 <_free_r+0x22>
 8002250:	bd38      	pop	{r3, r4, r5, pc}
 8002252:	bf00      	nop
 8002254:	200001cc 	.word	0x200001cc

08002258 <sbrk_aligned>:
 8002258:	b570      	push	{r4, r5, r6, lr}
 800225a:	4e0f      	ldr	r6, [pc, #60]	@ (8002298 <sbrk_aligned+0x40>)
 800225c:	460c      	mov	r4, r1
 800225e:	6831      	ldr	r1, [r6, #0]
 8002260:	4605      	mov	r5, r0
 8002262:	b911      	cbnz	r1, 800226a <sbrk_aligned+0x12>
 8002264:	f000 fba6 	bl	80029b4 <_sbrk_r>
 8002268:	6030      	str	r0, [r6, #0]
 800226a:	4621      	mov	r1, r4
 800226c:	4628      	mov	r0, r5
 800226e:	f000 fba1 	bl	80029b4 <_sbrk_r>
 8002272:	1c43      	adds	r3, r0, #1
 8002274:	d103      	bne.n	800227e <sbrk_aligned+0x26>
 8002276:	f04f 34ff 	mov.w	r4, #4294967295
 800227a:	4620      	mov	r0, r4
 800227c:	bd70      	pop	{r4, r5, r6, pc}
 800227e:	1cc4      	adds	r4, r0, #3
 8002280:	f024 0403 	bic.w	r4, r4, #3
 8002284:	42a0      	cmp	r0, r4
 8002286:	d0f8      	beq.n	800227a <sbrk_aligned+0x22>
 8002288:	1a21      	subs	r1, r4, r0
 800228a:	4628      	mov	r0, r5
 800228c:	f000 fb92 	bl	80029b4 <_sbrk_r>
 8002290:	3001      	adds	r0, #1
 8002292:	d1f2      	bne.n	800227a <sbrk_aligned+0x22>
 8002294:	e7ef      	b.n	8002276 <sbrk_aligned+0x1e>
 8002296:	bf00      	nop
 8002298:	200001c8 	.word	0x200001c8

0800229c <_malloc_r>:
 800229c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022a0:	1ccd      	adds	r5, r1, #3
 80022a2:	f025 0503 	bic.w	r5, r5, #3
 80022a6:	3508      	adds	r5, #8
 80022a8:	2d0c      	cmp	r5, #12
 80022aa:	bf38      	it	cc
 80022ac:	250c      	movcc	r5, #12
 80022ae:	2d00      	cmp	r5, #0
 80022b0:	4606      	mov	r6, r0
 80022b2:	db01      	blt.n	80022b8 <_malloc_r+0x1c>
 80022b4:	42a9      	cmp	r1, r5
 80022b6:	d904      	bls.n	80022c2 <_malloc_r+0x26>
 80022b8:	230c      	movs	r3, #12
 80022ba:	6033      	str	r3, [r6, #0]
 80022bc:	2000      	movs	r0, #0
 80022be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002398 <_malloc_r+0xfc>
 80022c6:	f000 f869 	bl	800239c <__malloc_lock>
 80022ca:	f8d8 3000 	ldr.w	r3, [r8]
 80022ce:	461c      	mov	r4, r3
 80022d0:	bb44      	cbnz	r4, 8002324 <_malloc_r+0x88>
 80022d2:	4629      	mov	r1, r5
 80022d4:	4630      	mov	r0, r6
 80022d6:	f7ff ffbf 	bl	8002258 <sbrk_aligned>
 80022da:	1c43      	adds	r3, r0, #1
 80022dc:	4604      	mov	r4, r0
 80022de:	d158      	bne.n	8002392 <_malloc_r+0xf6>
 80022e0:	f8d8 4000 	ldr.w	r4, [r8]
 80022e4:	4627      	mov	r7, r4
 80022e6:	2f00      	cmp	r7, #0
 80022e8:	d143      	bne.n	8002372 <_malloc_r+0xd6>
 80022ea:	2c00      	cmp	r4, #0
 80022ec:	d04b      	beq.n	8002386 <_malloc_r+0xea>
 80022ee:	6823      	ldr	r3, [r4, #0]
 80022f0:	4639      	mov	r1, r7
 80022f2:	4630      	mov	r0, r6
 80022f4:	eb04 0903 	add.w	r9, r4, r3
 80022f8:	f000 fb5c 	bl	80029b4 <_sbrk_r>
 80022fc:	4581      	cmp	r9, r0
 80022fe:	d142      	bne.n	8002386 <_malloc_r+0xea>
 8002300:	6821      	ldr	r1, [r4, #0]
 8002302:	1a6d      	subs	r5, r5, r1
 8002304:	4629      	mov	r1, r5
 8002306:	4630      	mov	r0, r6
 8002308:	f7ff ffa6 	bl	8002258 <sbrk_aligned>
 800230c:	3001      	adds	r0, #1
 800230e:	d03a      	beq.n	8002386 <_malloc_r+0xea>
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	442b      	add	r3, r5
 8002314:	6023      	str	r3, [r4, #0]
 8002316:	f8d8 3000 	ldr.w	r3, [r8]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	bb62      	cbnz	r2, 8002378 <_malloc_r+0xdc>
 800231e:	f8c8 7000 	str.w	r7, [r8]
 8002322:	e00f      	b.n	8002344 <_malloc_r+0xa8>
 8002324:	6822      	ldr	r2, [r4, #0]
 8002326:	1b52      	subs	r2, r2, r5
 8002328:	d420      	bmi.n	800236c <_malloc_r+0xd0>
 800232a:	2a0b      	cmp	r2, #11
 800232c:	d917      	bls.n	800235e <_malloc_r+0xc2>
 800232e:	1961      	adds	r1, r4, r5
 8002330:	42a3      	cmp	r3, r4
 8002332:	6025      	str	r5, [r4, #0]
 8002334:	bf18      	it	ne
 8002336:	6059      	strne	r1, [r3, #4]
 8002338:	6863      	ldr	r3, [r4, #4]
 800233a:	bf08      	it	eq
 800233c:	f8c8 1000 	streq.w	r1, [r8]
 8002340:	5162      	str	r2, [r4, r5]
 8002342:	604b      	str	r3, [r1, #4]
 8002344:	4630      	mov	r0, r6
 8002346:	f000 f82f 	bl	80023a8 <__malloc_unlock>
 800234a:	f104 000b 	add.w	r0, r4, #11
 800234e:	1d23      	adds	r3, r4, #4
 8002350:	f020 0007 	bic.w	r0, r0, #7
 8002354:	1ac2      	subs	r2, r0, r3
 8002356:	bf1c      	itt	ne
 8002358:	1a1b      	subne	r3, r3, r0
 800235a:	50a3      	strne	r3, [r4, r2]
 800235c:	e7af      	b.n	80022be <_malloc_r+0x22>
 800235e:	6862      	ldr	r2, [r4, #4]
 8002360:	42a3      	cmp	r3, r4
 8002362:	bf0c      	ite	eq
 8002364:	f8c8 2000 	streq.w	r2, [r8]
 8002368:	605a      	strne	r2, [r3, #4]
 800236a:	e7eb      	b.n	8002344 <_malloc_r+0xa8>
 800236c:	4623      	mov	r3, r4
 800236e:	6864      	ldr	r4, [r4, #4]
 8002370:	e7ae      	b.n	80022d0 <_malloc_r+0x34>
 8002372:	463c      	mov	r4, r7
 8002374:	687f      	ldr	r7, [r7, #4]
 8002376:	e7b6      	b.n	80022e6 <_malloc_r+0x4a>
 8002378:	461a      	mov	r2, r3
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	42a3      	cmp	r3, r4
 800237e:	d1fb      	bne.n	8002378 <_malloc_r+0xdc>
 8002380:	2300      	movs	r3, #0
 8002382:	6053      	str	r3, [r2, #4]
 8002384:	e7de      	b.n	8002344 <_malloc_r+0xa8>
 8002386:	230c      	movs	r3, #12
 8002388:	6033      	str	r3, [r6, #0]
 800238a:	4630      	mov	r0, r6
 800238c:	f000 f80c 	bl	80023a8 <__malloc_unlock>
 8002390:	e794      	b.n	80022bc <_malloc_r+0x20>
 8002392:	6005      	str	r5, [r0, #0]
 8002394:	e7d6      	b.n	8002344 <_malloc_r+0xa8>
 8002396:	bf00      	nop
 8002398:	200001cc 	.word	0x200001cc

0800239c <__malloc_lock>:
 800239c:	4801      	ldr	r0, [pc, #4]	@ (80023a4 <__malloc_lock+0x8>)
 800239e:	f7ff bf0f 	b.w	80021c0 <__retarget_lock_acquire_recursive>
 80023a2:	bf00      	nop
 80023a4:	200001c4 	.word	0x200001c4

080023a8 <__malloc_unlock>:
 80023a8:	4801      	ldr	r0, [pc, #4]	@ (80023b0 <__malloc_unlock+0x8>)
 80023aa:	f7ff bf0a 	b.w	80021c2 <__retarget_lock_release_recursive>
 80023ae:	bf00      	nop
 80023b0:	200001c4 	.word	0x200001c4

080023b4 <__ssputs_r>:
 80023b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023b8:	688e      	ldr	r6, [r1, #8]
 80023ba:	461f      	mov	r7, r3
 80023bc:	42be      	cmp	r6, r7
 80023be:	680b      	ldr	r3, [r1, #0]
 80023c0:	4682      	mov	sl, r0
 80023c2:	460c      	mov	r4, r1
 80023c4:	4690      	mov	r8, r2
 80023c6:	d82d      	bhi.n	8002424 <__ssputs_r+0x70>
 80023c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80023cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80023d0:	d026      	beq.n	8002420 <__ssputs_r+0x6c>
 80023d2:	6965      	ldr	r5, [r4, #20]
 80023d4:	6909      	ldr	r1, [r1, #16]
 80023d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80023da:	eba3 0901 	sub.w	r9, r3, r1
 80023de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80023e2:	1c7b      	adds	r3, r7, #1
 80023e4:	444b      	add	r3, r9
 80023e6:	106d      	asrs	r5, r5, #1
 80023e8:	429d      	cmp	r5, r3
 80023ea:	bf38      	it	cc
 80023ec:	461d      	movcc	r5, r3
 80023ee:	0553      	lsls	r3, r2, #21
 80023f0:	d527      	bpl.n	8002442 <__ssputs_r+0x8e>
 80023f2:	4629      	mov	r1, r5
 80023f4:	f7ff ff52 	bl	800229c <_malloc_r>
 80023f8:	4606      	mov	r6, r0
 80023fa:	b360      	cbz	r0, 8002456 <__ssputs_r+0xa2>
 80023fc:	6921      	ldr	r1, [r4, #16]
 80023fe:	464a      	mov	r2, r9
 8002400:	f000 fae8 	bl	80029d4 <memcpy>
 8002404:	89a3      	ldrh	r3, [r4, #12]
 8002406:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800240a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800240e:	81a3      	strh	r3, [r4, #12]
 8002410:	6126      	str	r6, [r4, #16]
 8002412:	6165      	str	r5, [r4, #20]
 8002414:	444e      	add	r6, r9
 8002416:	eba5 0509 	sub.w	r5, r5, r9
 800241a:	6026      	str	r6, [r4, #0]
 800241c:	60a5      	str	r5, [r4, #8]
 800241e:	463e      	mov	r6, r7
 8002420:	42be      	cmp	r6, r7
 8002422:	d900      	bls.n	8002426 <__ssputs_r+0x72>
 8002424:	463e      	mov	r6, r7
 8002426:	6820      	ldr	r0, [r4, #0]
 8002428:	4632      	mov	r2, r6
 800242a:	4641      	mov	r1, r8
 800242c:	f000 faa8 	bl	8002980 <memmove>
 8002430:	68a3      	ldr	r3, [r4, #8]
 8002432:	1b9b      	subs	r3, r3, r6
 8002434:	60a3      	str	r3, [r4, #8]
 8002436:	6823      	ldr	r3, [r4, #0]
 8002438:	4433      	add	r3, r6
 800243a:	6023      	str	r3, [r4, #0]
 800243c:	2000      	movs	r0, #0
 800243e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002442:	462a      	mov	r2, r5
 8002444:	f000 fad4 	bl	80029f0 <_realloc_r>
 8002448:	4606      	mov	r6, r0
 800244a:	2800      	cmp	r0, #0
 800244c:	d1e0      	bne.n	8002410 <__ssputs_r+0x5c>
 800244e:	6921      	ldr	r1, [r4, #16]
 8002450:	4650      	mov	r0, sl
 8002452:	f7ff feb7 	bl	80021c4 <_free_r>
 8002456:	230c      	movs	r3, #12
 8002458:	f8ca 3000 	str.w	r3, [sl]
 800245c:	89a3      	ldrh	r3, [r4, #12]
 800245e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002462:	81a3      	strh	r3, [r4, #12]
 8002464:	f04f 30ff 	mov.w	r0, #4294967295
 8002468:	e7e9      	b.n	800243e <__ssputs_r+0x8a>
	...

0800246c <_svfiprintf_r>:
 800246c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002470:	4698      	mov	r8, r3
 8002472:	898b      	ldrh	r3, [r1, #12]
 8002474:	061b      	lsls	r3, r3, #24
 8002476:	b09d      	sub	sp, #116	@ 0x74
 8002478:	4607      	mov	r7, r0
 800247a:	460d      	mov	r5, r1
 800247c:	4614      	mov	r4, r2
 800247e:	d510      	bpl.n	80024a2 <_svfiprintf_r+0x36>
 8002480:	690b      	ldr	r3, [r1, #16]
 8002482:	b973      	cbnz	r3, 80024a2 <_svfiprintf_r+0x36>
 8002484:	2140      	movs	r1, #64	@ 0x40
 8002486:	f7ff ff09 	bl	800229c <_malloc_r>
 800248a:	6028      	str	r0, [r5, #0]
 800248c:	6128      	str	r0, [r5, #16]
 800248e:	b930      	cbnz	r0, 800249e <_svfiprintf_r+0x32>
 8002490:	230c      	movs	r3, #12
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	f04f 30ff 	mov.w	r0, #4294967295
 8002498:	b01d      	add	sp, #116	@ 0x74
 800249a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800249e:	2340      	movs	r3, #64	@ 0x40
 80024a0:	616b      	str	r3, [r5, #20]
 80024a2:	2300      	movs	r3, #0
 80024a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80024a6:	2320      	movs	r3, #32
 80024a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80024ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80024b0:	2330      	movs	r3, #48	@ 0x30
 80024b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002650 <_svfiprintf_r+0x1e4>
 80024b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80024ba:	f04f 0901 	mov.w	r9, #1
 80024be:	4623      	mov	r3, r4
 80024c0:	469a      	mov	sl, r3
 80024c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80024c6:	b10a      	cbz	r2, 80024cc <_svfiprintf_r+0x60>
 80024c8:	2a25      	cmp	r2, #37	@ 0x25
 80024ca:	d1f9      	bne.n	80024c0 <_svfiprintf_r+0x54>
 80024cc:	ebba 0b04 	subs.w	fp, sl, r4
 80024d0:	d00b      	beq.n	80024ea <_svfiprintf_r+0x7e>
 80024d2:	465b      	mov	r3, fp
 80024d4:	4622      	mov	r2, r4
 80024d6:	4629      	mov	r1, r5
 80024d8:	4638      	mov	r0, r7
 80024da:	f7ff ff6b 	bl	80023b4 <__ssputs_r>
 80024de:	3001      	adds	r0, #1
 80024e0:	f000 80a7 	beq.w	8002632 <_svfiprintf_r+0x1c6>
 80024e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80024e6:	445a      	add	r2, fp
 80024e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80024ea:	f89a 3000 	ldrb.w	r3, [sl]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 809f 	beq.w	8002632 <_svfiprintf_r+0x1c6>
 80024f4:	2300      	movs	r3, #0
 80024f6:	f04f 32ff 	mov.w	r2, #4294967295
 80024fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80024fe:	f10a 0a01 	add.w	sl, sl, #1
 8002502:	9304      	str	r3, [sp, #16]
 8002504:	9307      	str	r3, [sp, #28]
 8002506:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800250a:	931a      	str	r3, [sp, #104]	@ 0x68
 800250c:	4654      	mov	r4, sl
 800250e:	2205      	movs	r2, #5
 8002510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002514:	484e      	ldr	r0, [pc, #312]	@ (8002650 <_svfiprintf_r+0x1e4>)
 8002516:	f7fd fe5b 	bl	80001d0 <memchr>
 800251a:	9a04      	ldr	r2, [sp, #16]
 800251c:	b9d8      	cbnz	r0, 8002556 <_svfiprintf_r+0xea>
 800251e:	06d0      	lsls	r0, r2, #27
 8002520:	bf44      	itt	mi
 8002522:	2320      	movmi	r3, #32
 8002524:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002528:	0711      	lsls	r1, r2, #28
 800252a:	bf44      	itt	mi
 800252c:	232b      	movmi	r3, #43	@ 0x2b
 800252e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002532:	f89a 3000 	ldrb.w	r3, [sl]
 8002536:	2b2a      	cmp	r3, #42	@ 0x2a
 8002538:	d015      	beq.n	8002566 <_svfiprintf_r+0xfa>
 800253a:	9a07      	ldr	r2, [sp, #28]
 800253c:	4654      	mov	r4, sl
 800253e:	2000      	movs	r0, #0
 8002540:	f04f 0c0a 	mov.w	ip, #10
 8002544:	4621      	mov	r1, r4
 8002546:	f811 3b01 	ldrb.w	r3, [r1], #1
 800254a:	3b30      	subs	r3, #48	@ 0x30
 800254c:	2b09      	cmp	r3, #9
 800254e:	d94b      	bls.n	80025e8 <_svfiprintf_r+0x17c>
 8002550:	b1b0      	cbz	r0, 8002580 <_svfiprintf_r+0x114>
 8002552:	9207      	str	r2, [sp, #28]
 8002554:	e014      	b.n	8002580 <_svfiprintf_r+0x114>
 8002556:	eba0 0308 	sub.w	r3, r0, r8
 800255a:	fa09 f303 	lsl.w	r3, r9, r3
 800255e:	4313      	orrs	r3, r2
 8002560:	9304      	str	r3, [sp, #16]
 8002562:	46a2      	mov	sl, r4
 8002564:	e7d2      	b.n	800250c <_svfiprintf_r+0xa0>
 8002566:	9b03      	ldr	r3, [sp, #12]
 8002568:	1d19      	adds	r1, r3, #4
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	9103      	str	r1, [sp, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	bfbb      	ittet	lt
 8002572:	425b      	neglt	r3, r3
 8002574:	f042 0202 	orrlt.w	r2, r2, #2
 8002578:	9307      	strge	r3, [sp, #28]
 800257a:	9307      	strlt	r3, [sp, #28]
 800257c:	bfb8      	it	lt
 800257e:	9204      	strlt	r2, [sp, #16]
 8002580:	7823      	ldrb	r3, [r4, #0]
 8002582:	2b2e      	cmp	r3, #46	@ 0x2e
 8002584:	d10a      	bne.n	800259c <_svfiprintf_r+0x130>
 8002586:	7863      	ldrb	r3, [r4, #1]
 8002588:	2b2a      	cmp	r3, #42	@ 0x2a
 800258a:	d132      	bne.n	80025f2 <_svfiprintf_r+0x186>
 800258c:	9b03      	ldr	r3, [sp, #12]
 800258e:	1d1a      	adds	r2, r3, #4
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	9203      	str	r2, [sp, #12]
 8002594:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002598:	3402      	adds	r4, #2
 800259a:	9305      	str	r3, [sp, #20]
 800259c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002660 <_svfiprintf_r+0x1f4>
 80025a0:	7821      	ldrb	r1, [r4, #0]
 80025a2:	2203      	movs	r2, #3
 80025a4:	4650      	mov	r0, sl
 80025a6:	f7fd fe13 	bl	80001d0 <memchr>
 80025aa:	b138      	cbz	r0, 80025bc <_svfiprintf_r+0x150>
 80025ac:	9b04      	ldr	r3, [sp, #16]
 80025ae:	eba0 000a 	sub.w	r0, r0, sl
 80025b2:	2240      	movs	r2, #64	@ 0x40
 80025b4:	4082      	lsls	r2, r0
 80025b6:	4313      	orrs	r3, r2
 80025b8:	3401      	adds	r4, #1
 80025ba:	9304      	str	r3, [sp, #16]
 80025bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025c0:	4824      	ldr	r0, [pc, #144]	@ (8002654 <_svfiprintf_r+0x1e8>)
 80025c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80025c6:	2206      	movs	r2, #6
 80025c8:	f7fd fe02 	bl	80001d0 <memchr>
 80025cc:	2800      	cmp	r0, #0
 80025ce:	d036      	beq.n	800263e <_svfiprintf_r+0x1d2>
 80025d0:	4b21      	ldr	r3, [pc, #132]	@ (8002658 <_svfiprintf_r+0x1ec>)
 80025d2:	bb1b      	cbnz	r3, 800261c <_svfiprintf_r+0x1b0>
 80025d4:	9b03      	ldr	r3, [sp, #12]
 80025d6:	3307      	adds	r3, #7
 80025d8:	f023 0307 	bic.w	r3, r3, #7
 80025dc:	3308      	adds	r3, #8
 80025de:	9303      	str	r3, [sp, #12]
 80025e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80025e2:	4433      	add	r3, r6
 80025e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80025e6:	e76a      	b.n	80024be <_svfiprintf_r+0x52>
 80025e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80025ec:	460c      	mov	r4, r1
 80025ee:	2001      	movs	r0, #1
 80025f0:	e7a8      	b.n	8002544 <_svfiprintf_r+0xd8>
 80025f2:	2300      	movs	r3, #0
 80025f4:	3401      	adds	r4, #1
 80025f6:	9305      	str	r3, [sp, #20]
 80025f8:	4619      	mov	r1, r3
 80025fa:	f04f 0c0a 	mov.w	ip, #10
 80025fe:	4620      	mov	r0, r4
 8002600:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002604:	3a30      	subs	r2, #48	@ 0x30
 8002606:	2a09      	cmp	r2, #9
 8002608:	d903      	bls.n	8002612 <_svfiprintf_r+0x1a6>
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0c6      	beq.n	800259c <_svfiprintf_r+0x130>
 800260e:	9105      	str	r1, [sp, #20]
 8002610:	e7c4      	b.n	800259c <_svfiprintf_r+0x130>
 8002612:	fb0c 2101 	mla	r1, ip, r1, r2
 8002616:	4604      	mov	r4, r0
 8002618:	2301      	movs	r3, #1
 800261a:	e7f0      	b.n	80025fe <_svfiprintf_r+0x192>
 800261c:	ab03      	add	r3, sp, #12
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	462a      	mov	r2, r5
 8002622:	4b0e      	ldr	r3, [pc, #56]	@ (800265c <_svfiprintf_r+0x1f0>)
 8002624:	a904      	add	r1, sp, #16
 8002626:	4638      	mov	r0, r7
 8002628:	f3af 8000 	nop.w
 800262c:	1c42      	adds	r2, r0, #1
 800262e:	4606      	mov	r6, r0
 8002630:	d1d6      	bne.n	80025e0 <_svfiprintf_r+0x174>
 8002632:	89ab      	ldrh	r3, [r5, #12]
 8002634:	065b      	lsls	r3, r3, #25
 8002636:	f53f af2d 	bmi.w	8002494 <_svfiprintf_r+0x28>
 800263a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800263c:	e72c      	b.n	8002498 <_svfiprintf_r+0x2c>
 800263e:	ab03      	add	r3, sp, #12
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	462a      	mov	r2, r5
 8002644:	4b05      	ldr	r3, [pc, #20]	@ (800265c <_svfiprintf_r+0x1f0>)
 8002646:	a904      	add	r1, sp, #16
 8002648:	4638      	mov	r0, r7
 800264a:	f000 f879 	bl	8002740 <_printf_i>
 800264e:	e7ed      	b.n	800262c <_svfiprintf_r+0x1c0>
 8002650:	08002aa4 	.word	0x08002aa4
 8002654:	08002aae 	.word	0x08002aae
 8002658:	00000000 	.word	0x00000000
 800265c:	080023b5 	.word	0x080023b5
 8002660:	08002aaa 	.word	0x08002aaa

08002664 <_printf_common>:
 8002664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002668:	4616      	mov	r6, r2
 800266a:	4698      	mov	r8, r3
 800266c:	688a      	ldr	r2, [r1, #8]
 800266e:	690b      	ldr	r3, [r1, #16]
 8002670:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002674:	4293      	cmp	r3, r2
 8002676:	bfb8      	it	lt
 8002678:	4613      	movlt	r3, r2
 800267a:	6033      	str	r3, [r6, #0]
 800267c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002680:	4607      	mov	r7, r0
 8002682:	460c      	mov	r4, r1
 8002684:	b10a      	cbz	r2, 800268a <_printf_common+0x26>
 8002686:	3301      	adds	r3, #1
 8002688:	6033      	str	r3, [r6, #0]
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	0699      	lsls	r1, r3, #26
 800268e:	bf42      	ittt	mi
 8002690:	6833      	ldrmi	r3, [r6, #0]
 8002692:	3302      	addmi	r3, #2
 8002694:	6033      	strmi	r3, [r6, #0]
 8002696:	6825      	ldr	r5, [r4, #0]
 8002698:	f015 0506 	ands.w	r5, r5, #6
 800269c:	d106      	bne.n	80026ac <_printf_common+0x48>
 800269e:	f104 0a19 	add.w	sl, r4, #25
 80026a2:	68e3      	ldr	r3, [r4, #12]
 80026a4:	6832      	ldr	r2, [r6, #0]
 80026a6:	1a9b      	subs	r3, r3, r2
 80026a8:	42ab      	cmp	r3, r5
 80026aa:	dc26      	bgt.n	80026fa <_printf_common+0x96>
 80026ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80026b0:	6822      	ldr	r2, [r4, #0]
 80026b2:	3b00      	subs	r3, #0
 80026b4:	bf18      	it	ne
 80026b6:	2301      	movne	r3, #1
 80026b8:	0692      	lsls	r2, r2, #26
 80026ba:	d42b      	bmi.n	8002714 <_printf_common+0xb0>
 80026bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80026c0:	4641      	mov	r1, r8
 80026c2:	4638      	mov	r0, r7
 80026c4:	47c8      	blx	r9
 80026c6:	3001      	adds	r0, #1
 80026c8:	d01e      	beq.n	8002708 <_printf_common+0xa4>
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	6922      	ldr	r2, [r4, #16]
 80026ce:	f003 0306 	and.w	r3, r3, #6
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	bf02      	ittt	eq
 80026d6:	68e5      	ldreq	r5, [r4, #12]
 80026d8:	6833      	ldreq	r3, [r6, #0]
 80026da:	1aed      	subeq	r5, r5, r3
 80026dc:	68a3      	ldr	r3, [r4, #8]
 80026de:	bf0c      	ite	eq
 80026e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026e4:	2500      	movne	r5, #0
 80026e6:	4293      	cmp	r3, r2
 80026e8:	bfc4      	itt	gt
 80026ea:	1a9b      	subgt	r3, r3, r2
 80026ec:	18ed      	addgt	r5, r5, r3
 80026ee:	2600      	movs	r6, #0
 80026f0:	341a      	adds	r4, #26
 80026f2:	42b5      	cmp	r5, r6
 80026f4:	d11a      	bne.n	800272c <_printf_common+0xc8>
 80026f6:	2000      	movs	r0, #0
 80026f8:	e008      	b.n	800270c <_printf_common+0xa8>
 80026fa:	2301      	movs	r3, #1
 80026fc:	4652      	mov	r2, sl
 80026fe:	4641      	mov	r1, r8
 8002700:	4638      	mov	r0, r7
 8002702:	47c8      	blx	r9
 8002704:	3001      	adds	r0, #1
 8002706:	d103      	bne.n	8002710 <_printf_common+0xac>
 8002708:	f04f 30ff 	mov.w	r0, #4294967295
 800270c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002710:	3501      	adds	r5, #1
 8002712:	e7c6      	b.n	80026a2 <_printf_common+0x3e>
 8002714:	18e1      	adds	r1, r4, r3
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	2030      	movs	r0, #48	@ 0x30
 800271a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800271e:	4422      	add	r2, r4
 8002720:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002724:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002728:	3302      	adds	r3, #2
 800272a:	e7c7      	b.n	80026bc <_printf_common+0x58>
 800272c:	2301      	movs	r3, #1
 800272e:	4622      	mov	r2, r4
 8002730:	4641      	mov	r1, r8
 8002732:	4638      	mov	r0, r7
 8002734:	47c8      	blx	r9
 8002736:	3001      	adds	r0, #1
 8002738:	d0e6      	beq.n	8002708 <_printf_common+0xa4>
 800273a:	3601      	adds	r6, #1
 800273c:	e7d9      	b.n	80026f2 <_printf_common+0x8e>
	...

08002740 <_printf_i>:
 8002740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002744:	7e0f      	ldrb	r7, [r1, #24]
 8002746:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002748:	2f78      	cmp	r7, #120	@ 0x78
 800274a:	4691      	mov	r9, r2
 800274c:	4680      	mov	r8, r0
 800274e:	460c      	mov	r4, r1
 8002750:	469a      	mov	sl, r3
 8002752:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002756:	d807      	bhi.n	8002768 <_printf_i+0x28>
 8002758:	2f62      	cmp	r7, #98	@ 0x62
 800275a:	d80a      	bhi.n	8002772 <_printf_i+0x32>
 800275c:	2f00      	cmp	r7, #0
 800275e:	f000 80d2 	beq.w	8002906 <_printf_i+0x1c6>
 8002762:	2f58      	cmp	r7, #88	@ 0x58
 8002764:	f000 80b9 	beq.w	80028da <_printf_i+0x19a>
 8002768:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800276c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002770:	e03a      	b.n	80027e8 <_printf_i+0xa8>
 8002772:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002776:	2b15      	cmp	r3, #21
 8002778:	d8f6      	bhi.n	8002768 <_printf_i+0x28>
 800277a:	a101      	add	r1, pc, #4	@ (adr r1, 8002780 <_printf_i+0x40>)
 800277c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002780:	080027d9 	.word	0x080027d9
 8002784:	080027ed 	.word	0x080027ed
 8002788:	08002769 	.word	0x08002769
 800278c:	08002769 	.word	0x08002769
 8002790:	08002769 	.word	0x08002769
 8002794:	08002769 	.word	0x08002769
 8002798:	080027ed 	.word	0x080027ed
 800279c:	08002769 	.word	0x08002769
 80027a0:	08002769 	.word	0x08002769
 80027a4:	08002769 	.word	0x08002769
 80027a8:	08002769 	.word	0x08002769
 80027ac:	080028ed 	.word	0x080028ed
 80027b0:	08002817 	.word	0x08002817
 80027b4:	080028a7 	.word	0x080028a7
 80027b8:	08002769 	.word	0x08002769
 80027bc:	08002769 	.word	0x08002769
 80027c0:	0800290f 	.word	0x0800290f
 80027c4:	08002769 	.word	0x08002769
 80027c8:	08002817 	.word	0x08002817
 80027cc:	08002769 	.word	0x08002769
 80027d0:	08002769 	.word	0x08002769
 80027d4:	080028af 	.word	0x080028af
 80027d8:	6833      	ldr	r3, [r6, #0]
 80027da:	1d1a      	adds	r2, r3, #4
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6032      	str	r2, [r6, #0]
 80027e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80027e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80027e8:	2301      	movs	r3, #1
 80027ea:	e09d      	b.n	8002928 <_printf_i+0x1e8>
 80027ec:	6833      	ldr	r3, [r6, #0]
 80027ee:	6820      	ldr	r0, [r4, #0]
 80027f0:	1d19      	adds	r1, r3, #4
 80027f2:	6031      	str	r1, [r6, #0]
 80027f4:	0606      	lsls	r6, r0, #24
 80027f6:	d501      	bpl.n	80027fc <_printf_i+0xbc>
 80027f8:	681d      	ldr	r5, [r3, #0]
 80027fa:	e003      	b.n	8002804 <_printf_i+0xc4>
 80027fc:	0645      	lsls	r5, r0, #25
 80027fe:	d5fb      	bpl.n	80027f8 <_printf_i+0xb8>
 8002800:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002804:	2d00      	cmp	r5, #0
 8002806:	da03      	bge.n	8002810 <_printf_i+0xd0>
 8002808:	232d      	movs	r3, #45	@ 0x2d
 800280a:	426d      	negs	r5, r5
 800280c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002810:	4859      	ldr	r0, [pc, #356]	@ (8002978 <_printf_i+0x238>)
 8002812:	230a      	movs	r3, #10
 8002814:	e011      	b.n	800283a <_printf_i+0xfa>
 8002816:	6821      	ldr	r1, [r4, #0]
 8002818:	6833      	ldr	r3, [r6, #0]
 800281a:	0608      	lsls	r0, r1, #24
 800281c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002820:	d402      	bmi.n	8002828 <_printf_i+0xe8>
 8002822:	0649      	lsls	r1, r1, #25
 8002824:	bf48      	it	mi
 8002826:	b2ad      	uxthmi	r5, r5
 8002828:	2f6f      	cmp	r7, #111	@ 0x6f
 800282a:	4853      	ldr	r0, [pc, #332]	@ (8002978 <_printf_i+0x238>)
 800282c:	6033      	str	r3, [r6, #0]
 800282e:	bf14      	ite	ne
 8002830:	230a      	movne	r3, #10
 8002832:	2308      	moveq	r3, #8
 8002834:	2100      	movs	r1, #0
 8002836:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800283a:	6866      	ldr	r6, [r4, #4]
 800283c:	60a6      	str	r6, [r4, #8]
 800283e:	2e00      	cmp	r6, #0
 8002840:	bfa2      	ittt	ge
 8002842:	6821      	ldrge	r1, [r4, #0]
 8002844:	f021 0104 	bicge.w	r1, r1, #4
 8002848:	6021      	strge	r1, [r4, #0]
 800284a:	b90d      	cbnz	r5, 8002850 <_printf_i+0x110>
 800284c:	2e00      	cmp	r6, #0
 800284e:	d04b      	beq.n	80028e8 <_printf_i+0x1a8>
 8002850:	4616      	mov	r6, r2
 8002852:	fbb5 f1f3 	udiv	r1, r5, r3
 8002856:	fb03 5711 	mls	r7, r3, r1, r5
 800285a:	5dc7      	ldrb	r7, [r0, r7]
 800285c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002860:	462f      	mov	r7, r5
 8002862:	42bb      	cmp	r3, r7
 8002864:	460d      	mov	r5, r1
 8002866:	d9f4      	bls.n	8002852 <_printf_i+0x112>
 8002868:	2b08      	cmp	r3, #8
 800286a:	d10b      	bne.n	8002884 <_printf_i+0x144>
 800286c:	6823      	ldr	r3, [r4, #0]
 800286e:	07df      	lsls	r7, r3, #31
 8002870:	d508      	bpl.n	8002884 <_printf_i+0x144>
 8002872:	6923      	ldr	r3, [r4, #16]
 8002874:	6861      	ldr	r1, [r4, #4]
 8002876:	4299      	cmp	r1, r3
 8002878:	bfde      	ittt	le
 800287a:	2330      	movle	r3, #48	@ 0x30
 800287c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002880:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002884:	1b92      	subs	r2, r2, r6
 8002886:	6122      	str	r2, [r4, #16]
 8002888:	f8cd a000 	str.w	sl, [sp]
 800288c:	464b      	mov	r3, r9
 800288e:	aa03      	add	r2, sp, #12
 8002890:	4621      	mov	r1, r4
 8002892:	4640      	mov	r0, r8
 8002894:	f7ff fee6 	bl	8002664 <_printf_common>
 8002898:	3001      	adds	r0, #1
 800289a:	d14a      	bne.n	8002932 <_printf_i+0x1f2>
 800289c:	f04f 30ff 	mov.w	r0, #4294967295
 80028a0:	b004      	add	sp, #16
 80028a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	f043 0320 	orr.w	r3, r3, #32
 80028ac:	6023      	str	r3, [r4, #0]
 80028ae:	4833      	ldr	r0, [pc, #204]	@ (800297c <_printf_i+0x23c>)
 80028b0:	2778      	movs	r7, #120	@ 0x78
 80028b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80028b6:	6823      	ldr	r3, [r4, #0]
 80028b8:	6831      	ldr	r1, [r6, #0]
 80028ba:	061f      	lsls	r7, r3, #24
 80028bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80028c0:	d402      	bmi.n	80028c8 <_printf_i+0x188>
 80028c2:	065f      	lsls	r7, r3, #25
 80028c4:	bf48      	it	mi
 80028c6:	b2ad      	uxthmi	r5, r5
 80028c8:	6031      	str	r1, [r6, #0]
 80028ca:	07d9      	lsls	r1, r3, #31
 80028cc:	bf44      	itt	mi
 80028ce:	f043 0320 	orrmi.w	r3, r3, #32
 80028d2:	6023      	strmi	r3, [r4, #0]
 80028d4:	b11d      	cbz	r5, 80028de <_printf_i+0x19e>
 80028d6:	2310      	movs	r3, #16
 80028d8:	e7ac      	b.n	8002834 <_printf_i+0xf4>
 80028da:	4827      	ldr	r0, [pc, #156]	@ (8002978 <_printf_i+0x238>)
 80028dc:	e7e9      	b.n	80028b2 <_printf_i+0x172>
 80028de:	6823      	ldr	r3, [r4, #0]
 80028e0:	f023 0320 	bic.w	r3, r3, #32
 80028e4:	6023      	str	r3, [r4, #0]
 80028e6:	e7f6      	b.n	80028d6 <_printf_i+0x196>
 80028e8:	4616      	mov	r6, r2
 80028ea:	e7bd      	b.n	8002868 <_printf_i+0x128>
 80028ec:	6833      	ldr	r3, [r6, #0]
 80028ee:	6825      	ldr	r5, [r4, #0]
 80028f0:	6961      	ldr	r1, [r4, #20]
 80028f2:	1d18      	adds	r0, r3, #4
 80028f4:	6030      	str	r0, [r6, #0]
 80028f6:	062e      	lsls	r6, r5, #24
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	d501      	bpl.n	8002900 <_printf_i+0x1c0>
 80028fc:	6019      	str	r1, [r3, #0]
 80028fe:	e002      	b.n	8002906 <_printf_i+0x1c6>
 8002900:	0668      	lsls	r0, r5, #25
 8002902:	d5fb      	bpl.n	80028fc <_printf_i+0x1bc>
 8002904:	8019      	strh	r1, [r3, #0]
 8002906:	2300      	movs	r3, #0
 8002908:	6123      	str	r3, [r4, #16]
 800290a:	4616      	mov	r6, r2
 800290c:	e7bc      	b.n	8002888 <_printf_i+0x148>
 800290e:	6833      	ldr	r3, [r6, #0]
 8002910:	1d1a      	adds	r2, r3, #4
 8002912:	6032      	str	r2, [r6, #0]
 8002914:	681e      	ldr	r6, [r3, #0]
 8002916:	6862      	ldr	r2, [r4, #4]
 8002918:	2100      	movs	r1, #0
 800291a:	4630      	mov	r0, r6
 800291c:	f7fd fc58 	bl	80001d0 <memchr>
 8002920:	b108      	cbz	r0, 8002926 <_printf_i+0x1e6>
 8002922:	1b80      	subs	r0, r0, r6
 8002924:	6060      	str	r0, [r4, #4]
 8002926:	6863      	ldr	r3, [r4, #4]
 8002928:	6123      	str	r3, [r4, #16]
 800292a:	2300      	movs	r3, #0
 800292c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002930:	e7aa      	b.n	8002888 <_printf_i+0x148>
 8002932:	6923      	ldr	r3, [r4, #16]
 8002934:	4632      	mov	r2, r6
 8002936:	4649      	mov	r1, r9
 8002938:	4640      	mov	r0, r8
 800293a:	47d0      	blx	sl
 800293c:	3001      	adds	r0, #1
 800293e:	d0ad      	beq.n	800289c <_printf_i+0x15c>
 8002940:	6823      	ldr	r3, [r4, #0]
 8002942:	079b      	lsls	r3, r3, #30
 8002944:	d413      	bmi.n	800296e <_printf_i+0x22e>
 8002946:	68e0      	ldr	r0, [r4, #12]
 8002948:	9b03      	ldr	r3, [sp, #12]
 800294a:	4298      	cmp	r0, r3
 800294c:	bfb8      	it	lt
 800294e:	4618      	movlt	r0, r3
 8002950:	e7a6      	b.n	80028a0 <_printf_i+0x160>
 8002952:	2301      	movs	r3, #1
 8002954:	4632      	mov	r2, r6
 8002956:	4649      	mov	r1, r9
 8002958:	4640      	mov	r0, r8
 800295a:	47d0      	blx	sl
 800295c:	3001      	adds	r0, #1
 800295e:	d09d      	beq.n	800289c <_printf_i+0x15c>
 8002960:	3501      	adds	r5, #1
 8002962:	68e3      	ldr	r3, [r4, #12]
 8002964:	9903      	ldr	r1, [sp, #12]
 8002966:	1a5b      	subs	r3, r3, r1
 8002968:	42ab      	cmp	r3, r5
 800296a:	dcf2      	bgt.n	8002952 <_printf_i+0x212>
 800296c:	e7eb      	b.n	8002946 <_printf_i+0x206>
 800296e:	2500      	movs	r5, #0
 8002970:	f104 0619 	add.w	r6, r4, #25
 8002974:	e7f5      	b.n	8002962 <_printf_i+0x222>
 8002976:	bf00      	nop
 8002978:	08002ab5 	.word	0x08002ab5
 800297c:	08002ac6 	.word	0x08002ac6

08002980 <memmove>:
 8002980:	4288      	cmp	r0, r1
 8002982:	b510      	push	{r4, lr}
 8002984:	eb01 0402 	add.w	r4, r1, r2
 8002988:	d902      	bls.n	8002990 <memmove+0x10>
 800298a:	4284      	cmp	r4, r0
 800298c:	4623      	mov	r3, r4
 800298e:	d807      	bhi.n	80029a0 <memmove+0x20>
 8002990:	1e43      	subs	r3, r0, #1
 8002992:	42a1      	cmp	r1, r4
 8002994:	d008      	beq.n	80029a8 <memmove+0x28>
 8002996:	f811 2b01 	ldrb.w	r2, [r1], #1
 800299a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800299e:	e7f8      	b.n	8002992 <memmove+0x12>
 80029a0:	4402      	add	r2, r0
 80029a2:	4601      	mov	r1, r0
 80029a4:	428a      	cmp	r2, r1
 80029a6:	d100      	bne.n	80029aa <memmove+0x2a>
 80029a8:	bd10      	pop	{r4, pc}
 80029aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80029ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80029b2:	e7f7      	b.n	80029a4 <memmove+0x24>

080029b4 <_sbrk_r>:
 80029b4:	b538      	push	{r3, r4, r5, lr}
 80029b6:	4d06      	ldr	r5, [pc, #24]	@ (80029d0 <_sbrk_r+0x1c>)
 80029b8:	2300      	movs	r3, #0
 80029ba:	4604      	mov	r4, r0
 80029bc:	4608      	mov	r0, r1
 80029be:	602b      	str	r3, [r5, #0]
 80029c0:	f7fe fa50 	bl	8000e64 <_sbrk>
 80029c4:	1c43      	adds	r3, r0, #1
 80029c6:	d102      	bne.n	80029ce <_sbrk_r+0x1a>
 80029c8:	682b      	ldr	r3, [r5, #0]
 80029ca:	b103      	cbz	r3, 80029ce <_sbrk_r+0x1a>
 80029cc:	6023      	str	r3, [r4, #0]
 80029ce:	bd38      	pop	{r3, r4, r5, pc}
 80029d0:	200001c0 	.word	0x200001c0

080029d4 <memcpy>:
 80029d4:	440a      	add	r2, r1
 80029d6:	4291      	cmp	r1, r2
 80029d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80029dc:	d100      	bne.n	80029e0 <memcpy+0xc>
 80029de:	4770      	bx	lr
 80029e0:	b510      	push	{r4, lr}
 80029e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029ea:	4291      	cmp	r1, r2
 80029ec:	d1f9      	bne.n	80029e2 <memcpy+0xe>
 80029ee:	bd10      	pop	{r4, pc}

080029f0 <_realloc_r>:
 80029f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029f4:	4680      	mov	r8, r0
 80029f6:	4615      	mov	r5, r2
 80029f8:	460c      	mov	r4, r1
 80029fa:	b921      	cbnz	r1, 8002a06 <_realloc_r+0x16>
 80029fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a00:	4611      	mov	r1, r2
 8002a02:	f7ff bc4b 	b.w	800229c <_malloc_r>
 8002a06:	b92a      	cbnz	r2, 8002a14 <_realloc_r+0x24>
 8002a08:	f7ff fbdc 	bl	80021c4 <_free_r>
 8002a0c:	2400      	movs	r4, #0
 8002a0e:	4620      	mov	r0, r4
 8002a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a14:	f000 f81a 	bl	8002a4c <_malloc_usable_size_r>
 8002a18:	4285      	cmp	r5, r0
 8002a1a:	4606      	mov	r6, r0
 8002a1c:	d802      	bhi.n	8002a24 <_realloc_r+0x34>
 8002a1e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002a22:	d8f4      	bhi.n	8002a0e <_realloc_r+0x1e>
 8002a24:	4629      	mov	r1, r5
 8002a26:	4640      	mov	r0, r8
 8002a28:	f7ff fc38 	bl	800229c <_malloc_r>
 8002a2c:	4607      	mov	r7, r0
 8002a2e:	2800      	cmp	r0, #0
 8002a30:	d0ec      	beq.n	8002a0c <_realloc_r+0x1c>
 8002a32:	42b5      	cmp	r5, r6
 8002a34:	462a      	mov	r2, r5
 8002a36:	4621      	mov	r1, r4
 8002a38:	bf28      	it	cs
 8002a3a:	4632      	movcs	r2, r6
 8002a3c:	f7ff ffca 	bl	80029d4 <memcpy>
 8002a40:	4621      	mov	r1, r4
 8002a42:	4640      	mov	r0, r8
 8002a44:	f7ff fbbe 	bl	80021c4 <_free_r>
 8002a48:	463c      	mov	r4, r7
 8002a4a:	e7e0      	b.n	8002a0e <_realloc_r+0x1e>

08002a4c <_malloc_usable_size_r>:
 8002a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a50:	1f18      	subs	r0, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	bfbc      	itt	lt
 8002a56:	580b      	ldrlt	r3, [r1, r0]
 8002a58:	18c0      	addlt	r0, r0, r3
 8002a5a:	4770      	bx	lr

08002a5c <_init>:
 8002a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5e:	bf00      	nop
 8002a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a62:	bc08      	pop	{r3}
 8002a64:	469e      	mov	lr, r3
 8002a66:	4770      	bx	lr

08002a68 <_fini>:
 8002a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a6a:	bf00      	nop
 8002a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a6e:	bc08      	pop	{r3}
 8002a70:	469e      	mov	lr, r3
 8002a72:	4770      	bx	lr
