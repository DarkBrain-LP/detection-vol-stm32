
vol_detection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002608  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002798  08002798  00003798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027fc  080027fc  00004060  2**0
                  CONTENTS
  4 .ARM          00000008  080027fc  080027fc  000037fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002804  08002804  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002804  08002804  00003804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002808  08002808  00003808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800280c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004060  2**0
                  CONTENTS
 10 .bss          00000170  20000060  20000060  00004060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d0  200001d0  00004060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 13 .debug_info   000046fc  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001265  00000000  00000000  0000878c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004a8  00000000  00000000  000099f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000035b  00000000  00000000  00009ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f489  00000000  00000000  0000a1fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000060fb  00000000  00000000  00029684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bec61  00000000  00000000  0002f77f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ee3e0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000015e4  00000000  00000000  000ee424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  000efa08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002780 	.word	0x08002780

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08002780 	.word	0x08002780

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000562:	b08d      	sub	sp, #52	@ 0x34
 8000564:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fcbd 	bl	8000ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f84f 	bl	800060c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  TimeTypeDef time = {0};  // HAL_RTC_DST_Add1Hour(&hrtc)
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	2100      	movs	r1, #0
 8000574:	460a      	mov	r2, r1
 8000576:	801a      	strh	r2, [r3, #0]
 8000578:	460a      	mov	r2, r1
 800057a:	709a      	strb	r2, [r3, #2]
  DateTypeDef date = {0};
 800057c:	f107 0318 	add.w	r3, r7, #24
 8000580:	2100      	movs	r1, #0
 8000582:	460a      	mov	r2, r1
 8000584:	801a      	strh	r2, [r3, #0]
 8000586:	460a      	mov	r2, r1
 8000588:	709a      	strb	r2, [r3, #2]
  char time_string[20];
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f8a9 	bl	80006e0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  init_rtc();
 800058e:	f000 fa05 	bl	800099c <init_rtc>
  init_usart();
 8000592:	f000 fbdb 	bl	8000d4c <init_usart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  btn_poussoir_state = HAL_GPIO_ReadPin(portA, GPIO_PIN_0);
 8000596:	4b1a      	ldr	r3, [pc, #104]	@ (8000600 <main+0xa0>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2101      	movs	r1, #1
 800059c:	4618      	mov	r0, r3
 800059e:	f000 ffb9 	bl	8001514 <HAL_GPIO_ReadPin>
 80005a2:	4603      	mov	r3, r0
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b17      	ldr	r3, [pc, #92]	@ (8000604 <main+0xa4>)
 80005a8:	701a      	strb	r2, [r3, #0]
	  if(btn_poussoir_state == GPIO_PIN_SET)
 80005aa:	4b16      	ldr	r3, [pc, #88]	@ (8000604 <main+0xa4>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d11a      	bne.n	80005e8 <main+0x88>
	  {
		  sprintf(time_string, "%02d-%02d-%04d %02d:%02d:%02d\r\n", date.Date, date.Month, 2000 + date.Year, time.Hours, time.Minutes, time.Seconds);
 80005b2:	7ebb      	ldrb	r3, [r7, #26]
 80005b4:	461d      	mov	r5, r3
 80005b6:	7e7b      	ldrb	r3, [r7, #25]
 80005b8:	461e      	mov	r6, r3
 80005ba:	7e3b      	ldrb	r3, [r7, #24]
 80005bc:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80005c0:	7f3a      	ldrb	r2, [r7, #28]
 80005c2:	7f79      	ldrb	r1, [r7, #29]
 80005c4:	7fb8      	ldrb	r0, [r7, #30]
 80005c6:	4604      	mov	r4, r0
 80005c8:	1d38      	adds	r0, r7, #4
 80005ca:	9403      	str	r4, [sp, #12]
 80005cc:	9102      	str	r1, [sp, #8]
 80005ce:	9201      	str	r2, [sp, #4]
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	4633      	mov	r3, r6
 80005d4:	462a      	mov	r2, r5
 80005d6:	490c      	ldr	r1, [pc, #48]	@ (8000608 <main+0xa8>)
 80005d8:	f001 fc32 	bl	8001e40 <siprintf>
		  serial_puts(&time_string);
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 fc30 	bl	8000e44 <serial_puts>
		  newLine();
 80005e4:	f000 fc4a 	bl	8000e7c <newLine>
	  }
	  get_time(&time);
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fab7 	bl	8000b60 <get_time>
	  get_date(&date);
 80005f2:	f107 0318 	add.w	r3, r7, #24
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 fa62 	bl	8000ac0 <get_date>
  {
 80005fc:	e7cb      	b.n	8000596 <main+0x36>
 80005fe:	bf00      	nop
 8000600:	20000000 	.word	0x20000000
 8000604:	2000007c 	.word	0x2000007c
 8000608:	08002798 	.word	0x08002798

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	@ 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	@ 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f001 fc30 	bl	8001e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b28      	ldr	r3, [pc, #160]	@ (80006d8 <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	4a27      	ldr	r2, [pc, #156]	@ (80006d8 <SystemClock_Config+0xcc>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000640:	4b25      	ldr	r3, [pc, #148]	@ (80006d8 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b22      	ldr	r3, [pc, #136]	@ (80006dc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a21      	ldr	r2, [pc, #132]	@ (80006dc <SystemClock_Config+0xd0>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2310      	movs	r3, #16
 8000672:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800067c:	2308      	movs	r3, #8
 800067e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000680:	2332      	movs	r3, #50	@ 0x32
 8000682:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000684:	2304      	movs	r3, #4
 8000686:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000688:	2307      	movs	r3, #7
 800068a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f000 ff71 	bl	8001578 <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800069c:	f000 fab0 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2302      	movs	r3, #2
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 f9d2 	bl	8001a68 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ca:	f000 fa99 	bl	8000c00 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	@ 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08c      	sub	sp, #48	@ 0x30
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	61bb      	str	r3, [r7, #24]
 80006fa:	4ba2      	ldr	r3, [pc, #648]	@ (8000984 <MX_GPIO_Init+0x2a4>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4aa1      	ldr	r2, [pc, #644]	@ (8000984 <MX_GPIO_Init+0x2a4>)
 8000700:	f043 0310 	orr.w	r3, r3, #16
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
 8000706:	4b9f      	ldr	r3, [pc, #636]	@ (8000984 <MX_GPIO_Init+0x2a4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	f003 0310 	and.w	r3, r3, #16
 800070e:	61bb      	str	r3, [r7, #24]
 8000710:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	4b9b      	ldr	r3, [pc, #620]	@ (8000984 <MX_GPIO_Init+0x2a4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a9a      	ldr	r2, [pc, #616]	@ (8000984 <MX_GPIO_Init+0x2a4>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b98      	ldr	r3, [pc, #608]	@ (8000984 <MX_GPIO_Init+0x2a4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	4b94      	ldr	r3, [pc, #592]	@ (8000984 <MX_GPIO_Init+0x2a4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a93      	ldr	r2, [pc, #588]	@ (8000984 <MX_GPIO_Init+0x2a4>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b91      	ldr	r3, [pc, #580]	@ (8000984 <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	4b8d      	ldr	r3, [pc, #564]	@ (8000984 <MX_GPIO_Init+0x2a4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a8c      	ldr	r2, [pc, #560]	@ (8000984 <MX_GPIO_Init+0x2a4>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b8a      	ldr	r3, [pc, #552]	@ (8000984 <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	4b86      	ldr	r3, [pc, #536]	@ (8000984 <MX_GPIO_Init+0x2a4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a85      	ldr	r2, [pc, #532]	@ (8000984 <MX_GPIO_Init+0x2a4>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b83      	ldr	r3, [pc, #524]	@ (8000984 <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b7f      	ldr	r3, [pc, #508]	@ (8000984 <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a7e      	ldr	r2, [pc, #504]	@ (8000984 <MX_GPIO_Init+0x2a4>)
 800078c:	f043 0308 	orr.w	r3, r3, #8
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b7c      	ldr	r3, [pc, #496]	@ (8000984 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0308 	and.w	r3, r3, #8
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2108      	movs	r1, #8
 80007a2:	4879      	ldr	r0, [pc, #484]	@ (8000988 <MX_GPIO_Init+0x2a8>)
 80007a4:	f000 fece 	bl	8001544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	2101      	movs	r1, #1
 80007ac:	4877      	ldr	r0, [pc, #476]	@ (800098c <MX_GPIO_Init+0x2ac>)
 80007ae:	f000 fec9 	bl	8001544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007b2:	2200      	movs	r2, #0
 80007b4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007b8:	4875      	ldr	r0, [pc, #468]	@ (8000990 <MX_GPIO_Init+0x2b0>)
 80007ba:	f000 fec3 	bl	8001544 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007be:	2308      	movs	r3, #8
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4619      	mov	r1, r3
 80007d4:	486c      	ldr	r0, [pc, #432]	@ (8000988 <MX_GPIO_Init+0x2a8>)
 80007d6:	f000 fd01 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007da:	2301      	movs	r3, #1
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	4866      	ldr	r0, [pc, #408]	@ (800098c <MX_GPIO_Init+0x2ac>)
 80007f2:	f000 fcf3 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007f6:	2308      	movs	r3, #8
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000806:	2305      	movs	r3, #5
 8000808:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	485e      	ldr	r0, [pc, #376]	@ (800098c <MX_GPIO_Init+0x2ac>)
 8000812:	f000 fce3 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000816:	2301      	movs	r3, #1
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	485a      	ldr	r0, [pc, #360]	@ (8000994 <MX_GPIO_Init+0x2b4>)
 800082c:	f000 fcd6 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000830:	2310      	movs	r3, #16
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000834:	2302      	movs	r3, #2
 8000836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000840:	2306      	movs	r3, #6
 8000842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	4852      	ldr	r0, [pc, #328]	@ (8000994 <MX_GPIO_Init+0x2b4>)
 800084c:	f000 fcc6 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000850:	23e0      	movs	r3, #224	@ 0xe0
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000860:	2305      	movs	r3, #5
 8000862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	484a      	ldr	r0, [pc, #296]	@ (8000994 <MX_GPIO_Init+0x2b4>)
 800086c:	f000 fcb6 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000870:	2304      	movs	r3, #4
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4845      	ldr	r0, [pc, #276]	@ (8000998 <MX_GPIO_Init+0x2b8>)
 8000884:	f000 fcaa 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000888:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089a:	2305      	movs	r3, #5
 800089c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	483c      	ldr	r0, [pc, #240]	@ (8000998 <MX_GPIO_Init+0x2b8>)
 80008a6:	f000 fc99 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008aa:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008ae:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	4833      	ldr	r0, [pc, #204]	@ (8000990 <MX_GPIO_Init+0x2b0>)
 80008c4:	f000 fc8a 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008c8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008da:	2306      	movs	r3, #6
 80008dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4829      	ldr	r0, [pc, #164]	@ (800098c <MX_GPIO_Init+0x2ac>)
 80008e6:	f000 fc79 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4825      	ldr	r0, [pc, #148]	@ (8000994 <MX_GPIO_Init+0x2b4>)
 8000900:	f000 fc6c 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000904:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000916:	230a      	movs	r3, #10
 8000918:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	481c      	ldr	r0, [pc, #112]	@ (8000994 <MX_GPIO_Init+0x2b4>)
 8000922:	f000 fc5b 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000926:	2320      	movs	r3, #32
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4815      	ldr	r0, [pc, #84]	@ (8000990 <MX_GPIO_Init+0x2b0>)
 800093a:	f000 fc4f 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800093e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000944:	2312      	movs	r3, #18
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000950:	2304      	movs	r3, #4
 8000952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	480f      	ldr	r0, [pc, #60]	@ (8000998 <MX_GPIO_Init+0x2b8>)
 800095c:	f000 fc3e 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000960:	2302      	movs	r3, #2
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000964:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4804      	ldr	r0, [pc, #16]	@ (8000988 <MX_GPIO_Init+0x2a8>)
 8000976:	f000 fc31 	bl	80011dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097a:	bf00      	nop
 800097c:	3730      	adds	r7, #48	@ 0x30
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	40021000 	.word	0x40021000
 800098c:	40020800 	.word	0x40020800
 8000990:	40020c00 	.word	0x40020c00
 8000994:	40020000 	.word	0x40020000
 8000998:	40020400 	.word	0x40020400

0800099c <init_rtc>:

/* USER CODE BEGIN 4 */
static void init_rtc(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
	uint8_t asynch_factor = 0x7F; // 0111.1111
 80009a2:	237f      	movs	r3, #127	@ 0x7f
 80009a4:	71fb      	strb	r3, [r7, #7]
	uint8_t synch_factor = 0xFF; // 1111.1111 255
 80009a6:	23ff      	movs	r3, #255	@ 0xff
 80009a8:	71bb      	strb	r3, [r7, #6]
	// Low Speed Clock config
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80009aa:	4b41      	ldr	r3, [pc, #260]	@ (8000ab0 <init_rtc+0x114>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	4a40      	ldr	r2, [pc, #256]	@ (8000ab0 <init_rtc+0x114>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_DBP;
 80009b6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ab4 <init_rtc+0x118>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a3e      	ldr	r2, [pc, #248]	@ (8000ab4 <init_rtc+0x118>)
 80009bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009c0:	6013      	str	r3, [r2, #0]
	RCC->CSR |= RCC_CSR_LSION;
 80009c2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ab0 <init_rtc+0x114>)
 80009c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80009c6:	4a3a      	ldr	r2, [pc, #232]	@ (8000ab0 <init_rtc+0x114>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6753      	str	r3, [r2, #116]	@ 0x74
	while(!(RCC->CSR & RCC_CSR_LSIRDY)){};
 80009ce:	bf00      	nop
 80009d0:	4b37      	ldr	r3, [pc, #220]	@ (8000ab0 <init_rtc+0x114>)
 80009d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80009d4:	f003 0302 	and.w	r3, r3, #2
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d0f9      	beq.n	80009d0 <init_rtc+0x34>
	RCC->BDCR |= 0x8200;
 80009dc:	4b34      	ldr	r3, [pc, #208]	@ (8000ab0 <init_rtc+0x114>)
 80009de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80009e0:	4a33      	ldr	r2, [pc, #204]	@ (8000ab0 <init_rtc+0x114>)
 80009e2:	f443 4302 	orr.w	r3, r3, #33280	@ 0x8200
 80009e6:	6713      	str	r3, [r2, #112]	@ 0x70

	// enable RTC write
	RTC->WPR = 0xCA;
 80009e8:	4b33      	ldr	r3, [pc, #204]	@ (8000ab8 <init_rtc+0x11c>)
 80009ea:	22ca      	movs	r2, #202	@ 0xca
 80009ec:	625a      	str	r2, [r3, #36]	@ 0x24
	RTC->WPR = 0x53;
 80009ee:	4b32      	ldr	r3, [pc, #200]	@ (8000ab8 <init_rtc+0x11c>)
 80009f0:	2253      	movs	r2, #83	@ 0x53
 80009f2:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable init mode
	RTC->ISR |= (1<<ISR_IN_BIT);
 80009f4:	4b30      	ldr	r3, [pc, #192]	@ (8000ab8 <init_rtc+0x11c>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	4a2f      	ldr	r2, [pc, #188]	@ (8000ab8 <init_rtc+0x11c>)
 80009fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009fe:	60d3      	str	r3, [r2, #12]
	while(!( RTC->ISR & (1<<ISR_INITF_BIT) )){};
 8000a00:	bf00      	nop
 8000a02:	4b2d      	ldr	r3, [pc, #180]	@ (8000ab8 <init_rtc+0x11c>)
 8000a04:	68db      	ldr	r3, [r3, #12]
 8000a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d0f9      	beq.n	8000a02 <init_rtc+0x66>


	// program first the asynchronous prescaler factor in RTC_PRER register
	RTC->PRER &= ~(RTC_PRER_ASYNC_MASK<<RTC_PRER_ASYNC_LSB);
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ab8 <init_rtc+0x11c>)
 8000a10:	691b      	ldr	r3, [r3, #16]
 8000a12:	4a29      	ldr	r2, [pc, #164]	@ (8000ab8 <init_rtc+0x11c>)
 8000a14:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8000a18:	6113      	str	r3, [r2, #16]
	RTC->PRER |= asynch_factor<<RTC_PRER_ASYNC_LSB;
 8000a1a:	4b27      	ldr	r3, [pc, #156]	@ (8000ab8 <init_rtc+0x11c>)
 8000a1c:	691a      	ldr	r2, [r3, #16]
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	041b      	lsls	r3, r3, #16
 8000a22:	4925      	ldr	r1, [pc, #148]	@ (8000ab8 <init_rtc+0x11c>)
 8000a24:	4313      	orrs	r3, r2
 8000a26:	610b      	str	r3, [r1, #16]

	//  program the synchronous prescaler factor
	RTC->PRER &= ~RTC_PRER_SYNC_MASK;
 8000a28:	4b23      	ldr	r3, [pc, #140]	@ (8000ab8 <init_rtc+0x11c>)
 8000a2a:	691b      	ldr	r3, [r3, #16]
 8000a2c:	4a22      	ldr	r2, [pc, #136]	@ (8000ab8 <init_rtc+0x11c>)
 8000a2e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000a32:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000a36:	6113      	str	r3, [r2, #16]
	RTC->PRER |= synch_factor;
 8000a38:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab8 <init_rtc+0x11c>)
 8000a3a:	691a      	ldr	r2, [r3, #16]
 8000a3c:	79bb      	ldrb	r3, [r7, #6]
 8000a3e:	491e      	ldr	r1, [pc, #120]	@ (8000ab8 <init_rtc+0x11c>)
 8000a40:	4313      	orrs	r3, r2
 8000a42:	610b      	str	r3, [r1, #16]

	// default time
	RTC->TR &= 0xFF808080;
 8000a44:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab8 <init_rtc+0x11c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a1b      	ldr	r2, [pc, #108]	@ (8000ab8 <init_rtc+0x11c>)
 8000a4a:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
 8000a4e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8000a52:	6013      	str	r3, [r2, #0]
	RTC->TR |=(7<<16) | (0x55<<8);
 8000a54:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <init_rtc+0x11c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a17      	ldr	r2, [pc, #92]	@ (8000ab8 <init_rtc+0x11c>)
 8000a5a:	f443 23ea 	orr.w	r3, r3, #479232	@ 0x75000
 8000a5e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8000a62:	6013      	str	r3, [r2, #0]

	// default date
	RTC->DR &= 0xFF0020C0;
 8000a64:	4b14      	ldr	r3, [pc, #80]	@ (8000ab8 <init_rtc+0x11c>)
 8000a66:	685a      	ldr	r2, [r3, #4]
 8000a68:	4913      	ldr	r1, [pc, #76]	@ (8000ab8 <init_rtc+0x11c>)
 8000a6a:	4b14      	ldr	r3, [pc, #80]	@ (8000abc <init_rtc+0x120>)
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	604b      	str	r3, [r1, #4]
	RTC->DR |= (0x24<<16) | (3<<8) | (0x24);
 8000a70:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <init_rtc+0x11c>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	4a10      	ldr	r2, [pc, #64]	@ (8000ab8 <init_rtc+0x11c>)
 8000a76:	f043 1324 	orr.w	r3, r3, #2359332	@ 0x240024
 8000a7a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000a7e:	6053      	str	r3, [r2, #4]

	// disable init mode
	RTC->CR |= RTC_CR_BYPSHAD;
 8000a80:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab8 <init_rtc+0x11c>)
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	4a0c      	ldr	r2, [pc, #48]	@ (8000ab8 <init_rtc+0x11c>)
 8000a86:	f043 0320 	orr.w	r3, r3, #32
 8000a8a:	6093      	str	r3, [r2, #8]
	RTC->ISR &= ~RTC_ISR_INIT;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <init_rtc+0x11c>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	4a09      	ldr	r2, [pc, #36]	@ (8000ab8 <init_rtc+0x11c>)
 8000a92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000a96:	60d3      	str	r3, [r2, #12]
	PWR->CR &= ~PWR_CR_DBP;
 8000a98:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <init_rtc+0x118>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a05      	ldr	r2, [pc, #20]	@ (8000ab4 <init_rtc+0x118>)
 8000a9e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000aa2:	6013      	str	r3, [r2, #0]

}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40007000 	.word	0x40007000
 8000ab8:	40002800 	.word	0x40002800
 8000abc:	ff0020c0 	.word	0xff0020c0

08000ac0 <get_date>:

void get_date(DateTypeDef *date){
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

	date->Year = (((RTC->DR >> 20)&0xF)*10) + ((RTC->DR >> 16)&0xF);
 8000ac8:	4b24      	ldr	r3, [pc, #144]	@ (8000b5c <get_date+0x9c>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	0d1b      	lsrs	r3, r3, #20
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	f003 030f 	and.w	r3, r3, #15
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	0092      	lsls	r2, r2, #2
 8000ada:	4413      	add	r3, r2
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b5c <get_date+0x9c>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	0c1b      	lsrs	r3, r3, #16
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	f003 030f 	and.w	r3, r3, #15
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	4413      	add	r3, r2
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	701a      	strb	r2, [r3, #0]
	date->Month = (10*((RTC->DR >> 12)&1)) + ((RTC->DR >> 8)&0xF);
 8000af6:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <get_date+0x9c>)
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	0b1b      	lsrs	r3, r3, #12
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	461a      	mov	r2, r3
 8000b06:	0092      	lsls	r2, r2, #2
 8000b08:	4413      	add	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <get_date+0x9c>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	0a1b      	lsrs	r3, r3, #8
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	f003 030f 	and.w	r3, r3, #15
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	4413      	add	r3, r2
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	705a      	strb	r2, [r3, #1]
	date->Date = (10*((RTC->DR >> 4)&3)) + (RTC->DR & 0xF);
 8000b24:	4b0d      	ldr	r3, [pc, #52]	@ (8000b5c <get_date+0x9c>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	091b      	lsrs	r3, r3, #4
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	f003 0303 	and.w	r3, r3, #3
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	461a      	mov	r2, r3
 8000b34:	0092      	lsls	r2, r2, #2
 8000b36:	4413      	add	r3, r2
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	4b07      	ldr	r3, [pc, #28]	@ (8000b5c <get_date+0x9c>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	f003 030f 	and.w	r3, r3, #15
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	4413      	add	r3, r2
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	709a      	strb	r2, [r3, #2]
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	40002800 	.word	0x40002800

08000b60 <get_time>:

void get_time(TimeTypeDef *time){
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	time->Seconds = (RTC->TR & 0xF) + 10*((RTC->TR >> 4)&7);
 8000b68:	4b24      	ldr	r3, [pc, #144]	@ (8000bfc <get_time+0x9c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	4b21      	ldr	r3, [pc, #132]	@ (8000bfc <get_time+0x9c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	091b      	lsrs	r3, r3, #4
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	f003 0307 	and.w	r3, r3, #7
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	4619      	mov	r1, r3
 8000b84:	0089      	lsls	r1, r1, #2
 8000b86:	440b      	add	r3, r1
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	4413      	add	r3, r2
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	709a      	strb	r2, [r3, #2]
	time->Minutes = ((RTC->TR >> 8)&0xF) + 10*((RTC->TR >> 12)&7);
 8000b94:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <get_time+0x9c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	0a1b      	lsrs	r3, r3, #8
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	f003 030f 	and.w	r3, r3, #15
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b16      	ldr	r3, [pc, #88]	@ (8000bfc <get_time+0x9c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	0b1b      	lsrs	r3, r3, #12
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	0089      	lsls	r1, r1, #2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	4413      	add	r3, r2
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	705a      	strb	r2, [r3, #1]
	time->Hours = ((RTC->TR >> 16)&0xF) + 10*(((RTC->TR >> 20)&3));
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <get_time+0x9c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	0c1b      	lsrs	r3, r3, #16
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <get_time+0x9c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	0d1b      	lsrs	r3, r3, #20
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	f003 0303 	and.w	r3, r3, #3
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	4619      	mov	r1, r3
 8000be0:	0089      	lsls	r1, r1, #2
 8000be2:	440b      	add	r3, r1
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	4413      	add	r3, r2
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	701a      	strb	r2, [r3, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	40002800 	.word	0x40002800

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <Error_Handler+0x8>

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <HAL_MspInit+0x4c>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c58 <HAL_MspInit+0x4c>)
 8000c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c22:	4b0d      	ldr	r3, [pc, #52]	@ (8000c58 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <HAL_MspInit+0x4c>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	4a08      	ldr	r2, [pc, #32]	@ (8000c58 <HAL_MspInit+0x4c>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <HAL_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c4a:	2007      	movs	r0, #7
 8000c4c:	f000 fa92 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40023800 	.word	0x40023800

08000c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <NMI_Handler+0x4>

08000c64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <MemManage_Handler+0x4>

08000c74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <BusFault_Handler+0x4>

08000c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <UsageFault_Handler+0x4>

08000c84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb2:	f000 f969 	bl	8000f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc4:	4a14      	ldr	r2, [pc, #80]	@ (8000d18 <_sbrk+0x5c>)
 8000cc6:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <_sbrk+0x60>)
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd0:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d102      	bne.n	8000cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <_sbrk+0x64>)
 8000cda:	4a12      	ldr	r2, [pc, #72]	@ (8000d24 <_sbrk+0x68>)
 8000cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cde:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <_sbrk+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d207      	bcs.n	8000cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cec:	f001 f8d0 	bl	8001e90 <__errno>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	e009      	b.n	8000d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cfc:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d02:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	4a05      	ldr	r2, [pc, #20]	@ (8000d20 <_sbrk+0x64>)
 8000d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20020000 	.word	0x20020000
 8000d1c:	00000400 	.word	0x00000400
 8000d20:	20000080 	.word	0x20000080
 8000d24:	200001d0 	.word	0x200001d0

08000d28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <SystemInit+0x20>)
 8000d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d32:	4a05      	ldr	r2, [pc, #20]	@ (8000d48 <SystemInit+0x20>)
 8000d34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <init_usart>:
#include "stm32f4xx_hal.h"
#include "usart2.h"


// USART2 Initialization
void init_usart(void){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0

	//Initialize PA2 as USART2_TX and PA3 as USART2_RX
	//Activate A port
	SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIOAEN);
 8000d50:	4b29      	ldr	r3, [pc, #164]	@ (8000df8 <init_usart+0xac>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d54:	4a28      	ldr	r2, [pc, #160]	@ (8000df8 <init_usart+0xac>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6313      	str	r3, [r2, #48]	@ 0x30
    /* Setup PA2 and PA3 as Alternate Function */
	//MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER2, 0b01);
	//MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER3, 0b01);
	GPIOA->MODER |= 0x000000A0;
 8000d5c:	4b27      	ldr	r3, [pc, #156]	@ (8000dfc <init_usart+0xb0>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a26      	ldr	r2, [pc, #152]	@ (8000dfc <init_usart+0xb0>)
 8000d62:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000d66:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= 0xFFFFFFAF;
 8000d68:	4b24      	ldr	r3, [pc, #144]	@ (8000dfc <init_usart+0xb0>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a23      	ldr	r2, [pc, #140]	@ (8000dfc <init_usart+0xb0>)
 8000d6e:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8000d72:	6013      	str	r3, [r2, #0]
	/* Setup Alternate function as USART2 */
	GPIOA->AFR[0] &= 0xFFFF77FF;
 8000d74:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <init_usart+0xb0>)
 8000d76:	6a1b      	ldr	r3, [r3, #32]
 8000d78:	4a20      	ldr	r2, [pc, #128]	@ (8000dfc <init_usart+0xb0>)
 8000d7a:	f423 4308 	bic.w	r3, r3, #34816	@ 0x8800
 8000d7e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 0x00007700;
 8000d80:	4b1e      	ldr	r3, [pc, #120]	@ (8000dfc <init_usart+0xb0>)
 8000d82:	6a1b      	ldr	r3, [r3, #32]
 8000d84:	4a1d      	ldr	r2, [pc, #116]	@ (8000dfc <init_usart+0xb0>)
 8000d86:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000d8a:	6213      	str	r3, [r2, #32]
	/* Push pull output */
	GPIOA->OTYPER &= 0xFFFFFFF3;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dfc <init_usart+0xb0>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	4a1a      	ldr	r2, [pc, #104]	@ (8000dfc <init_usart+0xb0>)
 8000d92:	f023 030c 	bic.w	r3, r3, #12
 8000d96:	6053      	str	r3, [r2, #4]
	/* Pull up resistor on */
	GPIOA->PUPDR &= 0xFFFFFF5F;
 8000d98:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <init_usart+0xb0>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	4a17      	ldr	r2, [pc, #92]	@ (8000dfc <init_usart+0xb0>)
 8000d9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8000da2:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 0x00000050;
 8000da4:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <init_usart+0xb0>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	4a14      	ldr	r2, [pc, #80]	@ (8000dfc <init_usart+0xb0>)
 8000daa:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000dae:	60d3      	str	r3, [r2, #12]
	/* Output speed set to VeryHigh */
	GPIOA->OSPEEDR |= 0x000000F0;
 8000db0:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <init_usart+0xb0>)
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	4a11      	ldr	r2, [pc, #68]	@ (8000dfc <init_usart+0xb0>)
 8000db6:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8000dba:	6093      	str	r3, [r2, #8]


	//Activate USART2 Clock
	SET_BIT(RCC->APB1ENR,RCC_APB1ENR_USART2EN);
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <init_usart+0xac>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000df8 <init_usart+0xac>)
 8000dc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc6:	6413      	str	r3, [r2, #64]	@ 0x40
	//Enable USART, no TE no RE yet, Oversampling = 8, 8bit mode, no parity
	//Enable Tx and Rx
	USART2->CR1 = 0x0000800C;
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8000e00 <init_usart+0xb4>)
 8000dca:	f248 020c 	movw	r2, #32780	@ 0x800c
 8000dce:	60da      	str	r2, [r3, #12]
	// No LIN mode, No clock output (synchronous mode)
	USART2->CR2 = 0x00000000;
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <init_usart+0xb4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
	// No control mode, 3 sample point,
	USART2->CR3 = 0x00000000;
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <init_usart+0xb4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	615a      	str	r2, [r3, #20]
	// 19200bauds -> USARTDIV = 273.4375 -> Mantissa = 273d=0x111 , Fraction = 0.4375*16 = 7d = 0x7
	USART2->BRR = 0x00001117;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <init_usart+0xb4>)
 8000dde:	f241 1217 	movw	r2, #4375	@ 0x1117
 8000de2:	609a      	str	r2, [r3, #8]
	//Enable UART
	USART2->CR1 = 0x0000A00C;
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <init_usart+0xb4>)
 8000de6:	f24a 020c 	movw	r2, #40972	@ 0xa00c
 8000dea:	60da      	str	r2, [r3, #12]
	//SET_BIT(USART2->CR1, USART_CR1_UE );

	HAL_Delay(1);
 8000dec:	2001      	movs	r0, #1
 8000dee:	f000 f8eb 	bl	8000fc8 <HAL_Delay>
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40004400 	.word	0x40004400

08000e04 <serial_putc>:
	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
	NVIC_EnableIRQ(USART2_IRQn);
}

void serial_putc(char c)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
	//Load data to register
	USART2->DR = c;
 8000e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8000e40 <serial_putc+0x3c>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	6053      	str	r3, [r2, #4]
	while(!(USART2->SR & 0x00000080));
 8000e14:	bf00      	nop
 8000e16:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <serial_putc+0x3c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d0f9      	beq.n	8000e16 <serial_putc+0x12>
	while(!(USART2->SR & 0x00000040));
 8000e22:	bf00      	nop
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <serial_putc+0x3c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0f9      	beq.n	8000e24 <serial_putc+0x20>
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40004400 	.word	0x40004400

08000e44 <serial_puts>:

void serial_puts( char *msg)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	int cnt = 0;;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 8000e50:	e009      	b.n	8000e66 <serial_puts+0x22>
		serial_putc(msg[cnt]);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	4413      	add	r3, r2
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ffd2 	bl	8000e04 <serial_putc>
		cnt++;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	3301      	adds	r3, #1
 8000e64:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1ef      	bne.n	8000e52 <serial_puts+0xe>
	}
}
 8000e72:	bf00      	nop
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <newLine>:

void newLine()
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	serial_putc(10); // nouvelle ligne
 8000e80:	200a      	movs	r0, #10
 8000e82:	f7ff ffbf 	bl	8000e04 <serial_putc>
	serial_putc(13); // retour chariot
 8000e86:	200d      	movs	r0, #13
 8000e88:	f7ff ffbc 	bl	8000e04 <serial_putc>
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ec8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e94:	f7ff ff48 	bl	8000d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e98:	480c      	ldr	r0, [pc, #48]	@ (8000ecc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e9a:	490d      	ldr	r1, [pc, #52]	@ (8000ed0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000edc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f000 ffed 	bl	8001e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec2:	f7ff fb4d 	bl	8000560 <main>
  bx  lr    
 8000ec6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ec8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ed4:	0800280c 	.word	0x0800280c
  ldr r2, =_sbss
 8000ed8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000edc:	200001d0 	.word	0x200001d0

08000ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC_IRQHandler>
	...

08000ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0d      	ldr	r2, [pc, #52]	@ (8000f24 <HAL_Init+0x40>)
 8000eee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8000f24 <HAL_Init+0x40>)
 8000efa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f00:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a07      	ldr	r2, [pc, #28]	@ (8000f24 <HAL_Init+0x40>)
 8000f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f000 f931 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f000 f808 	bl	8000f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f18:	f7ff fe78 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023c00 	.word	0x40023c00

08000f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <HAL_InitTick+0x54>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <HAL_InitTick+0x58>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f93b 	bl	80011c2 <HAL_SYSTICK_Config>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00e      	b.n	8000f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b0f      	cmp	r3, #15
 8000f5a:	d80a      	bhi.n	8000f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	f000 f911 	bl	800118a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f68:	4a06      	ldr	r2, [pc, #24]	@ (8000f84 <HAL_InitTick+0x5c>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e000      	b.n	8000f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000004 	.word	0x20000004
 8000f80:	2000000c 	.word	0x2000000c
 8000f84:	20000008 	.word	0x20000008

08000f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <HAL_IncTick+0x20>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <HAL_IncTick+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a04      	ldr	r2, [pc, #16]	@ (8000fac <HAL_IncTick+0x24>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	2000000c 	.word	0x2000000c
 8000fac:	20000084 	.word	0x20000084

08000fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	@ (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000084 	.word	0x20000084

08000fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd0:	f7ff ffee 	bl	8000fb0 <HAL_GetTick>
 8000fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe0:	d005      	beq.n	8000fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <HAL_Delay+0x44>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4413      	add	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fee:	bf00      	nop
 8000ff0:	f7ff ffde 	bl	8000fb0 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d8f7      	bhi.n	8000ff0 <HAL_Delay+0x28>
  {
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000000c 	.word	0x2000000c

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001038:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800103c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001042:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	60d3      	str	r3, [r2, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	@ (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	@ (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	@ (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	@ 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	@ 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001140:	d301      	bcc.n	8001146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001142:	2301      	movs	r3, #1
 8001144:	e00f      	b.n	8001166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001146:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <SysTick_Config+0x40>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114e:	210f      	movs	r1, #15
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f7ff ff8e 	bl	8001074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001158:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <SysTick_Config+0x40>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115e:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <SysTick_Config+0x40>)
 8001160:	2207      	movs	r2, #7
 8001162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	e000e010 	.word	0xe000e010

08001174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff47 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800119c:	f7ff ff5c 	bl	8001058 <__NVIC_GetPriorityGrouping>
 80011a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	6978      	ldr	r0, [r7, #20]
 80011a8:	f7ff ff8e 	bl	80010c8 <NVIC_EncodePriority>
 80011ac:	4602      	mov	r2, r0
 80011ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff5d 	bl	8001074 <__NVIC_SetPriority>
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ffb0 	bl	8001130 <SysTick_Config>
 80011d0:	4603      	mov	r3, r0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	@ 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
 80011f6:	e16b      	b.n	80014d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f8:	2201      	movs	r2, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	429a      	cmp	r2, r3
 8001212:	f040 815a 	bne.w	80014ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	2b01      	cmp	r3, #1
 8001220:	d005      	beq.n	800122e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800122a:	2b02      	cmp	r3, #2
 800122c:	d130      	bne.n	8001290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	2203      	movs	r2, #3
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	68da      	ldr	r2, [r3, #12]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001264:	2201      	movs	r2, #1
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	f003 0201 	and.w	r2, r3, #1
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b03      	cmp	r3, #3
 800129a:	d017      	beq.n	80012cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d123      	bne.n	8001320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	08da      	lsrs	r2, r3, #3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3208      	adds	r2, #8
 80012e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	220f      	movs	r2, #15
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	691a      	ldr	r2, [r3, #16]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	08da      	lsrs	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3208      	adds	r2, #8
 800131a:	69b9      	ldr	r1, [r7, #24]
 800131c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0203 	and.w	r2, r3, #3
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 80b4 	beq.w	80014ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b60      	ldr	r3, [pc, #384]	@ (80014e8 <HAL_GPIO_Init+0x30c>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136a:	4a5f      	ldr	r2, [pc, #380]	@ (80014e8 <HAL_GPIO_Init+0x30c>)
 800136c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001370:	6453      	str	r3, [r2, #68]	@ 0x44
 8001372:	4b5d      	ldr	r3, [pc, #372]	@ (80014e8 <HAL_GPIO_Init+0x30c>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001376:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800137e:	4a5b      	ldr	r2, [pc, #364]	@ (80014ec <HAL_GPIO_Init+0x310>)
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	3302      	adds	r3, #2
 8001386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	220f      	movs	r2, #15
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a52      	ldr	r2, [pc, #328]	@ (80014f0 <HAL_GPIO_Init+0x314>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d02b      	beq.n	8001402 <HAL_GPIO_Init+0x226>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a51      	ldr	r2, [pc, #324]	@ (80014f4 <HAL_GPIO_Init+0x318>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d025      	beq.n	80013fe <HAL_GPIO_Init+0x222>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a50      	ldr	r2, [pc, #320]	@ (80014f8 <HAL_GPIO_Init+0x31c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d01f      	beq.n	80013fa <HAL_GPIO_Init+0x21e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4f      	ldr	r2, [pc, #316]	@ (80014fc <HAL_GPIO_Init+0x320>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d019      	beq.n	80013f6 <HAL_GPIO_Init+0x21a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4e      	ldr	r2, [pc, #312]	@ (8001500 <HAL_GPIO_Init+0x324>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d013      	beq.n	80013f2 <HAL_GPIO_Init+0x216>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001504 <HAL_GPIO_Init+0x328>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d00d      	beq.n	80013ee <HAL_GPIO_Init+0x212>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001508 <HAL_GPIO_Init+0x32c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d007      	beq.n	80013ea <HAL_GPIO_Init+0x20e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4b      	ldr	r2, [pc, #300]	@ (800150c <HAL_GPIO_Init+0x330>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d101      	bne.n	80013e6 <HAL_GPIO_Init+0x20a>
 80013e2:	2307      	movs	r3, #7
 80013e4:	e00e      	b.n	8001404 <HAL_GPIO_Init+0x228>
 80013e6:	2308      	movs	r3, #8
 80013e8:	e00c      	b.n	8001404 <HAL_GPIO_Init+0x228>
 80013ea:	2306      	movs	r3, #6
 80013ec:	e00a      	b.n	8001404 <HAL_GPIO_Init+0x228>
 80013ee:	2305      	movs	r3, #5
 80013f0:	e008      	b.n	8001404 <HAL_GPIO_Init+0x228>
 80013f2:	2304      	movs	r3, #4
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x228>
 80013f6:	2303      	movs	r3, #3
 80013f8:	e004      	b.n	8001404 <HAL_GPIO_Init+0x228>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e002      	b.n	8001404 <HAL_GPIO_Init+0x228>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <HAL_GPIO_Init+0x228>
 8001402:	2300      	movs	r3, #0
 8001404:	69fa      	ldr	r2, [r7, #28]
 8001406:	f002 0203 	and.w	r2, r2, #3
 800140a:	0092      	lsls	r2, r2, #2
 800140c:	4093      	lsls	r3, r2
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001414:	4935      	ldr	r1, [pc, #212]	@ (80014ec <HAL_GPIO_Init+0x310>)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001422:	4b3b      	ldr	r3, [pc, #236]	@ (8001510 <HAL_GPIO_Init+0x334>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001446:	4a32      	ldr	r2, [pc, #200]	@ (8001510 <HAL_GPIO_Init+0x334>)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800144c:	4b30      	ldr	r3, [pc, #192]	@ (8001510 <HAL_GPIO_Init+0x334>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001470:	4a27      	ldr	r2, [pc, #156]	@ (8001510 <HAL_GPIO_Init+0x334>)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001476:	4b26      	ldr	r3, [pc, #152]	@ (8001510 <HAL_GPIO_Init+0x334>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800149a:	4a1d      	ldr	r2, [pc, #116]	@ (8001510 <HAL_GPIO_Init+0x334>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <HAL_GPIO_Init+0x334>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014c4:	4a12      	ldr	r2, [pc, #72]	@ (8001510 <HAL_GPIO_Init+0x334>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3301      	adds	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	2b0f      	cmp	r3, #15
 80014d4:	f67f ae90 	bls.w	80011f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3724      	adds	r7, #36	@ 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40013800 	.word	0x40013800
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40020400 	.word	0x40020400
 80014f8:	40020800 	.word	0x40020800
 80014fc:	40020c00 	.word	0x40020c00
 8001500:	40021000 	.word	0x40021000
 8001504:	40021400 	.word	0x40021400
 8001508:	40021800 	.word	0x40021800
 800150c:	40021c00 	.word	0x40021c00
 8001510:	40013c00 	.word	0x40013c00

08001514 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691a      	ldr	r2, [r3, #16]
 8001524:	887b      	ldrh	r3, [r7, #2]
 8001526:	4013      	ands	r3, r2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d002      	beq.n	8001532 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	e001      	b.n	8001536 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001536:	7bfb      	ldrb	r3, [r7, #15]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
 8001550:	4613      	mov	r3, r2
 8001552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001554:	787b      	ldrb	r3, [r7, #1]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155a:	887a      	ldrh	r2, [r7, #2]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001560:	e003      	b.n	800156a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001562:	887b      	ldrh	r3, [r7, #2]
 8001564:	041a      	lsls	r2, r3, #16
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	619a      	str	r2, [r3, #24]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e267      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d075      	beq.n	8001682 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001596:	4b88      	ldr	r3, [pc, #544]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d00c      	beq.n	80015bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015a2:	4b85      	ldr	r3, [pc, #532]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d112      	bne.n	80015d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ae:	4b82      	ldr	r3, [pc, #520]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015ba:	d10b      	bne.n	80015d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015bc:	4b7e      	ldr	r3, [pc, #504]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d05b      	beq.n	8001680 <HAL_RCC_OscConfig+0x108>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d157      	bne.n	8001680 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e242      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015dc:	d106      	bne.n	80015ec <HAL_RCC_OscConfig+0x74>
 80015de:	4b76      	ldr	r3, [pc, #472]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a75      	ldr	r2, [pc, #468]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 80015e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e01d      	b.n	8001628 <HAL_RCC_OscConfig+0xb0>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015f4:	d10c      	bne.n	8001610 <HAL_RCC_OscConfig+0x98>
 80015f6:	4b70      	ldr	r3, [pc, #448]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a6f      	ldr	r2, [pc, #444]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 80015fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	4b6d      	ldr	r3, [pc, #436]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a6c      	ldr	r2, [pc, #432]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 8001608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e00b      	b.n	8001628 <HAL_RCC_OscConfig+0xb0>
 8001610:	4b69      	ldr	r3, [pc, #420]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a68      	ldr	r2, [pc, #416]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 8001616:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4b66      	ldr	r3, [pc, #408]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a65      	ldr	r2, [pc, #404]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 8001622:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d013      	beq.n	8001658 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001630:	f7ff fcbe 	bl	8000fb0 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001638:	f7ff fcba 	bl	8000fb0 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b64      	cmp	r3, #100	@ 0x64
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e207      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	4b5b      	ldr	r3, [pc, #364]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0xc0>
 8001656:	e014      	b.n	8001682 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fcaa 	bl	8000fb0 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fca6 	bl	8000fb0 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	@ 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e1f3      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001672:	4b51      	ldr	r3, [pc, #324]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0xe8>
 800167e:	e000      	b.n	8001682 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d063      	beq.n	8001756 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800168e:	4b4a      	ldr	r3, [pc, #296]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00b      	beq.n	80016b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800169a:	4b47      	ldr	r3, [pc, #284]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	d11c      	bne.n	80016e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016a6:	4b44      	ldr	r3, [pc, #272]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d116      	bne.n	80016e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b2:	4b41      	ldr	r3, [pc, #260]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <HAL_RCC_OscConfig+0x152>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d001      	beq.n	80016ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e1c7      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ca:	4b3b      	ldr	r3, [pc, #236]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	4937      	ldr	r1, [pc, #220]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016de:	e03a      	b.n	8001756 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d020      	beq.n	800172a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e8:	4b34      	ldr	r3, [pc, #208]	@ (80017bc <HAL_RCC_OscConfig+0x244>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ee:	f7ff fc5f 	bl	8000fb0 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f6:	f7ff fc5b 	bl	8000fb0 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e1a8      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001708:	4b2b      	ldr	r3, [pc, #172]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001714:	4b28      	ldr	r3, [pc, #160]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	4925      	ldr	r1, [pc, #148]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 8001724:	4313      	orrs	r3, r2
 8001726:	600b      	str	r3, [r1, #0]
 8001728:	e015      	b.n	8001756 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800172a:	4b24      	ldr	r3, [pc, #144]	@ (80017bc <HAL_RCC_OscConfig+0x244>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001730:	f7ff fc3e 	bl	8000fb0 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001738:	f7ff fc3a 	bl	8000fb0 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e187      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174a:	4b1b      	ldr	r3, [pc, #108]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d036      	beq.n	80017d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d016      	beq.n	8001798 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800176a:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <HAL_RCC_OscConfig+0x248>)
 800176c:	2201      	movs	r2, #1
 800176e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001770:	f7ff fc1e 	bl	8000fb0 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001778:	f7ff fc1a 	bl	8000fb0 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e167      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178a:	4b0b      	ldr	r3, [pc, #44]	@ (80017b8 <HAL_RCC_OscConfig+0x240>)
 800178c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0x200>
 8001796:	e01b      	b.n	80017d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001798:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <HAL_RCC_OscConfig+0x248>)
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179e:	f7ff fc07 	bl	8000fb0 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a4:	e00e      	b.n	80017c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a6:	f7ff fc03 	bl	8000fb0 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d907      	bls.n	80017c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e150      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
 80017b8:	40023800 	.word	0x40023800
 80017bc:	42470000 	.word	0x42470000
 80017c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c4:	4b88      	ldr	r3, [pc, #544]	@ (80019e8 <HAL_RCC_OscConfig+0x470>)
 80017c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1ea      	bne.n	80017a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 8097 	beq.w	800190c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e2:	4b81      	ldr	r3, [pc, #516]	@ (80019e8 <HAL_RCC_OscConfig+0x470>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10f      	bne.n	800180e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	4b7d      	ldr	r3, [pc, #500]	@ (80019e8 <HAL_RCC_OscConfig+0x470>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	4a7c      	ldr	r2, [pc, #496]	@ (80019e8 <HAL_RCC_OscConfig+0x470>)
 80017f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017fe:	4b7a      	ldr	r3, [pc, #488]	@ (80019e8 <HAL_RCC_OscConfig+0x470>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800180a:	2301      	movs	r3, #1
 800180c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180e:	4b77      	ldr	r3, [pc, #476]	@ (80019ec <HAL_RCC_OscConfig+0x474>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001816:	2b00      	cmp	r3, #0
 8001818:	d118      	bne.n	800184c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800181a:	4b74      	ldr	r3, [pc, #464]	@ (80019ec <HAL_RCC_OscConfig+0x474>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a73      	ldr	r2, [pc, #460]	@ (80019ec <HAL_RCC_OscConfig+0x474>)
 8001820:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001826:	f7ff fbc3 	bl	8000fb0 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800182e:	f7ff fbbf 	bl	8000fb0 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e10c      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001840:	4b6a      	ldr	r3, [pc, #424]	@ (80019ec <HAL_RCC_OscConfig+0x474>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d106      	bne.n	8001862 <HAL_RCC_OscConfig+0x2ea>
 8001854:	4b64      	ldr	r3, [pc, #400]	@ (80019e8 <HAL_RCC_OscConfig+0x470>)
 8001856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001858:	4a63      	ldr	r2, [pc, #396]	@ (80019e8 <HAL_RCC_OscConfig+0x470>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001860:	e01c      	b.n	800189c <HAL_RCC_OscConfig+0x324>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b05      	cmp	r3, #5
 8001868:	d10c      	bne.n	8001884 <HAL_RCC_OscConfig+0x30c>
 800186a:	4b5f      	ldr	r3, [pc, #380]	@ (80019e8 <HAL_RCC_OscConfig+0x470>)
 800186c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800186e:	4a5e      	ldr	r2, [pc, #376]	@ (80019e8 <HAL_RCC_OscConfig+0x470>)
 8001870:	f043 0304 	orr.w	r3, r3, #4
 8001874:	6713      	str	r3, [r2, #112]	@ 0x70
 8001876:	4b5c      	ldr	r3, [pc, #368]	@ (80019e8 <HAL_RCC_OscConfig+0x470>)
 8001878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800187a:	4a5b      	ldr	r2, [pc, #364]	@ (80019e8 <HAL_RCC_OscConfig+0x470>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6713      	str	r3, [r2, #112]	@ 0x70
 8001882:	e00b      	b.n	800189c <HAL_RCC_OscConfig+0x324>
 8001884:	4b58      	ldr	r3, [pc, #352]	@ (80019e8 <HAL_RCC_OscConfig+0x470>)
 8001886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001888:	4a57      	ldr	r2, [pc, #348]	@ (80019e8 <HAL_RCC_OscConfig+0x470>)
 800188a:	f023 0301 	bic.w	r3, r3, #1
 800188e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001890:	4b55      	ldr	r3, [pc, #340]	@ (80019e8 <HAL_RCC_OscConfig+0x470>)
 8001892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001894:	4a54      	ldr	r2, [pc, #336]	@ (80019e8 <HAL_RCC_OscConfig+0x470>)
 8001896:	f023 0304 	bic.w	r3, r3, #4
 800189a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d015      	beq.n	80018d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a4:	f7ff fb84 	bl	8000fb0 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ac:	f7ff fb80 	bl	8000fb0 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e0cb      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c2:	4b49      	ldr	r3, [pc, #292]	@ (80019e8 <HAL_RCC_OscConfig+0x470>)
 80018c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0ee      	beq.n	80018ac <HAL_RCC_OscConfig+0x334>
 80018ce:	e014      	b.n	80018fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d0:	f7ff fb6e 	bl	8000fb0 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d6:	e00a      	b.n	80018ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d8:	f7ff fb6a 	bl	8000fb0 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e0b5      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ee:	4b3e      	ldr	r3, [pc, #248]	@ (80019e8 <HAL_RCC_OscConfig+0x470>)
 80018f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1ee      	bne.n	80018d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018fa:	7dfb      	ldrb	r3, [r7, #23]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d105      	bne.n	800190c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001900:	4b39      	ldr	r3, [pc, #228]	@ (80019e8 <HAL_RCC_OscConfig+0x470>)
 8001902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001904:	4a38      	ldr	r2, [pc, #224]	@ (80019e8 <HAL_RCC_OscConfig+0x470>)
 8001906:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800190a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 80a1 	beq.w	8001a58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001916:	4b34      	ldr	r3, [pc, #208]	@ (80019e8 <HAL_RCC_OscConfig+0x470>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	2b08      	cmp	r3, #8
 8001920:	d05c      	beq.n	80019dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d141      	bne.n	80019ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192a:	4b31      	ldr	r3, [pc, #196]	@ (80019f0 <HAL_RCC_OscConfig+0x478>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff fb3e 	bl	8000fb0 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001938:	f7ff fb3a 	bl	8000fb0 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e087      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194a:	4b27      	ldr	r3, [pc, #156]	@ (80019e8 <HAL_RCC_OscConfig+0x470>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69da      	ldr	r2, [r3, #28]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001964:	019b      	lsls	r3, r3, #6
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196c:	085b      	lsrs	r3, r3, #1
 800196e:	3b01      	subs	r3, #1
 8001970:	041b      	lsls	r3, r3, #16
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001978:	061b      	lsls	r3, r3, #24
 800197a:	491b      	ldr	r1, [pc, #108]	@ (80019e8 <HAL_RCC_OscConfig+0x470>)
 800197c:	4313      	orrs	r3, r2
 800197e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001980:	4b1b      	ldr	r3, [pc, #108]	@ (80019f0 <HAL_RCC_OscConfig+0x478>)
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001986:	f7ff fb13 	bl	8000fb0 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800198e:	f7ff fb0f 	bl	8000fb0 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e05c      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a0:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <HAL_RCC_OscConfig+0x470>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x416>
 80019ac:	e054      	b.n	8001a58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ae:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <HAL_RCC_OscConfig+0x478>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b4:	f7ff fafc 	bl	8000fb0 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019bc:	f7ff faf8 	bl	8000fb0 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e045      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ce:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <HAL_RCC_OscConfig+0x470>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x444>
 80019da:	e03d      	b.n	8001a58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e038      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40007000 	.word	0x40007000
 80019f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a64 <HAL_RCC_OscConfig+0x4ec>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d028      	beq.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d121      	bne.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d11a      	bne.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a24:	4013      	ands	r3, r2
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d111      	bne.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a3a:	085b      	lsrs	r3, r3, #1
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d107      	bne.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800

08001a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0cc      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a7c:	4b68      	ldr	r3, [pc, #416]	@ (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d90c      	bls.n	8001aa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	4b65      	ldr	r3, [pc, #404]	@ (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a92:	4b63      	ldr	r3, [pc, #396]	@ (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0b8      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d020      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001abc:	4b59      	ldr	r3, [pc, #356]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4a58      	ldr	r2, [pc, #352]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ac6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ad4:	4b53      	ldr	r3, [pc, #332]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4a52      	ldr	r2, [pc, #328]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ade:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae0:	4b50      	ldr	r3, [pc, #320]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	494d      	ldr	r1, [pc, #308]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d044      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d107      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b06:	4b47      	ldr	r3, [pc, #284]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d119      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e07f      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d003      	beq.n	8001b26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b26:	4b3f      	ldr	r3, [pc, #252]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d109      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e06f      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b36:	4b3b      	ldr	r3, [pc, #236]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e067      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b46:	4b37      	ldr	r3, [pc, #220]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f023 0203 	bic.w	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4934      	ldr	r1, [pc, #208]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b58:	f7ff fa2a 	bl	8000fb0 <HAL_GetTick>
 8001b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	e00a      	b.n	8001b76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b60:	f7ff fa26 	bl	8000fb0 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e04f      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b76:	4b2b      	ldr	r3, [pc, #172]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 020c 	and.w	r2, r3, #12
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d1eb      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b88:	4b25      	ldr	r3, [pc, #148]	@ (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d20c      	bcs.n	8001bb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b22      	ldr	r3, [pc, #136]	@ (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9e:	4b20      	ldr	r3, [pc, #128]	@ (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e032      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bbc:	4b19      	ldr	r3, [pc, #100]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	4916      	ldr	r1, [pc, #88]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d009      	beq.n	8001bee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bda:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	490e      	ldr	r1, [pc, #56]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bee:	f000 f821 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	490a      	ldr	r1, [pc, #40]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	5ccb      	ldrb	r3, [r1, r3]
 8001c02:	fa22 f303 	lsr.w	r3, r2, r3
 8001c06:	4a09      	ldr	r2, [pc, #36]	@ (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c0a:	4b09      	ldr	r3, [pc, #36]	@ (8001c30 <HAL_RCC_ClockConfig+0x1c8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff f98a 	bl	8000f28 <HAL_InitTick>

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023c00 	.word	0x40023c00
 8001c24:	40023800 	.word	0x40023800
 8001c28:	080027b8 	.word	0x080027b8
 8001c2c:	20000004 	.word	0x20000004
 8001c30:	20000008 	.word	0x20000008

08001c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c38:	b094      	sub	sp, #80	@ 0x50
 8001c3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c40:	2300      	movs	r3, #0
 8001c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c44:	2300      	movs	r3, #0
 8001c46:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c4c:	4b79      	ldr	r3, [pc, #484]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 030c 	and.w	r3, r3, #12
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d00d      	beq.n	8001c74 <HAL_RCC_GetSysClockFreq+0x40>
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	f200 80e1 	bhi.w	8001e20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x34>
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d003      	beq.n	8001c6e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c66:	e0db      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c68:	4b73      	ldr	r3, [pc, #460]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001c6c:	e0db      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c6e:	4b73      	ldr	r3, [pc, #460]	@ (8001e3c <HAL_RCC_GetSysClockFreq+0x208>)
 8001c70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c72:	e0d8      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c74:	4b6f      	ldr	r3, [pc, #444]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c7c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c7e:	4b6d      	ldr	r3, [pc, #436]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d063      	beq.n	8001d52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8a:	4b6a      	ldr	r3, [pc, #424]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	099b      	lsrs	r3, r3, #6
 8001c90:	2200      	movs	r2, #0
 8001c92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ca2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ca6:	4622      	mov	r2, r4
 8001ca8:	462b      	mov	r3, r5
 8001caa:	f04f 0000 	mov.w	r0, #0
 8001cae:	f04f 0100 	mov.w	r1, #0
 8001cb2:	0159      	lsls	r1, r3, #5
 8001cb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cb8:	0150      	lsls	r0, r2, #5
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4621      	mov	r1, r4
 8001cc0:	1a51      	subs	r1, r2, r1
 8001cc2:	6139      	str	r1, [r7, #16]
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	eb63 0301 	sbc.w	r3, r3, r1
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cd8:	4659      	mov	r1, fp
 8001cda:	018b      	lsls	r3, r1, #6
 8001cdc:	4651      	mov	r1, sl
 8001cde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ce2:	4651      	mov	r1, sl
 8001ce4:	018a      	lsls	r2, r1, #6
 8001ce6:	4651      	mov	r1, sl
 8001ce8:	ebb2 0801 	subs.w	r8, r2, r1
 8001cec:	4659      	mov	r1, fp
 8001cee:	eb63 0901 	sbc.w	r9, r3, r1
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d06:	4690      	mov	r8, r2
 8001d08:	4699      	mov	r9, r3
 8001d0a:	4623      	mov	r3, r4
 8001d0c:	eb18 0303 	adds.w	r3, r8, r3
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	462b      	mov	r3, r5
 8001d14:	eb49 0303 	adc.w	r3, r9, r3
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d26:	4629      	mov	r1, r5
 8001d28:	024b      	lsls	r3, r1, #9
 8001d2a:	4621      	mov	r1, r4
 8001d2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d30:	4621      	mov	r1, r4
 8001d32:	024a      	lsls	r2, r1, #9
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d44:	f7fe fa94 	bl	8000270 <__aeabi_uldivmod>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d50:	e058      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d52:	4b38      	ldr	r3, [pc, #224]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	099b      	lsrs	r3, r3, #6
 8001d58:	2200      	movs	r2, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d62:	623b      	str	r3, [r7, #32]
 8001d64:	2300      	movs	r3, #0
 8001d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d6c:	4642      	mov	r2, r8
 8001d6e:	464b      	mov	r3, r9
 8001d70:	f04f 0000 	mov.w	r0, #0
 8001d74:	f04f 0100 	mov.w	r1, #0
 8001d78:	0159      	lsls	r1, r3, #5
 8001d7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d7e:	0150      	lsls	r0, r2, #5
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4641      	mov	r1, r8
 8001d86:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d8a:	4649      	mov	r1, r9
 8001d8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001da0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001da4:	ebb2 040a 	subs.w	r4, r2, sl
 8001da8:	eb63 050b 	sbc.w	r5, r3, fp
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	00eb      	lsls	r3, r5, #3
 8001db6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dba:	00e2      	lsls	r2, r4, #3
 8001dbc:	4614      	mov	r4, r2
 8001dbe:	461d      	mov	r5, r3
 8001dc0:	4643      	mov	r3, r8
 8001dc2:	18e3      	adds	r3, r4, r3
 8001dc4:	603b      	str	r3, [r7, #0]
 8001dc6:	464b      	mov	r3, r9
 8001dc8:	eb45 0303 	adc.w	r3, r5, r3
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dda:	4629      	mov	r1, r5
 8001ddc:	028b      	lsls	r3, r1, #10
 8001dde:	4621      	mov	r1, r4
 8001de0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001de4:	4621      	mov	r1, r4
 8001de6:	028a      	lsls	r2, r1, #10
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dee:	2200      	movs	r2, #0
 8001df0:	61bb      	str	r3, [r7, #24]
 8001df2:	61fa      	str	r2, [r7, #28]
 8001df4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001df8:	f7fe fa3a 	bl	8000270 <__aeabi_uldivmod>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4613      	mov	r3, r2
 8001e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e04:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	0c1b      	lsrs	r3, r3, #16
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001e14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e1e:	e002      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e20:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3750      	adds	r7, #80	@ 0x50
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800
 8001e38:	00f42400 	.word	0x00f42400
 8001e3c:	007a1200 	.word	0x007a1200

08001e40 <siprintf>:
 8001e40:	b40e      	push	{r1, r2, r3}
 8001e42:	b500      	push	{lr}
 8001e44:	b09c      	sub	sp, #112	@ 0x70
 8001e46:	ab1d      	add	r3, sp, #116	@ 0x74
 8001e48:	9002      	str	r0, [sp, #8]
 8001e4a:	9006      	str	r0, [sp, #24]
 8001e4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001e50:	4809      	ldr	r0, [pc, #36]	@ (8001e78 <siprintf+0x38>)
 8001e52:	9107      	str	r1, [sp, #28]
 8001e54:	9104      	str	r1, [sp, #16]
 8001e56:	4909      	ldr	r1, [pc, #36]	@ (8001e7c <siprintf+0x3c>)
 8001e58:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e5c:	9105      	str	r1, [sp, #20]
 8001e5e:	6800      	ldr	r0, [r0, #0]
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	a902      	add	r1, sp, #8
 8001e64:	f000 f994 	bl	8002190 <_svfiprintf_r>
 8001e68:	9b02      	ldr	r3, [sp, #8]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
 8001e6e:	b01c      	add	sp, #112	@ 0x70
 8001e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e74:	b003      	add	sp, #12
 8001e76:	4770      	bx	lr
 8001e78:	20000010 	.word	0x20000010
 8001e7c:	ffff0208 	.word	0xffff0208

08001e80 <memset>:
 8001e80:	4402      	add	r2, r0
 8001e82:	4603      	mov	r3, r0
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d100      	bne.n	8001e8a <memset+0xa>
 8001e88:	4770      	bx	lr
 8001e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e8e:	e7f9      	b.n	8001e84 <memset+0x4>

08001e90 <__errno>:
 8001e90:	4b01      	ldr	r3, [pc, #4]	@ (8001e98 <__errno+0x8>)
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000010 	.word	0x20000010

08001e9c <__libc_init_array>:
 8001e9c:	b570      	push	{r4, r5, r6, lr}
 8001e9e:	4d0d      	ldr	r5, [pc, #52]	@ (8001ed4 <__libc_init_array+0x38>)
 8001ea0:	4c0d      	ldr	r4, [pc, #52]	@ (8001ed8 <__libc_init_array+0x3c>)
 8001ea2:	1b64      	subs	r4, r4, r5
 8001ea4:	10a4      	asrs	r4, r4, #2
 8001ea6:	2600      	movs	r6, #0
 8001ea8:	42a6      	cmp	r6, r4
 8001eaa:	d109      	bne.n	8001ec0 <__libc_init_array+0x24>
 8001eac:	4d0b      	ldr	r5, [pc, #44]	@ (8001edc <__libc_init_array+0x40>)
 8001eae:	4c0c      	ldr	r4, [pc, #48]	@ (8001ee0 <__libc_init_array+0x44>)
 8001eb0:	f000 fc66 	bl	8002780 <_init>
 8001eb4:	1b64      	subs	r4, r4, r5
 8001eb6:	10a4      	asrs	r4, r4, #2
 8001eb8:	2600      	movs	r6, #0
 8001eba:	42a6      	cmp	r6, r4
 8001ebc:	d105      	bne.n	8001eca <__libc_init_array+0x2e>
 8001ebe:	bd70      	pop	{r4, r5, r6, pc}
 8001ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ec4:	4798      	blx	r3
 8001ec6:	3601      	adds	r6, #1
 8001ec8:	e7ee      	b.n	8001ea8 <__libc_init_array+0xc>
 8001eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ece:	4798      	blx	r3
 8001ed0:	3601      	adds	r6, #1
 8001ed2:	e7f2      	b.n	8001eba <__libc_init_array+0x1e>
 8001ed4:	08002804 	.word	0x08002804
 8001ed8:	08002804 	.word	0x08002804
 8001edc:	08002804 	.word	0x08002804
 8001ee0:	08002808 	.word	0x08002808

08001ee4 <__retarget_lock_acquire_recursive>:
 8001ee4:	4770      	bx	lr

08001ee6 <__retarget_lock_release_recursive>:
 8001ee6:	4770      	bx	lr

08001ee8 <_free_r>:
 8001ee8:	b538      	push	{r3, r4, r5, lr}
 8001eea:	4605      	mov	r5, r0
 8001eec:	2900      	cmp	r1, #0
 8001eee:	d041      	beq.n	8001f74 <_free_r+0x8c>
 8001ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ef4:	1f0c      	subs	r4, r1, #4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	bfb8      	it	lt
 8001efa:	18e4      	addlt	r4, r4, r3
 8001efc:	f000 f8e0 	bl	80020c0 <__malloc_lock>
 8001f00:	4a1d      	ldr	r2, [pc, #116]	@ (8001f78 <_free_r+0x90>)
 8001f02:	6813      	ldr	r3, [r2, #0]
 8001f04:	b933      	cbnz	r3, 8001f14 <_free_r+0x2c>
 8001f06:	6063      	str	r3, [r4, #4]
 8001f08:	6014      	str	r4, [r2, #0]
 8001f0a:	4628      	mov	r0, r5
 8001f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f10:	f000 b8dc 	b.w	80020cc <__malloc_unlock>
 8001f14:	42a3      	cmp	r3, r4
 8001f16:	d908      	bls.n	8001f2a <_free_r+0x42>
 8001f18:	6820      	ldr	r0, [r4, #0]
 8001f1a:	1821      	adds	r1, r4, r0
 8001f1c:	428b      	cmp	r3, r1
 8001f1e:	bf01      	itttt	eq
 8001f20:	6819      	ldreq	r1, [r3, #0]
 8001f22:	685b      	ldreq	r3, [r3, #4]
 8001f24:	1809      	addeq	r1, r1, r0
 8001f26:	6021      	streq	r1, [r4, #0]
 8001f28:	e7ed      	b.n	8001f06 <_free_r+0x1e>
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	b10b      	cbz	r3, 8001f34 <_free_r+0x4c>
 8001f30:	42a3      	cmp	r3, r4
 8001f32:	d9fa      	bls.n	8001f2a <_free_r+0x42>
 8001f34:	6811      	ldr	r1, [r2, #0]
 8001f36:	1850      	adds	r0, r2, r1
 8001f38:	42a0      	cmp	r0, r4
 8001f3a:	d10b      	bne.n	8001f54 <_free_r+0x6c>
 8001f3c:	6820      	ldr	r0, [r4, #0]
 8001f3e:	4401      	add	r1, r0
 8001f40:	1850      	adds	r0, r2, r1
 8001f42:	4283      	cmp	r3, r0
 8001f44:	6011      	str	r1, [r2, #0]
 8001f46:	d1e0      	bne.n	8001f0a <_free_r+0x22>
 8001f48:	6818      	ldr	r0, [r3, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	6053      	str	r3, [r2, #4]
 8001f4e:	4408      	add	r0, r1
 8001f50:	6010      	str	r0, [r2, #0]
 8001f52:	e7da      	b.n	8001f0a <_free_r+0x22>
 8001f54:	d902      	bls.n	8001f5c <_free_r+0x74>
 8001f56:	230c      	movs	r3, #12
 8001f58:	602b      	str	r3, [r5, #0]
 8001f5a:	e7d6      	b.n	8001f0a <_free_r+0x22>
 8001f5c:	6820      	ldr	r0, [r4, #0]
 8001f5e:	1821      	adds	r1, r4, r0
 8001f60:	428b      	cmp	r3, r1
 8001f62:	bf04      	itt	eq
 8001f64:	6819      	ldreq	r1, [r3, #0]
 8001f66:	685b      	ldreq	r3, [r3, #4]
 8001f68:	6063      	str	r3, [r4, #4]
 8001f6a:	bf04      	itt	eq
 8001f6c:	1809      	addeq	r1, r1, r0
 8001f6e:	6021      	streq	r1, [r4, #0]
 8001f70:	6054      	str	r4, [r2, #4]
 8001f72:	e7ca      	b.n	8001f0a <_free_r+0x22>
 8001f74:	bd38      	pop	{r3, r4, r5, pc}
 8001f76:	bf00      	nop
 8001f78:	200001cc 	.word	0x200001cc

08001f7c <sbrk_aligned>:
 8001f7c:	b570      	push	{r4, r5, r6, lr}
 8001f7e:	4e0f      	ldr	r6, [pc, #60]	@ (8001fbc <sbrk_aligned+0x40>)
 8001f80:	460c      	mov	r4, r1
 8001f82:	6831      	ldr	r1, [r6, #0]
 8001f84:	4605      	mov	r5, r0
 8001f86:	b911      	cbnz	r1, 8001f8e <sbrk_aligned+0x12>
 8001f88:	f000 fba6 	bl	80026d8 <_sbrk_r>
 8001f8c:	6030      	str	r0, [r6, #0]
 8001f8e:	4621      	mov	r1, r4
 8001f90:	4628      	mov	r0, r5
 8001f92:	f000 fba1 	bl	80026d8 <_sbrk_r>
 8001f96:	1c43      	adds	r3, r0, #1
 8001f98:	d103      	bne.n	8001fa2 <sbrk_aligned+0x26>
 8001f9a:	f04f 34ff 	mov.w	r4, #4294967295
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	bd70      	pop	{r4, r5, r6, pc}
 8001fa2:	1cc4      	adds	r4, r0, #3
 8001fa4:	f024 0403 	bic.w	r4, r4, #3
 8001fa8:	42a0      	cmp	r0, r4
 8001faa:	d0f8      	beq.n	8001f9e <sbrk_aligned+0x22>
 8001fac:	1a21      	subs	r1, r4, r0
 8001fae:	4628      	mov	r0, r5
 8001fb0:	f000 fb92 	bl	80026d8 <_sbrk_r>
 8001fb4:	3001      	adds	r0, #1
 8001fb6:	d1f2      	bne.n	8001f9e <sbrk_aligned+0x22>
 8001fb8:	e7ef      	b.n	8001f9a <sbrk_aligned+0x1e>
 8001fba:	bf00      	nop
 8001fbc:	200001c8 	.word	0x200001c8

08001fc0 <_malloc_r>:
 8001fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fc4:	1ccd      	adds	r5, r1, #3
 8001fc6:	f025 0503 	bic.w	r5, r5, #3
 8001fca:	3508      	adds	r5, #8
 8001fcc:	2d0c      	cmp	r5, #12
 8001fce:	bf38      	it	cc
 8001fd0:	250c      	movcc	r5, #12
 8001fd2:	2d00      	cmp	r5, #0
 8001fd4:	4606      	mov	r6, r0
 8001fd6:	db01      	blt.n	8001fdc <_malloc_r+0x1c>
 8001fd8:	42a9      	cmp	r1, r5
 8001fda:	d904      	bls.n	8001fe6 <_malloc_r+0x26>
 8001fdc:	230c      	movs	r3, #12
 8001fde:	6033      	str	r3, [r6, #0]
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fe6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80020bc <_malloc_r+0xfc>
 8001fea:	f000 f869 	bl	80020c0 <__malloc_lock>
 8001fee:	f8d8 3000 	ldr.w	r3, [r8]
 8001ff2:	461c      	mov	r4, r3
 8001ff4:	bb44      	cbnz	r4, 8002048 <_malloc_r+0x88>
 8001ff6:	4629      	mov	r1, r5
 8001ff8:	4630      	mov	r0, r6
 8001ffa:	f7ff ffbf 	bl	8001f7c <sbrk_aligned>
 8001ffe:	1c43      	adds	r3, r0, #1
 8002000:	4604      	mov	r4, r0
 8002002:	d158      	bne.n	80020b6 <_malloc_r+0xf6>
 8002004:	f8d8 4000 	ldr.w	r4, [r8]
 8002008:	4627      	mov	r7, r4
 800200a:	2f00      	cmp	r7, #0
 800200c:	d143      	bne.n	8002096 <_malloc_r+0xd6>
 800200e:	2c00      	cmp	r4, #0
 8002010:	d04b      	beq.n	80020aa <_malloc_r+0xea>
 8002012:	6823      	ldr	r3, [r4, #0]
 8002014:	4639      	mov	r1, r7
 8002016:	4630      	mov	r0, r6
 8002018:	eb04 0903 	add.w	r9, r4, r3
 800201c:	f000 fb5c 	bl	80026d8 <_sbrk_r>
 8002020:	4581      	cmp	r9, r0
 8002022:	d142      	bne.n	80020aa <_malloc_r+0xea>
 8002024:	6821      	ldr	r1, [r4, #0]
 8002026:	1a6d      	subs	r5, r5, r1
 8002028:	4629      	mov	r1, r5
 800202a:	4630      	mov	r0, r6
 800202c:	f7ff ffa6 	bl	8001f7c <sbrk_aligned>
 8002030:	3001      	adds	r0, #1
 8002032:	d03a      	beq.n	80020aa <_malloc_r+0xea>
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	442b      	add	r3, r5
 8002038:	6023      	str	r3, [r4, #0]
 800203a:	f8d8 3000 	ldr.w	r3, [r8]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	bb62      	cbnz	r2, 800209c <_malloc_r+0xdc>
 8002042:	f8c8 7000 	str.w	r7, [r8]
 8002046:	e00f      	b.n	8002068 <_malloc_r+0xa8>
 8002048:	6822      	ldr	r2, [r4, #0]
 800204a:	1b52      	subs	r2, r2, r5
 800204c:	d420      	bmi.n	8002090 <_malloc_r+0xd0>
 800204e:	2a0b      	cmp	r2, #11
 8002050:	d917      	bls.n	8002082 <_malloc_r+0xc2>
 8002052:	1961      	adds	r1, r4, r5
 8002054:	42a3      	cmp	r3, r4
 8002056:	6025      	str	r5, [r4, #0]
 8002058:	bf18      	it	ne
 800205a:	6059      	strne	r1, [r3, #4]
 800205c:	6863      	ldr	r3, [r4, #4]
 800205e:	bf08      	it	eq
 8002060:	f8c8 1000 	streq.w	r1, [r8]
 8002064:	5162      	str	r2, [r4, r5]
 8002066:	604b      	str	r3, [r1, #4]
 8002068:	4630      	mov	r0, r6
 800206a:	f000 f82f 	bl	80020cc <__malloc_unlock>
 800206e:	f104 000b 	add.w	r0, r4, #11
 8002072:	1d23      	adds	r3, r4, #4
 8002074:	f020 0007 	bic.w	r0, r0, #7
 8002078:	1ac2      	subs	r2, r0, r3
 800207a:	bf1c      	itt	ne
 800207c:	1a1b      	subne	r3, r3, r0
 800207e:	50a3      	strne	r3, [r4, r2]
 8002080:	e7af      	b.n	8001fe2 <_malloc_r+0x22>
 8002082:	6862      	ldr	r2, [r4, #4]
 8002084:	42a3      	cmp	r3, r4
 8002086:	bf0c      	ite	eq
 8002088:	f8c8 2000 	streq.w	r2, [r8]
 800208c:	605a      	strne	r2, [r3, #4]
 800208e:	e7eb      	b.n	8002068 <_malloc_r+0xa8>
 8002090:	4623      	mov	r3, r4
 8002092:	6864      	ldr	r4, [r4, #4]
 8002094:	e7ae      	b.n	8001ff4 <_malloc_r+0x34>
 8002096:	463c      	mov	r4, r7
 8002098:	687f      	ldr	r7, [r7, #4]
 800209a:	e7b6      	b.n	800200a <_malloc_r+0x4a>
 800209c:	461a      	mov	r2, r3
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	42a3      	cmp	r3, r4
 80020a2:	d1fb      	bne.n	800209c <_malloc_r+0xdc>
 80020a4:	2300      	movs	r3, #0
 80020a6:	6053      	str	r3, [r2, #4]
 80020a8:	e7de      	b.n	8002068 <_malloc_r+0xa8>
 80020aa:	230c      	movs	r3, #12
 80020ac:	6033      	str	r3, [r6, #0]
 80020ae:	4630      	mov	r0, r6
 80020b0:	f000 f80c 	bl	80020cc <__malloc_unlock>
 80020b4:	e794      	b.n	8001fe0 <_malloc_r+0x20>
 80020b6:	6005      	str	r5, [r0, #0]
 80020b8:	e7d6      	b.n	8002068 <_malloc_r+0xa8>
 80020ba:	bf00      	nop
 80020bc:	200001cc 	.word	0x200001cc

080020c0 <__malloc_lock>:
 80020c0:	4801      	ldr	r0, [pc, #4]	@ (80020c8 <__malloc_lock+0x8>)
 80020c2:	f7ff bf0f 	b.w	8001ee4 <__retarget_lock_acquire_recursive>
 80020c6:	bf00      	nop
 80020c8:	200001c4 	.word	0x200001c4

080020cc <__malloc_unlock>:
 80020cc:	4801      	ldr	r0, [pc, #4]	@ (80020d4 <__malloc_unlock+0x8>)
 80020ce:	f7ff bf0a 	b.w	8001ee6 <__retarget_lock_release_recursive>
 80020d2:	bf00      	nop
 80020d4:	200001c4 	.word	0x200001c4

080020d8 <__ssputs_r>:
 80020d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020dc:	688e      	ldr	r6, [r1, #8]
 80020de:	461f      	mov	r7, r3
 80020e0:	42be      	cmp	r6, r7
 80020e2:	680b      	ldr	r3, [r1, #0]
 80020e4:	4682      	mov	sl, r0
 80020e6:	460c      	mov	r4, r1
 80020e8:	4690      	mov	r8, r2
 80020ea:	d82d      	bhi.n	8002148 <__ssputs_r+0x70>
 80020ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80020f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80020f4:	d026      	beq.n	8002144 <__ssputs_r+0x6c>
 80020f6:	6965      	ldr	r5, [r4, #20]
 80020f8:	6909      	ldr	r1, [r1, #16]
 80020fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80020fe:	eba3 0901 	sub.w	r9, r3, r1
 8002102:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002106:	1c7b      	adds	r3, r7, #1
 8002108:	444b      	add	r3, r9
 800210a:	106d      	asrs	r5, r5, #1
 800210c:	429d      	cmp	r5, r3
 800210e:	bf38      	it	cc
 8002110:	461d      	movcc	r5, r3
 8002112:	0553      	lsls	r3, r2, #21
 8002114:	d527      	bpl.n	8002166 <__ssputs_r+0x8e>
 8002116:	4629      	mov	r1, r5
 8002118:	f7ff ff52 	bl	8001fc0 <_malloc_r>
 800211c:	4606      	mov	r6, r0
 800211e:	b360      	cbz	r0, 800217a <__ssputs_r+0xa2>
 8002120:	6921      	ldr	r1, [r4, #16]
 8002122:	464a      	mov	r2, r9
 8002124:	f000 fae8 	bl	80026f8 <memcpy>
 8002128:	89a3      	ldrh	r3, [r4, #12]
 800212a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800212e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002132:	81a3      	strh	r3, [r4, #12]
 8002134:	6126      	str	r6, [r4, #16]
 8002136:	6165      	str	r5, [r4, #20]
 8002138:	444e      	add	r6, r9
 800213a:	eba5 0509 	sub.w	r5, r5, r9
 800213e:	6026      	str	r6, [r4, #0]
 8002140:	60a5      	str	r5, [r4, #8]
 8002142:	463e      	mov	r6, r7
 8002144:	42be      	cmp	r6, r7
 8002146:	d900      	bls.n	800214a <__ssputs_r+0x72>
 8002148:	463e      	mov	r6, r7
 800214a:	6820      	ldr	r0, [r4, #0]
 800214c:	4632      	mov	r2, r6
 800214e:	4641      	mov	r1, r8
 8002150:	f000 faa8 	bl	80026a4 <memmove>
 8002154:	68a3      	ldr	r3, [r4, #8]
 8002156:	1b9b      	subs	r3, r3, r6
 8002158:	60a3      	str	r3, [r4, #8]
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	4433      	add	r3, r6
 800215e:	6023      	str	r3, [r4, #0]
 8002160:	2000      	movs	r0, #0
 8002162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002166:	462a      	mov	r2, r5
 8002168:	f000 fad4 	bl	8002714 <_realloc_r>
 800216c:	4606      	mov	r6, r0
 800216e:	2800      	cmp	r0, #0
 8002170:	d1e0      	bne.n	8002134 <__ssputs_r+0x5c>
 8002172:	6921      	ldr	r1, [r4, #16]
 8002174:	4650      	mov	r0, sl
 8002176:	f7ff feb7 	bl	8001ee8 <_free_r>
 800217a:	230c      	movs	r3, #12
 800217c:	f8ca 3000 	str.w	r3, [sl]
 8002180:	89a3      	ldrh	r3, [r4, #12]
 8002182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002186:	81a3      	strh	r3, [r4, #12]
 8002188:	f04f 30ff 	mov.w	r0, #4294967295
 800218c:	e7e9      	b.n	8002162 <__ssputs_r+0x8a>
	...

08002190 <_svfiprintf_r>:
 8002190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002194:	4698      	mov	r8, r3
 8002196:	898b      	ldrh	r3, [r1, #12]
 8002198:	061b      	lsls	r3, r3, #24
 800219a:	b09d      	sub	sp, #116	@ 0x74
 800219c:	4607      	mov	r7, r0
 800219e:	460d      	mov	r5, r1
 80021a0:	4614      	mov	r4, r2
 80021a2:	d510      	bpl.n	80021c6 <_svfiprintf_r+0x36>
 80021a4:	690b      	ldr	r3, [r1, #16]
 80021a6:	b973      	cbnz	r3, 80021c6 <_svfiprintf_r+0x36>
 80021a8:	2140      	movs	r1, #64	@ 0x40
 80021aa:	f7ff ff09 	bl	8001fc0 <_malloc_r>
 80021ae:	6028      	str	r0, [r5, #0]
 80021b0:	6128      	str	r0, [r5, #16]
 80021b2:	b930      	cbnz	r0, 80021c2 <_svfiprintf_r+0x32>
 80021b4:	230c      	movs	r3, #12
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295
 80021bc:	b01d      	add	sp, #116	@ 0x74
 80021be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021c2:	2340      	movs	r3, #64	@ 0x40
 80021c4:	616b      	str	r3, [r5, #20]
 80021c6:	2300      	movs	r3, #0
 80021c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80021ca:	2320      	movs	r3, #32
 80021cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80021d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80021d4:	2330      	movs	r3, #48	@ 0x30
 80021d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002374 <_svfiprintf_r+0x1e4>
 80021da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80021de:	f04f 0901 	mov.w	r9, #1
 80021e2:	4623      	mov	r3, r4
 80021e4:	469a      	mov	sl, r3
 80021e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80021ea:	b10a      	cbz	r2, 80021f0 <_svfiprintf_r+0x60>
 80021ec:	2a25      	cmp	r2, #37	@ 0x25
 80021ee:	d1f9      	bne.n	80021e4 <_svfiprintf_r+0x54>
 80021f0:	ebba 0b04 	subs.w	fp, sl, r4
 80021f4:	d00b      	beq.n	800220e <_svfiprintf_r+0x7e>
 80021f6:	465b      	mov	r3, fp
 80021f8:	4622      	mov	r2, r4
 80021fa:	4629      	mov	r1, r5
 80021fc:	4638      	mov	r0, r7
 80021fe:	f7ff ff6b 	bl	80020d8 <__ssputs_r>
 8002202:	3001      	adds	r0, #1
 8002204:	f000 80a7 	beq.w	8002356 <_svfiprintf_r+0x1c6>
 8002208:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800220a:	445a      	add	r2, fp
 800220c:	9209      	str	r2, [sp, #36]	@ 0x24
 800220e:	f89a 3000 	ldrb.w	r3, [sl]
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 809f 	beq.w	8002356 <_svfiprintf_r+0x1c6>
 8002218:	2300      	movs	r3, #0
 800221a:	f04f 32ff 	mov.w	r2, #4294967295
 800221e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002222:	f10a 0a01 	add.w	sl, sl, #1
 8002226:	9304      	str	r3, [sp, #16]
 8002228:	9307      	str	r3, [sp, #28]
 800222a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800222e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002230:	4654      	mov	r4, sl
 8002232:	2205      	movs	r2, #5
 8002234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002238:	484e      	ldr	r0, [pc, #312]	@ (8002374 <_svfiprintf_r+0x1e4>)
 800223a:	f7fd ffc9 	bl	80001d0 <memchr>
 800223e:	9a04      	ldr	r2, [sp, #16]
 8002240:	b9d8      	cbnz	r0, 800227a <_svfiprintf_r+0xea>
 8002242:	06d0      	lsls	r0, r2, #27
 8002244:	bf44      	itt	mi
 8002246:	2320      	movmi	r3, #32
 8002248:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800224c:	0711      	lsls	r1, r2, #28
 800224e:	bf44      	itt	mi
 8002250:	232b      	movmi	r3, #43	@ 0x2b
 8002252:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002256:	f89a 3000 	ldrb.w	r3, [sl]
 800225a:	2b2a      	cmp	r3, #42	@ 0x2a
 800225c:	d015      	beq.n	800228a <_svfiprintf_r+0xfa>
 800225e:	9a07      	ldr	r2, [sp, #28]
 8002260:	4654      	mov	r4, sl
 8002262:	2000      	movs	r0, #0
 8002264:	f04f 0c0a 	mov.w	ip, #10
 8002268:	4621      	mov	r1, r4
 800226a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800226e:	3b30      	subs	r3, #48	@ 0x30
 8002270:	2b09      	cmp	r3, #9
 8002272:	d94b      	bls.n	800230c <_svfiprintf_r+0x17c>
 8002274:	b1b0      	cbz	r0, 80022a4 <_svfiprintf_r+0x114>
 8002276:	9207      	str	r2, [sp, #28]
 8002278:	e014      	b.n	80022a4 <_svfiprintf_r+0x114>
 800227a:	eba0 0308 	sub.w	r3, r0, r8
 800227e:	fa09 f303 	lsl.w	r3, r9, r3
 8002282:	4313      	orrs	r3, r2
 8002284:	9304      	str	r3, [sp, #16]
 8002286:	46a2      	mov	sl, r4
 8002288:	e7d2      	b.n	8002230 <_svfiprintf_r+0xa0>
 800228a:	9b03      	ldr	r3, [sp, #12]
 800228c:	1d19      	adds	r1, r3, #4
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	9103      	str	r1, [sp, #12]
 8002292:	2b00      	cmp	r3, #0
 8002294:	bfbb      	ittet	lt
 8002296:	425b      	neglt	r3, r3
 8002298:	f042 0202 	orrlt.w	r2, r2, #2
 800229c:	9307      	strge	r3, [sp, #28]
 800229e:	9307      	strlt	r3, [sp, #28]
 80022a0:	bfb8      	it	lt
 80022a2:	9204      	strlt	r2, [sp, #16]
 80022a4:	7823      	ldrb	r3, [r4, #0]
 80022a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80022a8:	d10a      	bne.n	80022c0 <_svfiprintf_r+0x130>
 80022aa:	7863      	ldrb	r3, [r4, #1]
 80022ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80022ae:	d132      	bne.n	8002316 <_svfiprintf_r+0x186>
 80022b0:	9b03      	ldr	r3, [sp, #12]
 80022b2:	1d1a      	adds	r2, r3, #4
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	9203      	str	r2, [sp, #12]
 80022b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80022bc:	3402      	adds	r4, #2
 80022be:	9305      	str	r3, [sp, #20]
 80022c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002384 <_svfiprintf_r+0x1f4>
 80022c4:	7821      	ldrb	r1, [r4, #0]
 80022c6:	2203      	movs	r2, #3
 80022c8:	4650      	mov	r0, sl
 80022ca:	f7fd ff81 	bl	80001d0 <memchr>
 80022ce:	b138      	cbz	r0, 80022e0 <_svfiprintf_r+0x150>
 80022d0:	9b04      	ldr	r3, [sp, #16]
 80022d2:	eba0 000a 	sub.w	r0, r0, sl
 80022d6:	2240      	movs	r2, #64	@ 0x40
 80022d8:	4082      	lsls	r2, r0
 80022da:	4313      	orrs	r3, r2
 80022dc:	3401      	adds	r4, #1
 80022de:	9304      	str	r3, [sp, #16]
 80022e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022e4:	4824      	ldr	r0, [pc, #144]	@ (8002378 <_svfiprintf_r+0x1e8>)
 80022e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80022ea:	2206      	movs	r2, #6
 80022ec:	f7fd ff70 	bl	80001d0 <memchr>
 80022f0:	2800      	cmp	r0, #0
 80022f2:	d036      	beq.n	8002362 <_svfiprintf_r+0x1d2>
 80022f4:	4b21      	ldr	r3, [pc, #132]	@ (800237c <_svfiprintf_r+0x1ec>)
 80022f6:	bb1b      	cbnz	r3, 8002340 <_svfiprintf_r+0x1b0>
 80022f8:	9b03      	ldr	r3, [sp, #12]
 80022fa:	3307      	adds	r3, #7
 80022fc:	f023 0307 	bic.w	r3, r3, #7
 8002300:	3308      	adds	r3, #8
 8002302:	9303      	str	r3, [sp, #12]
 8002304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002306:	4433      	add	r3, r6
 8002308:	9309      	str	r3, [sp, #36]	@ 0x24
 800230a:	e76a      	b.n	80021e2 <_svfiprintf_r+0x52>
 800230c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002310:	460c      	mov	r4, r1
 8002312:	2001      	movs	r0, #1
 8002314:	e7a8      	b.n	8002268 <_svfiprintf_r+0xd8>
 8002316:	2300      	movs	r3, #0
 8002318:	3401      	adds	r4, #1
 800231a:	9305      	str	r3, [sp, #20]
 800231c:	4619      	mov	r1, r3
 800231e:	f04f 0c0a 	mov.w	ip, #10
 8002322:	4620      	mov	r0, r4
 8002324:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002328:	3a30      	subs	r2, #48	@ 0x30
 800232a:	2a09      	cmp	r2, #9
 800232c:	d903      	bls.n	8002336 <_svfiprintf_r+0x1a6>
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0c6      	beq.n	80022c0 <_svfiprintf_r+0x130>
 8002332:	9105      	str	r1, [sp, #20]
 8002334:	e7c4      	b.n	80022c0 <_svfiprintf_r+0x130>
 8002336:	fb0c 2101 	mla	r1, ip, r1, r2
 800233a:	4604      	mov	r4, r0
 800233c:	2301      	movs	r3, #1
 800233e:	e7f0      	b.n	8002322 <_svfiprintf_r+0x192>
 8002340:	ab03      	add	r3, sp, #12
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	462a      	mov	r2, r5
 8002346:	4b0e      	ldr	r3, [pc, #56]	@ (8002380 <_svfiprintf_r+0x1f0>)
 8002348:	a904      	add	r1, sp, #16
 800234a:	4638      	mov	r0, r7
 800234c:	f3af 8000 	nop.w
 8002350:	1c42      	adds	r2, r0, #1
 8002352:	4606      	mov	r6, r0
 8002354:	d1d6      	bne.n	8002304 <_svfiprintf_r+0x174>
 8002356:	89ab      	ldrh	r3, [r5, #12]
 8002358:	065b      	lsls	r3, r3, #25
 800235a:	f53f af2d 	bmi.w	80021b8 <_svfiprintf_r+0x28>
 800235e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002360:	e72c      	b.n	80021bc <_svfiprintf_r+0x2c>
 8002362:	ab03      	add	r3, sp, #12
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	462a      	mov	r2, r5
 8002368:	4b05      	ldr	r3, [pc, #20]	@ (8002380 <_svfiprintf_r+0x1f0>)
 800236a:	a904      	add	r1, sp, #16
 800236c:	4638      	mov	r0, r7
 800236e:	f000 f879 	bl	8002464 <_printf_i>
 8002372:	e7ed      	b.n	8002350 <_svfiprintf_r+0x1c0>
 8002374:	080027c8 	.word	0x080027c8
 8002378:	080027d2 	.word	0x080027d2
 800237c:	00000000 	.word	0x00000000
 8002380:	080020d9 	.word	0x080020d9
 8002384:	080027ce 	.word	0x080027ce

08002388 <_printf_common>:
 8002388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800238c:	4616      	mov	r6, r2
 800238e:	4698      	mov	r8, r3
 8002390:	688a      	ldr	r2, [r1, #8]
 8002392:	690b      	ldr	r3, [r1, #16]
 8002394:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002398:	4293      	cmp	r3, r2
 800239a:	bfb8      	it	lt
 800239c:	4613      	movlt	r3, r2
 800239e:	6033      	str	r3, [r6, #0]
 80023a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80023a4:	4607      	mov	r7, r0
 80023a6:	460c      	mov	r4, r1
 80023a8:	b10a      	cbz	r2, 80023ae <_printf_common+0x26>
 80023aa:	3301      	adds	r3, #1
 80023ac:	6033      	str	r3, [r6, #0]
 80023ae:	6823      	ldr	r3, [r4, #0]
 80023b0:	0699      	lsls	r1, r3, #26
 80023b2:	bf42      	ittt	mi
 80023b4:	6833      	ldrmi	r3, [r6, #0]
 80023b6:	3302      	addmi	r3, #2
 80023b8:	6033      	strmi	r3, [r6, #0]
 80023ba:	6825      	ldr	r5, [r4, #0]
 80023bc:	f015 0506 	ands.w	r5, r5, #6
 80023c0:	d106      	bne.n	80023d0 <_printf_common+0x48>
 80023c2:	f104 0a19 	add.w	sl, r4, #25
 80023c6:	68e3      	ldr	r3, [r4, #12]
 80023c8:	6832      	ldr	r2, [r6, #0]
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	42ab      	cmp	r3, r5
 80023ce:	dc26      	bgt.n	800241e <_printf_common+0x96>
 80023d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80023d4:	6822      	ldr	r2, [r4, #0]
 80023d6:	3b00      	subs	r3, #0
 80023d8:	bf18      	it	ne
 80023da:	2301      	movne	r3, #1
 80023dc:	0692      	lsls	r2, r2, #26
 80023de:	d42b      	bmi.n	8002438 <_printf_common+0xb0>
 80023e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80023e4:	4641      	mov	r1, r8
 80023e6:	4638      	mov	r0, r7
 80023e8:	47c8      	blx	r9
 80023ea:	3001      	adds	r0, #1
 80023ec:	d01e      	beq.n	800242c <_printf_common+0xa4>
 80023ee:	6823      	ldr	r3, [r4, #0]
 80023f0:	6922      	ldr	r2, [r4, #16]
 80023f2:	f003 0306 	and.w	r3, r3, #6
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	bf02      	ittt	eq
 80023fa:	68e5      	ldreq	r5, [r4, #12]
 80023fc:	6833      	ldreq	r3, [r6, #0]
 80023fe:	1aed      	subeq	r5, r5, r3
 8002400:	68a3      	ldr	r3, [r4, #8]
 8002402:	bf0c      	ite	eq
 8002404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002408:	2500      	movne	r5, #0
 800240a:	4293      	cmp	r3, r2
 800240c:	bfc4      	itt	gt
 800240e:	1a9b      	subgt	r3, r3, r2
 8002410:	18ed      	addgt	r5, r5, r3
 8002412:	2600      	movs	r6, #0
 8002414:	341a      	adds	r4, #26
 8002416:	42b5      	cmp	r5, r6
 8002418:	d11a      	bne.n	8002450 <_printf_common+0xc8>
 800241a:	2000      	movs	r0, #0
 800241c:	e008      	b.n	8002430 <_printf_common+0xa8>
 800241e:	2301      	movs	r3, #1
 8002420:	4652      	mov	r2, sl
 8002422:	4641      	mov	r1, r8
 8002424:	4638      	mov	r0, r7
 8002426:	47c8      	blx	r9
 8002428:	3001      	adds	r0, #1
 800242a:	d103      	bne.n	8002434 <_printf_common+0xac>
 800242c:	f04f 30ff 	mov.w	r0, #4294967295
 8002430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002434:	3501      	adds	r5, #1
 8002436:	e7c6      	b.n	80023c6 <_printf_common+0x3e>
 8002438:	18e1      	adds	r1, r4, r3
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	2030      	movs	r0, #48	@ 0x30
 800243e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002442:	4422      	add	r2, r4
 8002444:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002448:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800244c:	3302      	adds	r3, #2
 800244e:	e7c7      	b.n	80023e0 <_printf_common+0x58>
 8002450:	2301      	movs	r3, #1
 8002452:	4622      	mov	r2, r4
 8002454:	4641      	mov	r1, r8
 8002456:	4638      	mov	r0, r7
 8002458:	47c8      	blx	r9
 800245a:	3001      	adds	r0, #1
 800245c:	d0e6      	beq.n	800242c <_printf_common+0xa4>
 800245e:	3601      	adds	r6, #1
 8002460:	e7d9      	b.n	8002416 <_printf_common+0x8e>
	...

08002464 <_printf_i>:
 8002464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002468:	7e0f      	ldrb	r7, [r1, #24]
 800246a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800246c:	2f78      	cmp	r7, #120	@ 0x78
 800246e:	4691      	mov	r9, r2
 8002470:	4680      	mov	r8, r0
 8002472:	460c      	mov	r4, r1
 8002474:	469a      	mov	sl, r3
 8002476:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800247a:	d807      	bhi.n	800248c <_printf_i+0x28>
 800247c:	2f62      	cmp	r7, #98	@ 0x62
 800247e:	d80a      	bhi.n	8002496 <_printf_i+0x32>
 8002480:	2f00      	cmp	r7, #0
 8002482:	f000 80d2 	beq.w	800262a <_printf_i+0x1c6>
 8002486:	2f58      	cmp	r7, #88	@ 0x58
 8002488:	f000 80b9 	beq.w	80025fe <_printf_i+0x19a>
 800248c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002490:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002494:	e03a      	b.n	800250c <_printf_i+0xa8>
 8002496:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800249a:	2b15      	cmp	r3, #21
 800249c:	d8f6      	bhi.n	800248c <_printf_i+0x28>
 800249e:	a101      	add	r1, pc, #4	@ (adr r1, 80024a4 <_printf_i+0x40>)
 80024a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80024a4:	080024fd 	.word	0x080024fd
 80024a8:	08002511 	.word	0x08002511
 80024ac:	0800248d 	.word	0x0800248d
 80024b0:	0800248d 	.word	0x0800248d
 80024b4:	0800248d 	.word	0x0800248d
 80024b8:	0800248d 	.word	0x0800248d
 80024bc:	08002511 	.word	0x08002511
 80024c0:	0800248d 	.word	0x0800248d
 80024c4:	0800248d 	.word	0x0800248d
 80024c8:	0800248d 	.word	0x0800248d
 80024cc:	0800248d 	.word	0x0800248d
 80024d0:	08002611 	.word	0x08002611
 80024d4:	0800253b 	.word	0x0800253b
 80024d8:	080025cb 	.word	0x080025cb
 80024dc:	0800248d 	.word	0x0800248d
 80024e0:	0800248d 	.word	0x0800248d
 80024e4:	08002633 	.word	0x08002633
 80024e8:	0800248d 	.word	0x0800248d
 80024ec:	0800253b 	.word	0x0800253b
 80024f0:	0800248d 	.word	0x0800248d
 80024f4:	0800248d 	.word	0x0800248d
 80024f8:	080025d3 	.word	0x080025d3
 80024fc:	6833      	ldr	r3, [r6, #0]
 80024fe:	1d1a      	adds	r2, r3, #4
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6032      	str	r2, [r6, #0]
 8002504:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002508:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800250c:	2301      	movs	r3, #1
 800250e:	e09d      	b.n	800264c <_printf_i+0x1e8>
 8002510:	6833      	ldr	r3, [r6, #0]
 8002512:	6820      	ldr	r0, [r4, #0]
 8002514:	1d19      	adds	r1, r3, #4
 8002516:	6031      	str	r1, [r6, #0]
 8002518:	0606      	lsls	r6, r0, #24
 800251a:	d501      	bpl.n	8002520 <_printf_i+0xbc>
 800251c:	681d      	ldr	r5, [r3, #0]
 800251e:	e003      	b.n	8002528 <_printf_i+0xc4>
 8002520:	0645      	lsls	r5, r0, #25
 8002522:	d5fb      	bpl.n	800251c <_printf_i+0xb8>
 8002524:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002528:	2d00      	cmp	r5, #0
 800252a:	da03      	bge.n	8002534 <_printf_i+0xd0>
 800252c:	232d      	movs	r3, #45	@ 0x2d
 800252e:	426d      	negs	r5, r5
 8002530:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002534:	4859      	ldr	r0, [pc, #356]	@ (800269c <_printf_i+0x238>)
 8002536:	230a      	movs	r3, #10
 8002538:	e011      	b.n	800255e <_printf_i+0xfa>
 800253a:	6821      	ldr	r1, [r4, #0]
 800253c:	6833      	ldr	r3, [r6, #0]
 800253e:	0608      	lsls	r0, r1, #24
 8002540:	f853 5b04 	ldr.w	r5, [r3], #4
 8002544:	d402      	bmi.n	800254c <_printf_i+0xe8>
 8002546:	0649      	lsls	r1, r1, #25
 8002548:	bf48      	it	mi
 800254a:	b2ad      	uxthmi	r5, r5
 800254c:	2f6f      	cmp	r7, #111	@ 0x6f
 800254e:	4853      	ldr	r0, [pc, #332]	@ (800269c <_printf_i+0x238>)
 8002550:	6033      	str	r3, [r6, #0]
 8002552:	bf14      	ite	ne
 8002554:	230a      	movne	r3, #10
 8002556:	2308      	moveq	r3, #8
 8002558:	2100      	movs	r1, #0
 800255a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800255e:	6866      	ldr	r6, [r4, #4]
 8002560:	60a6      	str	r6, [r4, #8]
 8002562:	2e00      	cmp	r6, #0
 8002564:	bfa2      	ittt	ge
 8002566:	6821      	ldrge	r1, [r4, #0]
 8002568:	f021 0104 	bicge.w	r1, r1, #4
 800256c:	6021      	strge	r1, [r4, #0]
 800256e:	b90d      	cbnz	r5, 8002574 <_printf_i+0x110>
 8002570:	2e00      	cmp	r6, #0
 8002572:	d04b      	beq.n	800260c <_printf_i+0x1a8>
 8002574:	4616      	mov	r6, r2
 8002576:	fbb5 f1f3 	udiv	r1, r5, r3
 800257a:	fb03 5711 	mls	r7, r3, r1, r5
 800257e:	5dc7      	ldrb	r7, [r0, r7]
 8002580:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002584:	462f      	mov	r7, r5
 8002586:	42bb      	cmp	r3, r7
 8002588:	460d      	mov	r5, r1
 800258a:	d9f4      	bls.n	8002576 <_printf_i+0x112>
 800258c:	2b08      	cmp	r3, #8
 800258e:	d10b      	bne.n	80025a8 <_printf_i+0x144>
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	07df      	lsls	r7, r3, #31
 8002594:	d508      	bpl.n	80025a8 <_printf_i+0x144>
 8002596:	6923      	ldr	r3, [r4, #16]
 8002598:	6861      	ldr	r1, [r4, #4]
 800259a:	4299      	cmp	r1, r3
 800259c:	bfde      	ittt	le
 800259e:	2330      	movle	r3, #48	@ 0x30
 80025a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80025a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80025a8:	1b92      	subs	r2, r2, r6
 80025aa:	6122      	str	r2, [r4, #16]
 80025ac:	f8cd a000 	str.w	sl, [sp]
 80025b0:	464b      	mov	r3, r9
 80025b2:	aa03      	add	r2, sp, #12
 80025b4:	4621      	mov	r1, r4
 80025b6:	4640      	mov	r0, r8
 80025b8:	f7ff fee6 	bl	8002388 <_printf_common>
 80025bc:	3001      	adds	r0, #1
 80025be:	d14a      	bne.n	8002656 <_printf_i+0x1f2>
 80025c0:	f04f 30ff 	mov.w	r0, #4294967295
 80025c4:	b004      	add	sp, #16
 80025c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	f043 0320 	orr.w	r3, r3, #32
 80025d0:	6023      	str	r3, [r4, #0]
 80025d2:	4833      	ldr	r0, [pc, #204]	@ (80026a0 <_printf_i+0x23c>)
 80025d4:	2778      	movs	r7, #120	@ 0x78
 80025d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80025da:	6823      	ldr	r3, [r4, #0]
 80025dc:	6831      	ldr	r1, [r6, #0]
 80025de:	061f      	lsls	r7, r3, #24
 80025e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80025e4:	d402      	bmi.n	80025ec <_printf_i+0x188>
 80025e6:	065f      	lsls	r7, r3, #25
 80025e8:	bf48      	it	mi
 80025ea:	b2ad      	uxthmi	r5, r5
 80025ec:	6031      	str	r1, [r6, #0]
 80025ee:	07d9      	lsls	r1, r3, #31
 80025f0:	bf44      	itt	mi
 80025f2:	f043 0320 	orrmi.w	r3, r3, #32
 80025f6:	6023      	strmi	r3, [r4, #0]
 80025f8:	b11d      	cbz	r5, 8002602 <_printf_i+0x19e>
 80025fa:	2310      	movs	r3, #16
 80025fc:	e7ac      	b.n	8002558 <_printf_i+0xf4>
 80025fe:	4827      	ldr	r0, [pc, #156]	@ (800269c <_printf_i+0x238>)
 8002600:	e7e9      	b.n	80025d6 <_printf_i+0x172>
 8002602:	6823      	ldr	r3, [r4, #0]
 8002604:	f023 0320 	bic.w	r3, r3, #32
 8002608:	6023      	str	r3, [r4, #0]
 800260a:	e7f6      	b.n	80025fa <_printf_i+0x196>
 800260c:	4616      	mov	r6, r2
 800260e:	e7bd      	b.n	800258c <_printf_i+0x128>
 8002610:	6833      	ldr	r3, [r6, #0]
 8002612:	6825      	ldr	r5, [r4, #0]
 8002614:	6961      	ldr	r1, [r4, #20]
 8002616:	1d18      	adds	r0, r3, #4
 8002618:	6030      	str	r0, [r6, #0]
 800261a:	062e      	lsls	r6, r5, #24
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	d501      	bpl.n	8002624 <_printf_i+0x1c0>
 8002620:	6019      	str	r1, [r3, #0]
 8002622:	e002      	b.n	800262a <_printf_i+0x1c6>
 8002624:	0668      	lsls	r0, r5, #25
 8002626:	d5fb      	bpl.n	8002620 <_printf_i+0x1bc>
 8002628:	8019      	strh	r1, [r3, #0]
 800262a:	2300      	movs	r3, #0
 800262c:	6123      	str	r3, [r4, #16]
 800262e:	4616      	mov	r6, r2
 8002630:	e7bc      	b.n	80025ac <_printf_i+0x148>
 8002632:	6833      	ldr	r3, [r6, #0]
 8002634:	1d1a      	adds	r2, r3, #4
 8002636:	6032      	str	r2, [r6, #0]
 8002638:	681e      	ldr	r6, [r3, #0]
 800263a:	6862      	ldr	r2, [r4, #4]
 800263c:	2100      	movs	r1, #0
 800263e:	4630      	mov	r0, r6
 8002640:	f7fd fdc6 	bl	80001d0 <memchr>
 8002644:	b108      	cbz	r0, 800264a <_printf_i+0x1e6>
 8002646:	1b80      	subs	r0, r0, r6
 8002648:	6060      	str	r0, [r4, #4]
 800264a:	6863      	ldr	r3, [r4, #4]
 800264c:	6123      	str	r3, [r4, #16]
 800264e:	2300      	movs	r3, #0
 8002650:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002654:	e7aa      	b.n	80025ac <_printf_i+0x148>
 8002656:	6923      	ldr	r3, [r4, #16]
 8002658:	4632      	mov	r2, r6
 800265a:	4649      	mov	r1, r9
 800265c:	4640      	mov	r0, r8
 800265e:	47d0      	blx	sl
 8002660:	3001      	adds	r0, #1
 8002662:	d0ad      	beq.n	80025c0 <_printf_i+0x15c>
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	079b      	lsls	r3, r3, #30
 8002668:	d413      	bmi.n	8002692 <_printf_i+0x22e>
 800266a:	68e0      	ldr	r0, [r4, #12]
 800266c:	9b03      	ldr	r3, [sp, #12]
 800266e:	4298      	cmp	r0, r3
 8002670:	bfb8      	it	lt
 8002672:	4618      	movlt	r0, r3
 8002674:	e7a6      	b.n	80025c4 <_printf_i+0x160>
 8002676:	2301      	movs	r3, #1
 8002678:	4632      	mov	r2, r6
 800267a:	4649      	mov	r1, r9
 800267c:	4640      	mov	r0, r8
 800267e:	47d0      	blx	sl
 8002680:	3001      	adds	r0, #1
 8002682:	d09d      	beq.n	80025c0 <_printf_i+0x15c>
 8002684:	3501      	adds	r5, #1
 8002686:	68e3      	ldr	r3, [r4, #12]
 8002688:	9903      	ldr	r1, [sp, #12]
 800268a:	1a5b      	subs	r3, r3, r1
 800268c:	42ab      	cmp	r3, r5
 800268e:	dcf2      	bgt.n	8002676 <_printf_i+0x212>
 8002690:	e7eb      	b.n	800266a <_printf_i+0x206>
 8002692:	2500      	movs	r5, #0
 8002694:	f104 0619 	add.w	r6, r4, #25
 8002698:	e7f5      	b.n	8002686 <_printf_i+0x222>
 800269a:	bf00      	nop
 800269c:	080027d9 	.word	0x080027d9
 80026a0:	080027ea 	.word	0x080027ea

080026a4 <memmove>:
 80026a4:	4288      	cmp	r0, r1
 80026a6:	b510      	push	{r4, lr}
 80026a8:	eb01 0402 	add.w	r4, r1, r2
 80026ac:	d902      	bls.n	80026b4 <memmove+0x10>
 80026ae:	4284      	cmp	r4, r0
 80026b0:	4623      	mov	r3, r4
 80026b2:	d807      	bhi.n	80026c4 <memmove+0x20>
 80026b4:	1e43      	subs	r3, r0, #1
 80026b6:	42a1      	cmp	r1, r4
 80026b8:	d008      	beq.n	80026cc <memmove+0x28>
 80026ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80026be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80026c2:	e7f8      	b.n	80026b6 <memmove+0x12>
 80026c4:	4402      	add	r2, r0
 80026c6:	4601      	mov	r1, r0
 80026c8:	428a      	cmp	r2, r1
 80026ca:	d100      	bne.n	80026ce <memmove+0x2a>
 80026cc:	bd10      	pop	{r4, pc}
 80026ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80026d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80026d6:	e7f7      	b.n	80026c8 <memmove+0x24>

080026d8 <_sbrk_r>:
 80026d8:	b538      	push	{r3, r4, r5, lr}
 80026da:	4d06      	ldr	r5, [pc, #24]	@ (80026f4 <_sbrk_r+0x1c>)
 80026dc:	2300      	movs	r3, #0
 80026de:	4604      	mov	r4, r0
 80026e0:	4608      	mov	r0, r1
 80026e2:	602b      	str	r3, [r5, #0]
 80026e4:	f7fe faea 	bl	8000cbc <_sbrk>
 80026e8:	1c43      	adds	r3, r0, #1
 80026ea:	d102      	bne.n	80026f2 <_sbrk_r+0x1a>
 80026ec:	682b      	ldr	r3, [r5, #0]
 80026ee:	b103      	cbz	r3, 80026f2 <_sbrk_r+0x1a>
 80026f0:	6023      	str	r3, [r4, #0]
 80026f2:	bd38      	pop	{r3, r4, r5, pc}
 80026f4:	200001c0 	.word	0x200001c0

080026f8 <memcpy>:
 80026f8:	440a      	add	r2, r1
 80026fa:	4291      	cmp	r1, r2
 80026fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002700:	d100      	bne.n	8002704 <memcpy+0xc>
 8002702:	4770      	bx	lr
 8002704:	b510      	push	{r4, lr}
 8002706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800270a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800270e:	4291      	cmp	r1, r2
 8002710:	d1f9      	bne.n	8002706 <memcpy+0xe>
 8002712:	bd10      	pop	{r4, pc}

08002714 <_realloc_r>:
 8002714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002718:	4680      	mov	r8, r0
 800271a:	4615      	mov	r5, r2
 800271c:	460c      	mov	r4, r1
 800271e:	b921      	cbnz	r1, 800272a <_realloc_r+0x16>
 8002720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002724:	4611      	mov	r1, r2
 8002726:	f7ff bc4b 	b.w	8001fc0 <_malloc_r>
 800272a:	b92a      	cbnz	r2, 8002738 <_realloc_r+0x24>
 800272c:	f7ff fbdc 	bl	8001ee8 <_free_r>
 8002730:	2400      	movs	r4, #0
 8002732:	4620      	mov	r0, r4
 8002734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002738:	f000 f81a 	bl	8002770 <_malloc_usable_size_r>
 800273c:	4285      	cmp	r5, r0
 800273e:	4606      	mov	r6, r0
 8002740:	d802      	bhi.n	8002748 <_realloc_r+0x34>
 8002742:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002746:	d8f4      	bhi.n	8002732 <_realloc_r+0x1e>
 8002748:	4629      	mov	r1, r5
 800274a:	4640      	mov	r0, r8
 800274c:	f7ff fc38 	bl	8001fc0 <_malloc_r>
 8002750:	4607      	mov	r7, r0
 8002752:	2800      	cmp	r0, #0
 8002754:	d0ec      	beq.n	8002730 <_realloc_r+0x1c>
 8002756:	42b5      	cmp	r5, r6
 8002758:	462a      	mov	r2, r5
 800275a:	4621      	mov	r1, r4
 800275c:	bf28      	it	cs
 800275e:	4632      	movcs	r2, r6
 8002760:	f7ff ffca 	bl	80026f8 <memcpy>
 8002764:	4621      	mov	r1, r4
 8002766:	4640      	mov	r0, r8
 8002768:	f7ff fbbe 	bl	8001ee8 <_free_r>
 800276c:	463c      	mov	r4, r7
 800276e:	e7e0      	b.n	8002732 <_realloc_r+0x1e>

08002770 <_malloc_usable_size_r>:
 8002770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002774:	1f18      	subs	r0, r3, #4
 8002776:	2b00      	cmp	r3, #0
 8002778:	bfbc      	itt	lt
 800277a:	580b      	ldrlt	r3, [r1, r0]
 800277c:	18c0      	addlt	r0, r0, r3
 800277e:	4770      	bx	lr

08002780 <_init>:
 8002780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002782:	bf00      	nop
 8002784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002786:	bc08      	pop	{r3}
 8002788:	469e      	mov	lr, r3
 800278a:	4770      	bx	lr

0800278c <_fini>:
 800278c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800278e:	bf00      	nop
 8002790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002792:	bc08      	pop	{r3}
 8002794:	469e      	mov	lr, r3
 8002796:	4770      	bx	lr
